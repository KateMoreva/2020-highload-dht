<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="565"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="565"> </text>
<g id="frames">
<g>
<title>all (7,064 samples, 100.00%)</title><rect x="10.0" y="531.0" width="1180.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="13.0" y="542.0">all</text>
</g>
<g>
<title>[NIO Acceptor 0.0.0.0:8080 #0 tid=30152] (2 samples, 0.03%)</title><rect x="10.2" y="515.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.2" y="526.0"></text>
</g>
<g>
<title>one/nio/server/AcceptorThread.run (2 samples, 0.03%)</title><rect x="10.2" y="499.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.2" y="510.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.createSession (2 samples, 0.03%)</title><rect x="10.2" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.2" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.createSession (2 samples, 0.03%)</title><rect x="10.2" y="467.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.2" y="478.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.&lt;init&gt; (2 samples, 0.03%)</title><rect x="10.2" y="451.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.2" y="462.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.03%)</title><rect x="10.2" y="435.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="13.2" y="446.0"></text>
</g>
<g>
<title>[NIO Selector #3 tid=30147] (7,059 samples, 99.93%)</title><rect x="10.7" y="515.0" width="1179.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.7" y="526.0">[NIO Selector #3 tid=30147]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (7,059 samples, 99.93%)</title><rect x="10.7" y="499.0" width="1179.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.7" y="510.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (25 samples, 0.35%)</title><rect x="10.7" y="483.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.7" y="494.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (25 samples, 0.35%)</title><rect x="10.7" y="467.0" width="4.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="13.7" y="478.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (7,034 samples, 99.58%)</title><rect x="14.8" y="483.0" width="1175.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="494.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (7,034 samples, 99.58%)</title><rect x="14.8" y="467.0" width="1175.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="478.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7,034 samples, 99.58%)</title><rect x="14.8" y="451.0" width="1175.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.8" y="462.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (6,854 samples, 97.03%)</title><rect x="14.8" y="435.0" width="1145.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="17.8" y="446.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (6,854 samples, 97.03%)</title><rect x="14.8" y="419.0" width="1145.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.8" y="430.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (6,831 samples, 96.70%)</title><rect x="14.8" y="403.0" width="1141.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="414.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (64 samples, 0.91%)</title><rect x="14.8" y="387.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="398.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (64 samples, 0.91%)</title><rect x="14.8" y="371.0" width="10.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (42 samples, 0.59%)</title><rect x="14.8" y="355.0" width="7.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="366.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (42 samples, 0.59%)</title><rect x="14.8" y="339.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="17.8" y="350.0"></text>
</g>
<g>
<title>byte[] (42 samples, 0.59%)</title><rect x="14.8" y="323.0" width="7.1" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="17.8" y="334.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (22 samples, 0.31%)</title><rect x="21.9" y="355.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="24.9" y="366.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (22 samples, 0.31%)</title><rect x="21.9" y="339.0" width="3.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="24.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (19 samples, 0.27%)</title><rect x="25.5" y="387.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.5" y="398.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (19 samples, 0.27%)</title><rect x="25.5" y="371.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.5" y="382.0"></text>
</g>
<g>
<title>java/lang/String.substring (19 samples, 0.27%)</title><rect x="25.5" y="355.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.5" y="366.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (19 samples, 0.27%)</title><rect x="25.5" y="339.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.5" y="350.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.14%)</title><rect x="25.5" y="323.0" width="1.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="28.5" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (9 samples, 0.13%)</title><rect x="27.2" y="323.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.2" y="334.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.13%)</title><rect x="27.2" y="307.0" width="1.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="30.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.entity (6,748 samples, 95.53%)</title><rect x="28.7" y="387.0" width="1127.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.7" y="398.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (18 samples, 0.25%)</title><rect x="28.7" y="371.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.7" y="382.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (18 samples, 0.25%)</title><rect x="28.7" y="355.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.7" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (18 samples, 0.25%)</title><rect x="28.7" y="339.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.7" y="350.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (18 samples, 0.25%)</title><rect x="28.7" y="323.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.7" y="334.0"></text>
</g>
<g>
<title>byte[] (18 samples, 0.25%)</title><rect x="28.7" y="307.0" width="3.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="31.7" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (23 samples, 0.33%)</title><rect x="31.7" y="371.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.7" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (23 samples, 0.33%)</title><rect x="31.7" y="355.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="366.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (23 samples, 0.33%)</title><rect x="31.7" y="339.0" width="3.9" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="34.7" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.getEntity (6,707 samples, 94.95%)</title><rect x="35.6" y="371.0" width="1120.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.6" y="382.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.getEntity</text>
</g>
<g>
<title>byte[] (17 samples, 0.24%)</title><rect x="35.6" y="355.0" width="2.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="38.6" y="366.0"></text>
</g>
<g>
<title>one.nio.http.Response (14 samples, 0.20%)</title><rect x="38.6" y="355.0" width="2.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="41.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (61 samples, 0.86%)</title><rect x="40.9" y="355.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.9" y="366.0"></text>
</g>
<g>
<title>byte[] (21 samples, 0.30%)</title><rect x="40.9" y="339.0" width="3.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="43.9" y="350.0"></text>
</g>
<g>
<title>java.lang.String[] (21 samples, 0.30%)</title><rect x="44.4" y="339.0" width="3.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="47.4" y="350.0"></text>
</g>
<g>
<title>java.lang.String (19 samples, 0.27%)</title><rect x="47.9" y="339.0" width="3.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="50.9" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (6,614 samples, 93.63%)</title><rect x="51.1" y="355.0" width="1104.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.1" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (809 samples, 11.45%)</title><rect x="51.1" y="339.0" width="135.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.1" y="350.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (809 samples, 11.45%)</title><rect x="51.1" y="323.0" width="135.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.1" y="334.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (809 samples, 11.45%)</title><rect x="51.1" y="307.0" width="135.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.1" y="318.0">com/google/common..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (809 samples, 11.45%)</title><rect x="51.1" y="291.0" width="135.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="54.1" y="302.0">com/google/common..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (809 samples, 11.45%)</title><rect x="51.1" y="275.0" width="135.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="54.1" y="286.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (703 samples, 9.95%)</title><rect x="51.1" y="259.0" width="117.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.1" y="270.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (4 samples, 0.06%)</title><rect x="51.1" y="243.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.1" y="254.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 0.06%)</title><rect x="51.1" y="227.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.1" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (4 samples, 0.06%)</title><rect x="51.1" y="211.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.1" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (4 samples, 0.06%)</title><rect x="51.1" y="195.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="54.1" y="206.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (4 samples, 0.06%)</title><rect x="51.1" y="179.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="54.1" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$60/427347478.getAsBoolean (4 samples, 0.06%)</title><rect x="51.1" y="163.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.1" y="174.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (4 samples, 0.06%)</title><rect x="51.1" y="147.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.1" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (4 samples, 0.06%)</title><rect x="51.1" y="131.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.1" y="142.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (4 samples, 0.06%)</title><rect x="51.1" y="115.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$57/1209097014.apply (4 samples, 0.06%)</title><rect x="51.1" y="99.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (4 samples, 0.06%)</title><rect x="51.1" y="83.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.1" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Cell (3 samples, 0.04%)</title><rect x="51.1" y="67.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="54.1" y="78.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (175 samples, 2.48%)</title><rect x="51.8" y="243.0" width="29.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="54.8" y="254.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (175 samples, 2.48%)</title><rect x="51.8" y="227.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.8" y="238.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (175 samples, 2.48%)</title><rect x="51.8" y="211.0" width="29.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.8" y="222.0">ja..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (175 samples, 2.48%)</title><rect x="51.8" y="195.0" width="29.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.8" y="206.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (175 samples, 2.48%)</title><rect x="51.8" y="179.0" width="29.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.8" y="190.0">co..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$66/296787515.compare (175 samples, 2.48%)</title><rect x="51.8" y="163.0" width="29.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.8" y="174.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (175 samples, 2.48%)</title><rect x="51.8" y="147.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.8" y="158.0">ja..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$64/419500242.compare (175 samples, 2.48%)</title><rect x="51.8" y="131.0" width="29.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="54.8" y="142.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (175 samples, 2.48%)</title><rect x="51.8" y="115.0" width="29.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.8" y="126.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$63/1307179279.apply (175 samples, 2.48%)</title><rect x="51.8" y="99.0" width="29.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.8" y="110.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (175 samples, 2.48%)</title><rect x="51.8" y="83.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="54.8" y="94.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (175 samples, 2.48%)</title><rect x="51.8" y="67.0" width="29.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.8" y="78.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (175 samples, 2.48%)</title><rect x="51.8" y="51.0" width="29.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="54.8" y="62.0">ja..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (524 samples, 7.42%)</title><rect x="81.0" y="243.0" width="87.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.0" y="254.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (524 samples, 7.42%)</title><rect x="81.0" y="227.0" width="87.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.0" y="238.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (524 samples, 7.42%)</title><rect x="81.0" y="211.0" width="87.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.0" y="222.0">java/util/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (524 samples, 7.42%)</title><rect x="81.0" y="195.0" width="87.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.0" y="206.0">java/util/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (524 samples, 7.42%)</title><rect x="81.0" y="179.0" width="87.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.0" y="190.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (524 samples, 7.42%)</title><rect x="81.0" y="163.0" width="87.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.0" y="174.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (349 samples, 4.94%)</title><rect x="81.0" y="147.0" width="58.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.0" y="158.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$1.next (349 samples, 4.94%)</title><rect x="81.0" y="131.0" width="58.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.0" y="142.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$1.next (349 samples, 4.94%)</title><rect x="81.0" y="115.0" width="58.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.0" y="126.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getCell (349 samples, 4.94%)</title><rect x="81.0" y="99.0" width="58.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.0" y="110.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (150 samples, 2.12%)</title><rect x="81.0" y="83.0" width="25.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="84.0" y="94.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (79 samples, 1.12%)</title><rect x="81.0" y="67.0" width="13.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="84.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (71 samples, 1.01%)</title><rect x="94.2" y="67.0" width="11.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.2" y="78.0"></text>
</g>
<g>
<title>byte[] (71 samples, 1.01%)</title><rect x="94.2" y="51.0" width="11.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="97.2" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Cell (21 samples, 0.30%)</title><rect x="106.1" y="83.0" width="3.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="109.1" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Value (24 samples, 0.34%)</title><rect x="109.6" y="83.0" width="4.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="112.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getOffset (154 samples, 2.18%)</title><rect x="113.6" y="83.0" width="25.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="116.6" y="94.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (154 samples, 2.18%)</title><rect x="113.6" y="67.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.6" y="78.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (105 samples, 1.49%)</title><rect x="113.6" y="51.0" width="17.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="116.6" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (49 samples, 0.69%)</title><rect x="131.1" y="51.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="134.1" y="62.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.69%)</title><rect x="131.1" y="35.0" width="8.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="134.1" y="46.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$66/296787515.compare (175 samples, 2.48%)</title><rect x="139.3" y="147.0" width="29.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="142.3" y="158.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (175 samples, 2.48%)</title><rect x="139.3" y="131.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="142.3" y="142.0">ja..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$64/419500242.compare (175 samples, 2.48%)</title><rect x="139.3" y="115.0" width="29.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="142.3" y="126.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (175 samples, 2.48%)</title><rect x="139.3" y="99.0" width="29.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.3" y="110.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$63/1307179279.apply (175 samples, 2.48%)</title><rect x="139.3" y="83.0" width="29.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="142.3" y="94.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (175 samples, 2.48%)</title><rect x="139.3" y="67.0" width="29.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.3" y="78.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (175 samples, 2.48%)</title><rect x="139.3" y="51.0" width="29.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="142.3" y="62.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (175 samples, 2.48%)</title><rect x="139.3" y="35.0" width="29.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="142.3" y="46.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$67/1047569234.apply (106 samples, 1.50%)</title><rect x="168.5" y="259.0" width="17.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="171.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (106 samples, 1.50%)</title><rect x="168.5" y="243.0" width="17.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.5" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (106 samples, 1.50%)</title><rect x="168.5" y="227.0" width="17.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="171.5" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (106 samples, 1.50%)</title><rect x="168.5" y="211.0" width="17.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="171.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (36 samples, 0.51%)</title><rect x="186.2" y="339.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="189.2" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (36 samples, 0.51%)</title><rect x="186.2" y="323.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="189.2" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$69/1458291170.apply (36 samples, 0.51%)</title><rect x="186.2" y="307.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="189.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.lambda$iterator$4 (36 samples, 0.51%)</title><rect x="186.2" y="291.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="189.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (36 samples, 0.51%)</title><rect x="186.2" y="275.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.2" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (36 samples, 0.51%)</title><rect x="186.2" y="259.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="189.2" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (36 samples, 0.51%)</title><rect x="186.2" y="243.0" width="6.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="189.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (24 samples, 0.34%)</title><rect x="192.2" y="339.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.2" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (24 samples, 0.34%)</title><rect x="192.2" y="323.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (24 samples, 0.34%)</title><rect x="192.2" y="307.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.2" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (24 samples, 0.34%)</title><rect x="192.2" y="291.0" width="4.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="195.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (2 samples, 0.03%)</title><rect x="196.3" y="339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="196.3" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.3" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2 samples, 0.03%)</title><rect x="196.3" y="307.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="199.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.iterator (5,743 samples, 81.30%)</title><rect x="196.6" y="339.0" width="959.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.6" y="350.0">ru/mail/polis/dao/kate/moreva/MyDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (16 samples, 0.23%)</title><rect x="196.6" y="323.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.6" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (16 samples, 0.23%)</title><rect x="196.6" y="307.0" width="2.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="199.6" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (950 samples, 13.45%)</title><rect x="199.3" y="323.0" width="158.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.3" y="334.0">com/google/common/co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (5 samples, 0.07%)</title><rect x="199.3" y="307.0" width="0.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="202.3" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (944 samples, 13.36%)</title><rect x="200.1" y="307.0" width="157.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="203.1" y="318.0">com/google/common/co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (12 samples, 0.17%)</title><rect x="200.1" y="291.0" width="2.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="203.1" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (59 samples, 0.84%)</title><rect x="202.1" y="291.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.1" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (58 samples, 0.82%)</title><rect x="202.1" y="275.0" width="9.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="205.1" y="286.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (15 samples, 0.21%)</title><rect x="212.0" y="291.0" width="2.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="215.0" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (11 samples, 0.16%)</title><rect x="214.5" y="291.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="217.5" y="302.0"></text>
</g>
<g>
<title>java.lang.Object[] (11 samples, 0.16%)</title><rect x="214.5" y="275.0" width="1.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="217.5" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (722 samples, 10.22%)</title><rect x="216.3" y="291.0" width="120.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.3" y="302.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (722 samples, 10.22%)</title><rect x="216.3" y="275.0" width="120.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="219.3" y="286.0">java/util/Prior..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (21 samples, 0.30%)</title><rect x="216.3" y="259.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.3" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 0.30%)</title><rect x="216.3" y="243.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.3" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (21 samples, 0.30%)</title><rect x="216.3" y="227.0" width="3.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="219.3" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (701 samples, 9.92%)</title><rect x="219.8" y="259.0" width="117.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="222.8" y="270.0">java/util/Prio..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (701 samples, 9.92%)</title><rect x="219.8" y="243.0" width="117.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.8" y="254.0">java/util/Prio..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (701 samples, 9.92%)</title><rect x="219.8" y="227.0" width="117.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="222.8" y="238.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (701 samples, 9.92%)</title><rect x="219.8" y="211.0" width="117.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.8" y="222.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (533 samples, 7.55%)</title><rect x="219.8" y="195.0" width="89.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.8" y="206.0">com/google..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$1.next (533 samples, 7.55%)</title><rect x="219.8" y="179.0" width="89.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.8" y="190.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$1.next (533 samples, 7.55%)</title><rect x="219.8" y="163.0" width="89.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.8" y="174.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getCell (533 samples, 7.55%)</title><rect x="219.8" y="147.0" width="89.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.8" y="158.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (235 samples, 3.33%)</title><rect x="219.8" y="131.0" width="39.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.8" y="142.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (154 samples, 2.18%)</title><rect x="219.8" y="115.0" width="25.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="222.8" y="126.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (81 samples, 1.15%)</title><rect x="245.5" y="115.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.5" y="126.0"></text>
</g>
<g>
<title>byte[] (81 samples, 1.15%)</title><rect x="245.5" y="99.0" width="13.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="248.5" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Cell (37 samples, 0.52%)</title><rect x="259.1" y="131.0" width="6.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="262.1" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Value (35 samples, 0.50%)</title><rect x="265.2" y="131.0" width="5.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="268.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getOffset (226 samples, 3.20%)</title><rect x="271.1" y="131.0" width="37.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.1" y="142.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (226 samples, 3.20%)</title><rect x="271.1" y="115.0" width="37.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.1" y="126.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (144 samples, 2.04%)</title><rect x="271.1" y="99.0" width="24.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="274.1" y="110.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (82 samples, 1.16%)</title><rect x="295.1" y="99.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="298.1" y="110.0"></text>
</g>
<g>
<title>byte[] (82 samples, 1.16%)</title><rect x="295.1" y="83.0" width="13.7" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="298.1" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$66/296787515.compare (168 samples, 2.38%)</title><rect x="308.8" y="195.0" width="28.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.8" y="206.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (168 samples, 2.38%)</title><rect x="308.8" y="179.0" width="28.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.8" y="190.0">ja..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$64/419500242.compare (168 samples, 2.38%)</title><rect x="308.8" y="163.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.8" y="174.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (168 samples, 2.38%)</title><rect x="308.8" y="147.0" width="28.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.8" y="158.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$63/1307179279.apply (168 samples, 2.38%)</title><rect x="308.8" y="131.0" width="28.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.8" y="142.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (168 samples, 2.38%)</title><rect x="308.8" y="115.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.8" y="126.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (168 samples, 2.38%)</title><rect x="308.8" y="99.0" width="28.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.8" y="110.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (168 samples, 2.38%)</title><rect x="308.8" y="83.0" width="28.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="311.8" y="94.0">ja..</text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (125 samples, 1.77%)</title><rect x="336.9" y="291.0" width="20.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="339.9" y="302.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (125 samples, 1.77%)</title><rect x="336.9" y="275.0" width="20.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.9" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (125 samples, 1.77%)</title><rect x="336.9" y="259.0" width="20.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.9" y="270.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (24 samples, 0.34%)</title><rect x="336.9" y="243.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.9" y="254.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$60/427347478.getAsBoolean (24 samples, 0.34%)</title><rect x="336.9" y="227.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (24 samples, 0.34%)</title><rect x="336.9" y="211.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.9" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (24 samples, 0.34%)</title><rect x="336.9" y="195.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.9" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (24 samples, 0.34%)</title><rect x="336.9" y="179.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$57/1209097014.apply (24 samples, 0.34%)</title><rect x="336.9" y="163.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (24 samples, 0.34%)</title><rect x="336.9" y="147.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="339.9" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Cell (14 samples, 0.20%)</title><rect x="336.9" y="131.0" width="2.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="339.9" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (10 samples, 0.14%)</title><rect x="339.2" y="131.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.2" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Value (10 samples, 0.14%)</title><rect x="339.2" y="115.0" width="1.7" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="342.2" y="126.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (101 samples, 1.43%)</title><rect x="340.9" y="243.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.9" y="254.0"></text>
</g>
<g>
<title>java.util.stream.SpinedBuffer (26 samples, 0.37%)</title><rect x="340.9" y="227.0" width="4.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="343.9" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (16 samples, 0.23%)</title><rect x="345.3" y="227.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.3" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (16 samples, 0.23%)</title><rect x="345.3" y="211.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="348.3" y="222.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$59/1671277617.get$Lambda (7 samples, 0.10%)</title><rect x="345.3" y="195.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.3" y="206.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$59 (7 samples, 0.10%)</title><rect x="345.3" y="179.0" width="1.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="348.3" y="190.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$60/427347478.get$Lambda (9 samples, 0.13%)</title><rect x="346.4" y="195.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.4" y="206.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator$$Lambda$60 (9 samples, 0.13%)</title><rect x="346.4" y="179.0" width="1.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="349.4" y="190.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (9 samples, 0.13%)</title><rect x="347.9" y="227.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="350.9" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (9 samples, 0.13%)</title><rect x="347.9" y="211.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.9" y="222.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3$1 (9 samples, 0.13%)</title><rect x="347.9" y="195.0" width="1.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="350.9" y="206.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (50 samples, 0.71%)</title><rect x="349.4" y="227.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.4" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (50 samples, 0.71%)</title><rect x="349.4" y="211.0" width="8.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="352.4" y="222.0"></text>
</g>
<g>
<title>java.util.ArrayList (13 samples, 0.18%)</title><rect x="358.0" y="323.0" width="2.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="361.0" y="334.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (3 samples, 0.04%)</title><rect x="360.1" y="323.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.1" y="334.0"></text>
</g>
<g>
<title>jdk/internal/loader/ClassLoaders$AppClassLoader.loadClass (3 samples, 0.04%)</title><rect x="360.1" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.1" y="318.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClass (3 samples, 0.04%)</title><rect x="360.1" y="291.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="363.1" y="302.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.loadClassOrNull (3 samples, 0.04%)</title><rect x="360.1" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="363.1" y="286.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.findClassOnClassPathOrNull (3 samples, 0.04%)</title><rect x="360.1" y="259.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="363.1" y="270.0"></text>
</g>
<g>
<title>jdk/internal/loader/BuiltinClassLoader.defineClass (2 samples, 0.03%)</title><rect x="360.1" y="243.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.1" y="254.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4,154 samples, 58.81%)</title><rect x="360.6" y="323.0" width="693.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="363.6" y="334.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (21 samples, 0.30%)</title><rect x="360.6" y="307.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="363.6" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator (21 samples, 0.30%)</title><rect x="360.6" y="291.0" width="3.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="363.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$62/962444348.accept (4,133 samples, 58.51%)</title><rect x="364.1" y="307.0" width="690.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.1" y="318.0">ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$62/962444348.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.lambda$iterator$2 (4,133 samples, 58.51%)</title><rect x="364.1" y="291.0" width="690.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.1" y="302.0">ru/mail/polis/dao/kate/moreva/MyDAO.lambda$iterator$2</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.iterator (4,133 samples, 58.51%)</title><rect x="364.1" y="275.0" width="690.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="367.1" y="286.0">ru/mail/polis/dao/kate/moreva/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.SSTable$1 (35 samples, 0.50%)</title><rect x="364.1" y="259.0" width="5.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="367.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$1.&lt;init&gt; (4,098 samples, 58.01%)</title><rect x="370.0" y="259.0" width="684.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.0" y="270.0">ru/mail/polis/dao/kate/moreva/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getKeyPosition (4,098 samples, 58.01%)</title><rect x="370.0" y="243.0" width="684.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.0" y="254.0">ru/mail/polis/dao/kate/moreva/SSTable.getKeyPosition</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getKey (4,098 samples, 58.01%)</title><rect x="370.0" y="227.0" width="684.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.0" y="238.0">ru/mail/polis/dao/kate/moreva/SSTable.getKey</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,135 samples, 30.22%)</title><rect x="370.0" y="211.0" width="356.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.0" y="222.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,409 samples, 19.95%)</title><rect x="370.0" y="195.0" width="235.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="373.0" y="206.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (726 samples, 10.28%)</title><rect x="605.3" y="195.0" width="121.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.3" y="206.0">java/nio/HeapBy..</text>
</g>
<g>
<title>byte[] (726 samples, 10.28%)</title><rect x="605.3" y="179.0" width="121.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="608.3" y="190.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getOffset (1,963 samples, 27.79%)</title><rect x="726.6" y="211.0" width="327.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="729.6" y="222.0">ru/mail/polis/dao/kate/moreva/SSTable.getOff..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,963 samples, 27.79%)</title><rect x="726.6" y="195.0" width="327.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="729.6" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,364 samples, 19.31%)</title><rect x="726.6" y="179.0" width="227.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="729.6" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (599 samples, 8.48%)</title><rect x="954.5" y="179.0" width="100.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="957.5" y="190.0">java/nio/Hea..</text>
</g>
<g>
<title>byte[] (599 samples, 8.48%)</title><rect x="954.5" y="163.0" width="100.0" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="957.5" y="174.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (12 samples, 0.17%)</title><rect x="1054.5" y="323.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1057.5" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (12 samples, 0.17%)</title><rect x="1054.5" y="307.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1057.5" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$62/962444348.get$Lambda (12 samples, 0.17%)</title><rect x="1054.5" y="291.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1057.5" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.MyDAO$$Lambda$62 (12 samples, 0.17%)</title><rect x="1054.5" y="275.0" width="2.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1057.5" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (26 samples, 0.37%)</title><rect x="1056.7" y="323.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1059.7" y="334.0"></text>
</g>
<g>
<title>java.lang.Object[] (26 samples, 0.37%)</title><rect x="1056.7" y="307.0" width="4.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1059.7" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (9 samples, 0.13%)</title><rect x="1061.0" y="323.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (9 samples, 0.13%)</title><rect x="1061.0" y="307.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.13%)</title><rect x="1061.0" y="291.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.0" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$64/419500242.get$Lambda (9 samples, 0.13%)</title><rect x="1061.0" y="275.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1064.0" y="286.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$64 (9 samples, 0.13%)</title><rect x="1061.0" y="259.0" width="1.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1064.0" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (27 samples, 0.38%)</title><rect x="1062.5" y="323.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1065.5" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (10 samples, 0.14%)</title><rect x="1062.5" y="307.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1065.5" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (10 samples, 0.14%)</title><rect x="1062.5" y="291.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1065.5" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (10 samples, 0.14%)</title><rect x="1062.5" y="275.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.5" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$64/419500242.get$Lambda (10 samples, 0.14%)</title><rect x="1062.5" y="259.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1065.5" y="270.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$64 (10 samples, 0.14%)</title><rect x="1062.5" y="243.0" width="1.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1065.5" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (17 samples, 0.24%)</title><rect x="1064.2" y="307.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1067.2" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (17 samples, 0.24%)</title><rect x="1064.2" y="291.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1067.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (17 samples, 0.24%)</title><rect x="1064.2" y="275.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1067.2" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$66/296787515.get$Lambda (17 samples, 0.24%)</title><rect x="1064.2" y="259.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1067.2" y="270.0"></text>
</g>
<g>
<title>java.util.Comparator$$Lambda$66 (17 samples, 0.24%)</title><rect x="1064.2" y="243.0" width="2.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1067.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (374 samples, 5.29%)</title><rect x="1067.1" y="323.0" width="62.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1070.1" y="334.0">ru/mai..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (18 samples, 0.25%)</title><rect x="1067.1" y="307.0" width="3.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1070.1" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (356 samples, 5.04%)</title><rect x="1070.1" y="307.0" width="59.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1073.1" y="318.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (356 samples, 5.04%)</title><rect x="1070.1" y="291.0" width="59.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1073.1" y="302.0">com/go..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (86 samples, 1.22%)</title><rect x="1070.1" y="275.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1073.1" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (86 samples, 1.22%)</title><rect x="1070.1" y="259.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.1" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (86 samples, 1.22%)</title><rect x="1070.1" y="243.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1073.1" y="254.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (86 samples, 1.22%)</title><rect x="1070.1" y="227.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1073.1" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (86 samples, 1.22%)</title><rect x="1070.1" y="211.0" width="14.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1073.1" y="222.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$66/296787515.compare (86 samples, 1.22%)</title><rect x="1070.1" y="195.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1073.1" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (86 samples, 1.22%)</title><rect x="1070.1" y="179.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1073.1" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$64/419500242.compare (86 samples, 1.22%)</title><rect x="1070.1" y="163.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1073.1" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (86 samples, 1.22%)</title><rect x="1070.1" y="147.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1073.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$63/1307179279.apply (86 samples, 1.22%)</title><rect x="1070.1" y="131.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1073.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (86 samples, 1.22%)</title><rect x="1070.1" y="115.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1073.1" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (86 samples, 1.22%)</title><rect x="1070.1" y="99.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1073.1" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (86 samples, 1.22%)</title><rect x="1070.1" y="83.0" width="14.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1073.1" y="94.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (270 samples, 3.82%)</title><rect x="1084.4" y="275.0" width="45.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1087.4" y="286.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (270 samples, 3.82%)</title><rect x="1084.4" y="259.0" width="45.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1087.4" y="270.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (270 samples, 3.82%)</title><rect x="1084.4" y="243.0" width="45.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1087.4" y="254.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (270 samples, 3.82%)</title><rect x="1084.4" y="227.0" width="45.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1087.4" y="238.0">java..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (270 samples, 3.82%)</title><rect x="1084.4" y="211.0" width="45.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1087.4" y="222.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (270 samples, 3.82%)</title><rect x="1084.4" y="195.0" width="45.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1087.4" y="206.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (190 samples, 2.69%)</title><rect x="1084.4" y="179.0" width="31.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1087.4" y="190.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$1.next (190 samples, 2.69%)</title><rect x="1084.4" y="163.0" width="31.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1087.4" y="174.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$1.next (190 samples, 2.69%)</title><rect x="1084.4" y="147.0" width="31.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1087.4" y="158.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getCell (190 samples, 2.69%)</title><rect x="1084.4" y="131.0" width="31.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1087.4" y="142.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (87 samples, 1.23%)</title><rect x="1084.4" y="115.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1087.4" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (48 samples, 0.68%)</title><rect x="1084.4" y="99.0" width="8.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1087.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (39 samples, 0.55%)</title><rect x="1092.4" y="99.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1095.4" y="110.0"></text>
</g>
<g>
<title>byte[] (39 samples, 0.55%)</title><rect x="1092.4" y="83.0" width="6.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1095.4" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Cell (17 samples, 0.24%)</title><rect x="1099.0" y="115.0" width="2.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1102.0" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Value (13 samples, 0.18%)</title><rect x="1101.8" y="115.0" width="2.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1104.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.getOffset (73 samples, 1.03%)</title><rect x="1104.0" y="115.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1107.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (73 samples, 1.03%)</title><rect x="1104.0" y="99.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1107.0" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (45 samples, 0.64%)</title><rect x="1104.0" y="83.0" width="7.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1107.0" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (28 samples, 0.40%)</title><rect x="1111.5" y="83.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1114.5" y="94.0"></text>
</g>
<g>
<title>byte[] (28 samples, 0.40%)</title><rect x="1111.5" y="67.0" width="4.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1114.5" y="78.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$66/296787515.compare (80 samples, 1.13%)</title><rect x="1116.2" y="179.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (80 samples, 1.13%)</title><rect x="1116.2" y="163.0" width="13.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1119.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$64/419500242.compare (80 samples, 1.13%)</title><rect x="1116.2" y="147.0" width="13.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1119.2" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (80 samples, 1.13%)</title><rect x="1116.2" y="131.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1119.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$63/1307179279.apply (80 samples, 1.13%)</title><rect x="1116.2" y="115.0" width="13.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1119.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (80 samples, 1.13%)</title><rect x="1116.2" y="99.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1119.2" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (80 samples, 1.13%)</title><rect x="1116.2" y="83.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1119.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (80 samples, 1.13%)</title><rect x="1116.2" y="67.0" width="13.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1119.2" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.iterator (158 samples, 2.24%)</title><rect x="1129.5" y="323.0" width="26.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1132.5" y="334.0">r..</text>
</g>
<g>
<title>java/util/Collection.stream (55 samples, 0.78%)</title><rect x="1129.5" y="307.0" width="9.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1132.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (19 samples, 0.27%)</title><rect x="1129.5" y="291.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1132.5" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (19 samples, 0.27%)</title><rect x="1129.5" y="275.0" width="3.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="1132.5" y="286.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (36 samples, 0.51%)</title><rect x="1132.7" y="291.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1135.7" y="302.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (36 samples, 0.51%)</title><rect x="1132.7" y="275.0" width="6.0" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1135.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (11 samples, 0.16%)</title><rect x="1138.7" y="307.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1141.7" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (11 samples, 0.16%)</title><rect x="1138.7" y="291.0" width="1.9" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1141.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (21 samples, 0.30%)</title><rect x="1140.6" y="307.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1143.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (21 samples, 0.30%)</title><rect x="1140.6" y="291.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1143.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (21 samples, 0.30%)</title><rect x="1140.6" y="275.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1143.6" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (21 samples, 0.30%)</title><rect x="1140.6" y="259.0" width="3.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1143.6" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (34 samples, 0.48%)</title><rect x="1144.1" y="307.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1147.1" y="318.0"></text>
</g>
<g>
<title>java/util/Spliterators.iterator (7 samples, 0.10%)</title><rect x="1144.1" y="291.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1147.1" y="302.0"></text>
</g>
<g>
<title>java.util.Spliterators$1Adapter (7 samples, 0.10%)</title><rect x="1144.1" y="275.0" width="1.1" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1147.1" y="286.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (27 samples, 0.38%)</title><rect x="1145.2" y="291.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1148.2" y="302.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.04%)</title><rect x="1145.2" y="275.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1148.2" y="286.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.04%)</title><rect x="1145.2" y="259.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1148.2" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline$$Lambda$58/895073058.get$Lambda (3 samples, 0.04%)</title><rect x="1145.2" y="243.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1148.2" y="254.0"></text>
</g>
<g>
<title>java.util.stream.AbstractPipeline$$Lambda$58 (3 samples, 0.04%)</title><rect x="1145.2" y="227.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1148.2" y="238.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.wrap (24 samples, 0.34%)</title><rect x="1145.7" y="275.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1148.7" y="286.0"></text>
</g>
<g>
<title>java.util.stream.StreamSpliterators$WrappingSpliterator (24 samples, 0.34%)</title><rect x="1145.7" y="259.0" width="4.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1148.7" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (37 samples, 0.52%)</title><rect x="1149.7" y="307.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1152.7" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$3 (37 samples, 0.52%)</title><rect x="1149.7" y="291.0" width="6.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1152.7" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (23 samples, 0.33%)</title><rect x="1155.9" y="403.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1158.9" y="414.0"></text>
</g>
<g>
<title>java/lang/String.substring (23 samples, 0.33%)</title><rect x="1155.9" y="387.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1158.9" y="398.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (23 samples, 0.33%)</title><rect x="1155.9" y="371.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1158.9" y="382.0"></text>
</g>
<g>
<title>java.lang.String (10 samples, 0.14%)</title><rect x="1155.9" y="355.0" width="1.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1158.9" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (13 samples, 0.18%)</title><rect x="1157.6" y="355.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1160.6" y="366.0"></text>
</g>
<g>
<title>byte[] (13 samples, 0.18%)</title><rect x="1157.6" y="339.0" width="2.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1160.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (116 samples, 1.64%)</title><rect x="1159.8" y="435.0" width="19.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1162.8" y="446.0"></text>
</g>
<g>
<title>one.nio.http.Request (9 samples, 0.13%)</title><rect x="1159.8" y="419.0" width="1.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1162.8" y="430.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (37 samples, 0.52%)</title><rect x="1161.3" y="419.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1164.3" y="430.0"></text>
</g>
<g>
<title>java.lang.String[] (37 samples, 0.52%)</title><rect x="1161.3" y="403.0" width="6.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1164.3" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (70 samples, 0.99%)</title><rect x="1167.4" y="419.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1170.4" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (70 samples, 0.99%)</title><rect x="1167.4" y="403.0" width="11.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1170.4" y="414.0"></text>
</g>
<g>
<title>char[] (38 samples, 0.54%)</title><rect x="1167.4" y="387.0" width="6.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1170.4" y="398.0"></text>
</g>
<g>
<title>java.lang.String (16 samples, 0.23%)</title><rect x="1173.8" y="387.0" width="2.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1176.8" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.23%)</title><rect x="1176.5" y="387.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1179.5" y="398.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (16 samples, 0.23%)</title><rect x="1176.5" y="371.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1179.5" y="382.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (16 samples, 0.23%)</title><rect x="1176.5" y="355.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1179.5" y="366.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.23%)</title><rect x="1176.5" y="339.0" width="2.6" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1179.5" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (64 samples, 0.91%)</title><rect x="1179.1" y="435.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (64 samples, 0.91%)</title><rect x="1179.1" y="419.0" width="10.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>char[] (22 samples, 0.31%)</title><rect x="1179.1" y="403.0" width="3.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>java.lang.String (17 samples, 0.24%)</title><rect x="1182.8" y="403.0" width="2.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (25 samples, 0.35%)</title><rect x="1185.7" y="403.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (25 samples, 0.35%)</title><rect x="1185.7" y="387.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (25 samples, 0.35%)</title><rect x="1185.7" y="371.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>byte[] (25 samples, 0.35%)</title><rect x="1185.7" y="355.0" width="4.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1188.7" y="366.0"></text>
</g>
</g>
</svg>
