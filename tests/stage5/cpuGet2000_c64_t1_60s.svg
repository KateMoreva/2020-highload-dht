<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (7,640 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (33 samples, 0.43%)</title><rect x="10.3" y="915.0" width="5.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.3" y="926.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.03%)</title><rect x="10.5" y="899.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (21 samples, 0.27%)</title><rect x="10.9" y="899.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.9" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (19 samples, 0.25%)</title><rect x="11.1" y="883.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (5 samples, 0.07%)</title><rect x="11.1" y="867.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.1" y="878.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.03%)</title><rect x="11.1" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.1" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="11.4" y="851.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.4" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (14 samples, 0.18%)</title><rect x="11.9" y="867.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.9" y="878.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (2 samples, 0.03%)</title><rect x="12.3" y="851.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.3" y="862.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.03%)</title><rect x="12.8" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (4 samples, 0.05%)</title><rect x="13.2" y="851.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.2" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="13.4" y="835.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.4" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="13.4" y="819.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.4" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (5 samples, 0.07%)</title><rect x="14.2" y="899.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.2" y="910.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (3 samples, 0.04%)</title><rect x="14.2" y="883.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.2" y="894.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (2 samples, 0.03%)</title><rect x="14.6" y="883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.6" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.03%)</title><rect x="15.1" y="899.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="18.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.10%)</title><rect x="15.4" y="915.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="18.4" y="926.0"></text>
</g>
<g>
<title>_IO_vsnprintf (2 samples, 0.03%)</title><rect x="15.4" y="899.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="18.4" y="910.0"></text>
</g>
<g>
<title>__GI_vfprintf (2 samples, 0.03%)</title><rect x="15.4" y="883.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="18.4" y="894.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.3 (5 samples, 0.07%)</title><rect x="15.9" y="899.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="18.9" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="16.0" y="883.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="19.0" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.05%)</title><rect x="16.0" y="867.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="19.0" y="878.0"></text>
</g>
<g>
<title>sys_futex (3 samples, 0.04%)</title><rect x="16.2" y="851.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="19.2" y="862.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.04%)</title><rect x="16.2" y="835.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="19.2" y="846.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.04%)</title><rect x="16.2" y="819.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.03%)</title><rect x="16.2" y="803.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="16.2" y="787.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>__schedule (2 samples, 0.03%)</title><rect x="16.2" y="771.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="16.2" y="755.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="19.2" y="766.0"></text>
</g>
<g>
<title>[unknown_Java] (14 samples, 0.18%)</title><rect x="16.6" y="915.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="19.6" y="926.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (4 samples, 0.05%)</title><rect x="16.6" y="899.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="19.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="17.4" y="899.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="20.4" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="17.7" y="899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.7" y="910.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (5 samples, 0.07%)</title><rect x="18.0" y="899.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="21.0" y="910.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5,846 samples, 76.52%)</title><rect x="19.0" y="915.0" width="902.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.0" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,846 samples, 76.52%)</title><rect x="19.0" y="899.0" width="902.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="22.0" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,841 samples, 76.45%)</title><rect x="19.0" y="883.0" width="902.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.0" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (5 samples, 0.07%)</title><rect x="20.3" y="867.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.07%)</title><rect x="20.3" y="851.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="23.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (5 samples, 0.07%)</title><rect x="20.3" y="835.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="23.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="20.8" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.8" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="20.8" y="803.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.8" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="20.8" y="787.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (904 samples, 11.83%)</title><rect x="21.3" y="867.0" width="139.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.3" y="878.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (890 samples, 11.65%)</title><rect x="22.7" y="851.0" width="137.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.7" y="862.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (3 samples, 0.04%)</title><rect x="24.2" y="835.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (733 samples, 9.59%)</title><rect x="24.7" y="835.0" width="113.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.7" y="846.0">java/util/conc..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (31 samples, 0.41%)</title><rect x="25.8" y="819.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.8" y="830.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.05%)</title><rect x="29.9" y="803.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (16 samples, 0.21%)</title><rect x="30.5" y="819.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (2 samples, 0.03%)</title><rect x="33.0" y="819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.0" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="33.0" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (29 samples, 0.38%)</title><rect x="33.3" y="819.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="36.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="34.7" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="34.7" y="787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.7" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="34.7" y="771.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.7" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="34.7" y="755.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="37.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (2 samples, 0.03%)</title><rect x="35.0" y="803.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="38.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (16 samples, 0.21%)</title><rect x="35.3" y="803.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (16 samples, 0.21%)</title><rect x="35.3" y="787.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.getExclusiveOwnerThread (3 samples, 0.04%)</title><rect x="36.6" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.07%)</title><rect x="37.0" y="771.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.0" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.07%)</title><rect x="37.0" y="755.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.0" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.07%)</title><rect x="37.0" y="739.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (16 samples, 0.21%)</title><rect x="37.8" y="819.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 0.21%)</title><rect x="37.8" y="803.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.14%)</title><rect x="38.0" y="787.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.14%)</title><rect x="38.0" y="771.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (11 samples, 0.14%)</title><rect x="38.0" y="755.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.0" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (3 samples, 0.04%)</title><rect x="38.0" y="739.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="41.0" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="38.0" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="41.0" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (8 samples, 0.10%)</title><rect x="38.4" y="739.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="41.4" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.09%)</title><rect x="38.6" y="723.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="41.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.09%)</title><rect x="38.6" y="707.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="41.6" y="718.0"></text>
</g>
<g>
<title>sys_futex (7 samples, 0.09%)</title><rect x="38.6" y="691.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="41.6" y="702.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.09%)</title><rect x="38.6" y="675.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="41.6" y="686.0"></text>
</g>
<g>
<title>futex_wake_op (7 samples, 0.09%)</title><rect x="38.6" y="659.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="41.6" y="670.0"></text>
</g>
<g>
<title>wake_up_q (7 samples, 0.09%)</title><rect x="38.6" y="643.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="41.6" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (7 samples, 0.09%)</title><rect x="38.6" y="627.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="41.6" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.09%)</title><rect x="38.6" y="611.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="41.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.05%)</title><rect x="39.7" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.04%)</title><rect x="40.3" y="819.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.03%)</title><rect x="40.4" y="803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="43.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (629 samples, 8.23%)</title><rect x="40.7" y="819.0" width="97.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.7" y="830.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (2 samples, 0.03%)</title><rect x="40.7" y="803.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.7" y="814.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (627 samples, 8.21%)</title><rect x="41.0" y="803.0" width="96.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.0" y="814.0">jdk/interna..</text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.12%)</title><rect x="45.5" y="787.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="48.5" y="798.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (6 samples, 0.08%)</title><rect x="46.9" y="787.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="49.9" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.228] (5 samples, 0.07%)</title><rect x="47.8" y="787.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="50.8" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (559 samples, 7.32%)</title><rect x="48.6" y="787.0" width="86.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="51.6" y="798.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.04%)</title><rect x="51.4" y="771.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="54.4" y="782.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (8 samples, 0.10%)</title><rect x="51.9" y="771.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="54.9" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (74 samples, 0.97%)</title><rect x="53.4" y="771.0" width="11.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="56.4" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 0.10%)</title><rect x="60.0" y="755.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="63.0" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.04%)</title><rect x="61.3" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="64.3" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.22%)</title><rect x="61.7" y="755.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="64.7" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (3 samples, 0.04%)</title><rect x="64.4" y="755.0" width="0.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="67.4" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (10 samples, 0.13%)</title><rect x="65.0" y="771.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="68.0" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.228] (5 samples, 0.07%)</title><rect x="66.5" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="69.5" y="782.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_unlock (6 samples, 0.08%)</title><rect x="67.3" y="771.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="70.3" y="782.0"></text>
</g>
<g>
<title>__lll_unlock_wake (101 samples, 1.32%)</title><rect x="68.2" y="771.0" width="15.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="71.2" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (41 samples, 0.54%)</title><rect x="77.5" y="755.0" width="6.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="80.5" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (40 samples, 0.52%)</title><rect x="77.5" y="739.0" width="6.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="80.5" y="750.0"></text>
</g>
<g>
<title>sys_futex (15 samples, 0.20%)</title><rect x="81.4" y="723.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="84.4" y="734.0"></text>
</g>
<g>
<title>do_futex (15 samples, 0.20%)</title><rect x="81.4" y="707.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="84.4" y="718.0"></text>
</g>
<g>
<title>futex_wake (10 samples, 0.13%)</title><rect x="81.7" y="691.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="84.7" y="702.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.03%)</title><rect x="83.4" y="691.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="86.4" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_wait (274 samples, 3.59%)</title><rect x="83.8" y="771.0" width="42.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="86.8" y="782.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (191 samples, 2.50%)</title><rect x="96.6" y="755.0" width="29.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="99.6" y="766.0">en..</text>
</g>
<g>
<title>do_syscall_64 (190 samples, 2.49%)</title><rect x="96.6" y="739.0" width="29.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="99.6" y="750.0">do..</text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="100.4" y="723.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="103.4" y="734.0"></text>
</g>
<g>
<title>sys_futex (164 samples, 2.15%)</title><rect x="100.7" y="723.0" width="25.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="103.7" y="734.0">s..</text>
</g>
<g>
<title>do_futex (159 samples, 2.08%)</title><rect x="101.1" y="707.0" width="24.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="104.1" y="718.0">d..</text>
</g>
<g>
<title>futex_wait (147 samples, 1.92%)</title><rect x="102.8" y="691.0" width="22.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="105.8" y="702.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (108 samples, 1.41%)</title><rect x="103.8" y="675.0" width="16.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="106.8" y="686.0"></text>
</g>
<g>
<title>plist_add (5 samples, 0.07%)</title><rect x="105.8" y="659.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="108.8" y="670.0"></text>
</g>
<g>
<title>schedule (90 samples, 1.18%)</title><rect x="106.5" y="659.0" width="13.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="109.5" y="670.0"></text>
</g>
<g>
<title>__schedule (83 samples, 1.09%)</title><rect x="107.6" y="643.0" width="12.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="110.6" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (77 samples, 1.01%)</title><rect x="108.5" y="627.0" width="11.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="111.5" y="638.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="120.1" y="611.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="123.1" y="622.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="120.1" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="123.1" y="606.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="120.1" y="579.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="123.1" y="590.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="120.1" y="563.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="123.1" y="574.0"></text>
</g>
<g>
<title>run_rebalance_domains (2 samples, 0.03%)</title><rect x="120.1" y="547.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="123.1" y="558.0"></text>
</g>
<g>
<title>rebalance_domains (2 samples, 0.03%)</title><rect x="120.1" y="531.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="123.1" y="542.0"></text>
</g>
<g>
<title>update_blocked_averages (2 samples, 0.03%)</title><rect x="120.1" y="515.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="123.1" y="526.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="120.1" y="499.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="123.1" y="510.0"></text>
</g>
<g>
<title>futex_wait_setup (25 samples, 0.33%)</title><rect x="120.4" y="675.0" width="3.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="123.4" y="686.0"></text>
</g>
<g>
<title>get_futex_key (7 samples, 0.09%)</title><rect x="122.6" y="659.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="125.6" y="670.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.9 (2 samples, 0.03%)</title><rect x="123.4" y="643.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="126.4" y="654.0"></text>
</g>
<g>
<title>get_futex_value_locked (4 samples, 0.05%)</title><rect x="123.7" y="659.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="126.7" y="670.0"></text>
</g>
<g>
<title>hash_futex (3 samples, 0.04%)</title><rect x="124.4" y="675.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="127.4" y="686.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.04%)</title><rect x="125.1" y="675.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="128.1" y="686.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="125.7" y="707.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="128.7" y="718.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="126.1" y="771.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="129.1" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.03%)</title><rect x="126.6" y="771.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="129.6" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (11 samples, 0.14%)</title><rect x="126.9" y="771.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="129.9" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.04%)</title><rect x="128.6" y="771.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="131.6" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="129.1" y="771.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="132.1" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (8 samples, 0.10%)</title><rect x="129.7" y="771.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="132.7" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (16 samples, 0.21%)</title><rect x="130.9" y="771.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="133.9" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (5 samples, 0.07%)</title><rect x="133.4" y="771.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="136.4" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (5 samples, 0.07%)</title><rect x="134.2" y="771.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="137.2" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.08%)</title><rect x="135.0" y="787.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="138.0" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (13 samples, 0.17%)</title><rect x="135.9" y="787.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="138.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 0.14%)</title><rect x="137.9" y="835.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.14%)</title><rect x="137.9" y="819.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.08%)</title><rect x="137.9" y="803.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (4 samples, 0.05%)</title><rect x="138.8" y="803.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="141.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)</title><rect x="138.8" y="787.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title><rect x="138.8" y="771.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="141.8" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="138.8" y="755.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="141.8" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.04%)</title><rect x="138.8" y="739.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="141.8" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="138.8" y="723.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="141.8" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="138.8" y="707.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="141.8" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="138.8" y="691.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="141.8" y="702.0"></text>
</g>
<g>
<title>sys_futex (2 samples, 0.03%)</title><rect x="138.8" y="675.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="141.8" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="138.8" y="659.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="141.8" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="138.8" y="643.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="141.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (132 samples, 1.73%)</title><rect x="139.6" y="835.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="142.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (131 samples, 1.71%)</title><rect x="139.7" y="819.0" width="20.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (122 samples, 1.60%)</title><rect x="141.1" y="803.0" width="18.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="144.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (122 samples, 1.60%)</title><rect x="141.1" y="787.0" width="18.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="144.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (122 samples, 1.60%)</title><rect x="141.1" y="771.0" width="18.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="144.1" y="782.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.05%)</title><rect x="141.3" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="144.3" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (26 samples, 0.34%)</title><rect x="141.9" y="755.0" width="4.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="144.9" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="142.7" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="145.7" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.08%)</title><rect x="143.3" y="739.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="146.3" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="144.2" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="147.2" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (6 samples, 0.08%)</title><rect x="144.5" y="739.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="147.5" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (87 samples, 1.14%)</title><rect x="145.9" y="755.0" width="13.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="148.9" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (73 samples, 0.96%)</title><rect x="148.1" y="739.0" width="11.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="151.1" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (73 samples, 0.96%)</title><rect x="148.1" y="723.0" width="11.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="151.1" y="734.0"></text>
</g>
<g>
<title>sys_futex (64 samples, 0.84%)</title><rect x="149.5" y="707.0" width="9.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="152.5" y="718.0"></text>
</g>
<g>
<title>do_futex (63 samples, 0.82%)</title><rect x="149.5" y="691.0" width="9.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="152.5" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="149.6" y="675.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="152.6" y="686.0"></text>
</g>
<g>
<title>futex_wake_op (58 samples, 0.76%)</title><rect x="150.1" y="675.0" width="8.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="153.1" y="686.0"></text>
</g>
<g>
<title>mark_wake_futex (4 samples, 0.05%)</title><rect x="150.4" y="659.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="153.4" y="670.0"></text>
</g>
<g>
<title>wake_up_q (52 samples, 0.68%)</title><rect x="151.0" y="659.0" width="8.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="154.0" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="151.5" y="643.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="154.5" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (47 samples, 0.62%)</title><rect x="151.8" y="643.0" width="7.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="154.8" y="654.0"></text>
</g>
<g>
<title>__lock_text_start (47 samples, 0.62%)</title><rect x="151.8" y="627.0" width="7.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="154.8" y="638.0"></text>
</g>
<g>
<title>pthread_cond_signal@plt (2 samples, 0.03%)</title><rect x="159.7" y="755.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="162.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (5 samples, 0.07%)</title><rect x="160.1" y="851.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.1" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$66/1288711039.run (4,922 samples, 64.42%)</title><rect x="160.9" y="867.0" width="760.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.9" y="878.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$66/1288711039.run</text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.lambda$entity$1 (4,920 samples, 64.40%)</title><rect x="161.2" y="851.0" width="759.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.2" y="862.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.lambda$entity$1</text>
</g>
<g>
<title>java/lang/String.getBytes (12 samples, 0.16%)</title><rect x="162.3" y="835.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="165.3" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.defineMethod (6 samples, 0.08%)</title><rect x="163.2" y="819.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.isBlank (5 samples, 0.07%)</title><rect x="164.1" y="835.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOfNonWhitespace (5 samples, 0.07%)</title><rect x="164.1" y="819.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="167.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOfNonWhitespace (3 samples, 0.04%)</title><rect x="164.5" y="803.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="167.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.isWhitespace (3 samples, 0.04%)</title><rect x="164.5" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="167.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.isWhitespace (3 samples, 0.04%)</title><rect x="164.5" y="771.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.5" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.isWhitespace (3 samples, 0.04%)</title><rect x="164.5" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.08%)</title><rect x="164.9" y="835.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.9" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title><rect x="164.9" y="819.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.9" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="165.4" y="819.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="168.4" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.isProxied (41 samples, 0.54%)</title><rect x="165.8" y="835.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="168.8" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (39 samples, 0.51%)</title><rect x="166.1" y="819.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (19 samples, 0.25%)</title><rect x="166.8" y="803.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="166.8" y="787.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="166.8" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.22%)</title><rect x="167.1" y="787.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="167.8" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="168.2" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="171.2" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.04%)</title><rect x="168.2" y="755.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="171.2" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.04%)</title><rect x="168.2" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.09%)</title><rect x="168.6" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.21%)</title><rect x="169.7" y="803.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.21%)</title><rect x="169.7" y="787.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="170.5" y="771.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="173.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="170.5" y="755.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="173.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="170.5" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="173.5" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="170.5" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="173.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.10%)</title><rect x="170.8" y="771.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="173.8" y="782.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.04%)</title><rect x="170.9" y="755.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="173.9" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="171.4" y="755.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="174.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.defineMethod (4,846 samples, 63.43%)</title><rect x="172.2" y="835.0" width="748.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.2" y="846.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.defineMethod</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="172.2" y="819.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.getMethod (4,844 samples, 63.40%)</title><rect x="172.5" y="819.0" width="748.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="175.5" y="830.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.getMethod</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.04%)</title><rect x="172.5" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="175.5" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.04%)</title><rect x="172.5" y="787.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="175.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$119/645805854.get$Lambda (3 samples, 0.04%)</title><rect x="172.5" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$119/645805854.&lt;init&gt; (2 samples, 0.03%)</title><rect x="172.6" y="755.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="175.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (21 samples, 0.27%)</title><rect x="173.3" y="803.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.3" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (21 samples, 0.27%)</title><rect x="173.3" y="787.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="176.3" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (2 samples, 0.03%)</title><rect x="173.3" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="176.3" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (19 samples, 0.25%)</title><rect x="173.6" y="771.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (18 samples, 0.24%)</title><rect x="173.6" y="755.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (18 samples, 0.24%)</title><rect x="173.6" y="739.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="176.6" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (15 samples, 0.20%)</title><rect x="173.6" y="723.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (14 samples, 0.18%)</title><rect x="173.7" y="707.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (10 samples, 0.13%)</title><rect x="174.0" y="691.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$72/998018245.accept (10 samples, 0.13%)</title><rect x="174.0" y="675.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="177.0" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (10 samples, 0.13%)</title><rect x="174.0" y="659.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.0" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (8 samples, 0.10%)</title><rect x="174.3" y="643.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.3" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (8 samples, 0.10%)</title><rect x="174.3" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="177.3" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (8 samples, 0.10%)</title><rect x="174.3" y="611.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.3" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (4 samples, 0.05%)</title><rect x="174.5" y="595.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$119/645805854.test (3 samples, 0.04%)</title><rect x="174.6" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="177.6" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.04%)</title><rect x="175.1" y="595.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="178.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$119/645805854.test (2 samples, 0.03%)</title><rect x="175.6" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="178.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.lambda$getMethod$2 (2 samples, 0.03%)</title><rect x="175.6" y="675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="178.6" y="686.0"></text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.03%)</title><rect x="175.6" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (3 samples, 0.04%)</title><rect x="175.9" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (3 samples, 0.04%)</title><rect x="175.9" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$71/901477378.get (3 samples, 0.04%)</title><rect x="175.9" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="178.9" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.04%)</title><rect x="175.9" y="675.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="178.9" y="686.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (2 samples, 0.03%)</title><rect x="176.0" y="659.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="179.0" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (2 samples, 0.03%)</title><rect x="176.0" y="643.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.03%)</title><rect x="176.0" y="627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="179.0" y="638.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (2 samples, 0.03%)</title><rect x="176.0" y="611.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="179.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (16 samples, 0.21%)</title><rect x="176.5" y="803.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.5" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (16 samples, 0.21%)</title><rect x="176.5" y="787.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.5" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (16 samples, 0.21%)</title><rect x="176.5" y="771.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="179.5" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (16 samples, 0.21%)</title><rect x="176.5" y="755.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.5" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (16 samples, 0.21%)</title><rect x="176.5" y="739.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.03%)</title><rect x="177.6" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="180.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper$$Lambda$125/1502381804.apply (3 samples, 0.04%)</title><rect x="177.9" y="723.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="180.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.getEntity (2 samples, 0.03%)</title><rect x="178.4" y="723.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.replication (2 samples, 0.03%)</title><rect x="178.7" y="723.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.getEntity (1,052 samples, 13.77%)</title><rect x="179.0" y="803.0" width="162.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.0" y="814.0">ru/mail/polis/service..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1518931080.linkToTargetMethod (14 samples, 0.18%)</title><rect x="179.7" y="787.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1437292948.invoke (14 samples, 0.18%)</title><rect x="179.7" y="771.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.7" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1114443293.invokeStatic (13 samples, 0.17%)</title><rect x="179.9" y="755.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="182.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (13 samples, 0.17%)</title><rect x="179.9" y="739.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.9" y="750.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (13 samples, 0.17%)</title><rect x="179.9" y="723.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="182.9" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.03%)</title><rect x="181.9" y="787.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="184.9" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3 samples, 0.04%)</title><rect x="182.5" y="787.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="185.5" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="182.5" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.5" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="182.5" y="755.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="185.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="182.5" y="739.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="185.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="182.5" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="185.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="182.7" y="707.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.7" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="182.7" y="691.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="185.7" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (368 samples, 4.82%)</title><rect x="183.0" y="787.0" width="56.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.0" y="798.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (56 samples, 0.73%)</title><rect x="183.0" y="771.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.0" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (56 samples, 0.73%)</title><rect x="183.0" y="755.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.0" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (56 samples, 0.73%)</title><rect x="183.0" y="739.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="186.0" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (48 samples, 0.63%)</title><rect x="184.2" y="723.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="187.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (47 samples, 0.62%)</title><rect x="184.4" y="707.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.4" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (28 samples, 0.37%)</title><rect x="184.5" y="691.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (28 samples, 0.37%)</title><rect x="184.5" y="675.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="187.5" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (28 samples, 0.37%)</title><rect x="184.5" y="659.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="187.5" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 0.26%)</title><rect x="184.5" y="643.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.5" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (18 samples, 0.24%)</title><rect x="184.5" y="627.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="187.5" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (17 samples, 0.22%)</title><rect x="184.7" y="611.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="187.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (17 samples, 0.22%)</title><rect x="184.7" y="595.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="187.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (17 samples, 0.22%)</title><rect x="184.7" y="579.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="187.7" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (12 samples, 0.16%)</title><rect x="185.0" y="563.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (12 samples, 0.16%)</title><rect x="185.0" y="547.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="188.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (12 samples, 0.16%)</title><rect x="185.0" y="531.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (12 samples, 0.16%)</title><rect x="185.0" y="515.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="185.0" y="499.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="188.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="185.0" y="483.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.03%)</title><rect x="185.0" y="467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.0" y="478.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (10 samples, 0.13%)</title><rect x="185.3" y="499.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (10 samples, 0.13%)</title><rect x="185.3" y="483.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="188.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (10 samples, 0.13%)</title><rect x="185.3" y="467.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="188.3" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (9 samples, 0.12%)</title><rect x="185.5" y="451.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.5" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (8 samples, 0.10%)</title><rect x="185.6" y="435.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.6" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (8 samples, 0.10%)</title><rect x="185.6" y="419.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="188.6" y="430.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.05%)</title><rect x="186.2" y="403.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="189.2" y="414.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.05%)</title><rect x="186.2" y="387.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="189.2" y="398.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="186.5" y="371.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="189.5" y="382.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.init (3 samples, 0.04%)</title><rect x="186.8" y="563.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="189.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool$$Lambda$89/728436316.apply (7 samples, 0.09%)</title><rect x="187.8" y="643.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="190.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (7 samples, 0.09%)</title><rect x="187.8" y="627.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="190.8" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.08%)</title><rect x="187.9" y="611.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="188.2" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="191.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="188.2" y="579.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="191.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="188.2" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="191.2" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="188.2" y="547.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="191.2" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="188.2" y="531.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="191.2" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5 samples, 0.07%)</title><rect x="188.9" y="691.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.9" y="702.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.07%)</title><rect x="188.9" y="675.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.9" y="686.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.03%)</title><rect x="189.3" y="659.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="192.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$108/658240232.apply (13 samples, 0.17%)</title><rect x="189.6" y="691.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (7 samples, 0.09%)</title><rect x="190.6" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.6" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.08%)</title><rect x="190.7" y="659.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="191.0" y="643.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="194.0" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.03%)</title><rect x="191.3" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.3" y="654.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="191.3" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="194.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="191.3" y="611.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.3" y="622.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (16 samples, 0.21%)</title><rect x="191.6" y="771.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.6" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (8 samples, 0.10%)</title><rect x="191.6" y="755.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.6" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2 samples, 0.03%)</title><rect x="191.8" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.07%)</title><rect x="192.1" y="739.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="195.1" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (8 samples, 0.10%)</title><rect x="192.9" y="755.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$116/235889887.apply (8 samples, 0.10%)</title><rect x="192.9" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.lambda$iterator$4 (8 samples, 0.10%)</title><rect x="192.9" y="723.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="195.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (8 samples, 0.10%)</title><rect x="192.9" y="707.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.9" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.10%)</title><rect x="192.9" y="691.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.9" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (8 samples, 0.10%)</title><rect x="192.9" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.9" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="192.9" y="659.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.9" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="192.9" y="643.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.9" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="192.9" y="627.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.9" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.07%)</title><rect x="193.0" y="611.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.0" y="622.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (4 samples, 0.05%)</title><rect x="193.2" y="595.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="196.2" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (7 samples, 0.09%)</title><rect x="194.1" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.1" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (2 samples, 0.03%)</title><rect x="194.1" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.1" y="766.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.07%)</title><rect x="194.4" y="755.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.4" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (2 samples, 0.03%)</title><rect x="195.2" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="198.2" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="195.2" y="755.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="198.2" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (2 samples, 0.03%)</title><rect x="195.2" y="739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="198.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (6 samples, 0.08%)</title><rect x="195.5" y="771.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="198.5" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (6 samples, 0.08%)</title><rect x="195.5" y="755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="198.5" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (6 samples, 0.08%)</title><rect x="195.5" y="739.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.5" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="195.8" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="198.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.iterator (281 samples, 3.68%)</title><rect x="196.4" y="771.0" width="43.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.4" y="782.0">ru/m..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (9 samples, 0.12%)</title><rect x="197.3" y="755.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.3" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (9 samples, 0.12%)</title><rect x="197.3" y="739.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.3" y="750.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (4 samples, 0.05%)</title><rect x="198.0" y="723.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="201.0" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (3 samples, 0.04%)</title><rect x="198.7" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="198.9" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="201.9" y="750.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (8 samples, 0.10%)</title><rect x="199.2" y="755.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.2" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.05%)</title><rect x="199.8" y="739.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.8" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.04%)</title><rect x="200.0" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.0" y="734.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.get$Lambda (3 samples, 0.04%)</title><rect x="200.0" y="707.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.0" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.&lt;init&gt; (2 samples, 0.03%)</title><rect x="200.1" y="691.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="203.1" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (4 samples, 0.05%)</title><rect x="200.4" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="203.4" y="766.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (4 samples, 0.05%)</title><rect x="200.4" y="739.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="203.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.05%)</title><rect x="200.4" y="723.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (4 samples, 0.05%)</title><rect x="200.4" y="707.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.4" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.get$Lambda (4 samples, 0.05%)</title><rect x="200.4" y="691.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="203.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.cellIterator (2 samples, 0.03%)</title><rect x="200.7" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="203.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (6 samples, 0.08%)</title><rect x="201.1" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="204.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.07%)</title><rect x="201.2" y="739.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.07%)</title><rect x="201.2" y="723.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.04%)</title><rect x="201.4" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.4" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.04%)</title><rect x="201.4" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.4" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.04%)</title><rect x="201.4" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (30 samples, 0.39%)</title><rect x="202.0" y="755.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (30 samples, 0.39%)</title><rect x="202.0" y="739.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.0" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (30 samples, 0.39%)</title><rect x="202.0" y="723.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.0" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (29 samples, 0.38%)</title><rect x="202.1" y="707.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="205.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (29 samples, 0.38%)</title><rect x="202.1" y="691.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.1" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (24 samples, 0.31%)</title><rect x="202.1" y="675.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (19 samples, 0.25%)</title><rect x="202.1" y="659.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.1" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (18 samples, 0.24%)</title><rect x="202.3" y="643.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (18 samples, 0.24%)</title><rect x="202.3" y="627.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="205.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (18 samples, 0.24%)</title><rect x="202.3" y="611.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (15 samples, 0.20%)</title><rect x="202.4" y="595.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (15 samples, 0.20%)</title><rect x="202.4" y="579.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (15 samples, 0.20%)</title><rect x="202.4" y="563.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (15 samples, 0.20%)</title><rect x="202.4" y="547.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="202.6" y="531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="202.6" y="515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.03%)</title><rect x="202.6" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (12 samples, 0.16%)</title><rect x="202.9" y="531.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (12 samples, 0.16%)</title><rect x="202.9" y="515.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (12 samples, 0.16%)</title><rect x="202.9" y="499.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="205.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (10 samples, 0.13%)</title><rect x="203.2" y="483.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.2" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (8 samples, 0.10%)</title><rect x="203.5" y="467.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.5" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (8 samples, 0.10%)</title><rect x="203.5" y="451.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.5" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="204.3" y="435.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="207.3" y="446.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="204.3" y="419.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="207.3" y="430.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="204.3" y="403.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="207.3" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.05%)</title><rect x="205.1" y="659.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="208.1" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.05%)</title><rect x="205.1" y="643.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="208.1" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.04%)</title><rect x="205.8" y="675.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="208.8" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="206.0" y="659.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.0" y="670.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.03%)</title><rect x="206.0" y="643.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="209.0" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool$$Lambda$89/728436316.apply (2 samples, 0.03%)</title><rect x="206.3" y="675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (2 samples, 0.03%)</title><rect x="206.3" y="659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.03%)</title><rect x="206.3" y="643.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.cellIterator (215 samples, 2.81%)</title><rect x="206.6" y="755.0" width="33.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.6" y="766.0">ru..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 0.07%)</title><rect x="208.0" y="739.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (5 samples, 0.07%)</title><rect x="208.0" y="723.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="208.2" y="707.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="211.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (3 samples, 0.04%)</title><rect x="208.2" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="211.2" y="702.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (5 samples, 0.07%)</title><rect x="208.8" y="739.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="211.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool.iterator (195 samples, 2.55%)</title><rect x="209.7" y="739.0" width="30.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.7" y="750.0">ru..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (27 samples, 0.35%)</title><rect x="209.7" y="723.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.7" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (26 samples, 0.34%)</title><rect x="209.9" y="707.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="212.9" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (24 samples, 0.31%)</title><rect x="210.2" y="691.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (24 samples, 0.31%)</title><rect x="210.2" y="675.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (24 samples, 0.31%)</title><rect x="210.2" y="659.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (13 samples, 0.17%)</title><rect x="210.6" y="643.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (12 samples, 0.16%)</title><rect x="210.8" y="627.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.8" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (12 samples, 0.16%)</title><rect x="210.8" y="611.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="213.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (12 samples, 0.16%)</title><rect x="210.8" y="595.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.8" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (11 samples, 0.14%)</title><rect x="210.9" y="579.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="213.9" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (10 samples, 0.13%)</title><rect x="211.1" y="563.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (10 samples, 0.13%)</title><rect x="211.1" y="547.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (9 samples, 0.12%)</title><rect x="211.2" y="531.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (5 samples, 0.07%)</title><rect x="211.9" y="515.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="214.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (5 samples, 0.07%)</title><rect x="211.9" y="499.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.9" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="212.2" y="483.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="215.2" y="494.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="212.3" y="467.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="215.3" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="212.3" y="451.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="215.3" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (8 samples, 0.10%)</title><rect x="212.6" y="643.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.6" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.04%)</title><rect x="213.1" y="627.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.1" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.04%)</title><rect x="213.1" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.get$Lambda (2 samples, 0.03%)</title><rect x="213.3" y="595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="216.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.&lt;init&gt; (2 samples, 0.03%)</title><rect x="213.3" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.3" y="590.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (9 samples, 0.12%)</title><rect x="213.9" y="723.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="216.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (2 samples, 0.03%)</title><rect x="215.4" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (3 samples, 0.04%)</title><rect x="215.9" y="723.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (3 samples, 0.04%)</title><rect x="215.9" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="218.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (3 samples, 0.04%)</title><rect x="215.9" y="691.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.9" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (15 samples, 0.20%)</title><rect x="216.3" y="723.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="219.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (15 samples, 0.20%)</title><rect x="216.3" y="707.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.3" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (14 samples, 0.18%)</title><rect x="216.5" y="691.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (10 samples, 0.13%)</title><rect x="216.5" y="675.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="219.5" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (10 samples, 0.13%)</title><rect x="216.5" y="659.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (10 samples, 0.13%)</title><rect x="216.5" y="643.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (10 samples, 0.13%)</title><rect x="216.5" y="627.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="219.5" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (9 samples, 0.12%)</title><rect x="216.5" y="611.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.5" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (9 samples, 0.12%)</title><rect x="216.5" y="595.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.5" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (9 samples, 0.12%)</title><rect x="216.5" y="579.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="219.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (9 samples, 0.12%)</title><rect x="216.5" y="563.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.04%)</title><rect x="216.5" y="547.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (3 samples, 0.04%)</title><rect x="216.5" y="531.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="219.5" y="542.0"></text>
</g>
<g>
<title>java/util/AbstractMap$SimpleImmutableEntry.&lt;init&gt; (2 samples, 0.03%)</title><rect x="216.5" y="515.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.5" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (6 samples, 0.08%)</title><rect x="217.0" y="547.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.0" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (5 samples, 0.07%)</title><rect x="217.1" y="531.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.1" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (5 samples, 0.07%)</title><rect x="217.1" y="515.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="220.1" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (4 samples, 0.05%)</title><rect x="217.3" y="499.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.3" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (4 samples, 0.05%)</title><rect x="217.3" y="483.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (4 samples, 0.05%)</title><rect x="217.3" y="467.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.3" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.05%)</title><rect x="218.0" y="675.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="221.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.05%)</title><rect x="218.0" y="659.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.0" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.05%)</title><rect x="218.0" y="643.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.0" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 0.04%)</title><rect x="218.0" y="627.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.0" y="638.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (3 samples, 0.04%)</title><rect x="218.0" y="611.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="221.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (3 samples, 0.04%)</title><rect x="218.0" y="595.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="221.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (3 samples, 0.04%)</title><rect x="218.0" y="579.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (3 samples, 0.04%)</title><rect x="218.0" y="563.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="218.2" y="547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.2" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.iterator (137 samples, 1.79%)</title><rect x="218.7" y="723.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.7" y="734.0">r..</text>
</g>
<g>
<title>java/util/Collection.stream (123 samples, 1.61%)</title><rect x="218.7" y="707.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (121 samples, 1.58%)</title><rect x="218.7" y="691.0" width="18.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="221.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (121 samples, 1.58%)</title><rect x="218.7" y="675.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (121 samples, 1.58%)</title><rect x="218.7" y="659.0" width="18.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (5 samples, 0.07%)</title><rect x="220.8" y="643.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (2 samples, 0.03%)</title><rect x="221.6" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="224.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (2 samples, 0.03%)</title><rect x="221.6" y="627.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.03%)</title><rect x="221.6" y="611.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (100 samples, 1.31%)</title><rect x="221.9" y="643.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (87 samples, 1.14%)</title><rect x="223.9" y="627.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (15 samples, 0.20%)</title><rect x="224.8" y="611.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.8" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.13%)</title><rect x="225.3" y="595.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.3" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (10 samples, 0.13%)</title><rect x="225.3" y="579.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.3" y="590.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.05%)</title><rect x="225.6" y="563.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.6" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="225.9" y="547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.9" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.05%)</title><rect x="226.2" y="563.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.2" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.05%)</title><rect x="226.2" y="547.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="229.2" y="558.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.04%)</title><rect x="226.4" y="531.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="229.4" y="542.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.compare (2 samples, 0.03%)</title><rect x="226.8" y="595.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="229.8" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.03%)</title><rect x="226.8" y="579.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.8" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper$$Lambda$125/1502381804.apply (2 samples, 0.03%)</title><rect x="226.8" y="563.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (66 samples, 0.86%)</title><rect x="227.2" y="611.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (59 samples, 0.77%)</title><rect x="228.2" y="595.0" width="9.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.2" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (51 samples, 0.67%)</title><rect x="229.0" y="579.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="232.0" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (48 samples, 0.63%)</title><rect x="229.5" y="563.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="232.5" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (7 samples, 0.09%)</title><rect x="230.1" y="547.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.1" y="558.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (22 samples, 0.29%)</title><rect x="231.2" y="547.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.2" y="558.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 0.14%)</title><rect x="232.9" y="531.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.9" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title><rect x="233.6" y="515.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="236.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (4 samples, 0.05%)</title><rect x="234.0" y="515.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="237.0" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (15 samples, 0.20%)</title><rect x="234.6" y="547.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.6" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (14 samples, 0.18%)</title><rect x="234.6" y="531.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.6" y="542.0"></text>
</g>
<g>
<title>vectorizedMismatch (13 samples, 0.17%)</title><rect x="234.7" y="515.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="237.7" y="526.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.compare (3 samples, 0.04%)</title><rect x="236.9" y="579.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="239.9" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.04%)</title><rect x="236.9" y="563.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.9" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (2 samples, 0.03%)</title><rect x="237.4" y="691.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (5 samples, 0.07%)</title><rect x="237.7" y="707.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="240.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (4 samples, 0.05%)</title><rect x="238.4" y="707.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="241.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.04%)</title><rect x="238.6" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="241.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (3 samples, 0.04%)</title><rect x="238.6" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.&lt;init&gt; (2 samples, 0.03%)</title><rect x="238.7" y="659.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (4 samples, 0.05%)</title><rect x="239.2" y="707.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (3 samples, 0.04%)</title><rect x="239.4" y="691.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="242.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (3 samples, 0.04%)</title><rect x="239.4" y="675.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (3 samples, 0.04%)</title><rect x="239.4" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (3 samples, 0.04%)</title><rect x="239.4" y="643.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.4" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.getCell (657 samples, 8.60%)</title><rect x="239.8" y="787.0" width="101.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="242.8" y="798.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5 samples, 0.07%)</title><rect x="240.1" y="771.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="243.1" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="240.3" y="755.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="243.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (2 samples, 0.03%)</title><rect x="240.9" y="771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (39 samples, 0.51%)</title><rect x="241.2" y="771.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.2" y="782.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (31 samples, 0.41%)</title><rect x="241.5" y="755.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="244.5" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (31 samples, 0.41%)</title><rect x="241.5" y="739.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (31 samples, 0.41%)</title><rect x="241.5" y="723.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.5" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (21 samples, 0.27%)</title><rect x="241.5" y="707.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.5" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (20 samples, 0.26%)</title><rect x="241.5" y="691.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.5" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (20 samples, 0.26%)</title><rect x="241.5" y="675.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="244.5" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (19 samples, 0.25%)</title><rect x="241.7" y="659.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="244.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (19 samples, 0.25%)</title><rect x="241.7" y="643.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.clear (2 samples, 0.03%)</title><rect x="241.7" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (15 samples, 0.20%)</title><rect x="242.0" y="627.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (15 samples, 0.20%)</title><rect x="242.0" y="611.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (15 samples, 0.20%)</title><rect x="242.0" y="595.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (15 samples, 0.20%)</title><rect x="242.0" y="579.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (6 samples, 0.08%)</title><rect x="242.0" y="563.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (6 samples, 0.08%)</title><rect x="242.0" y="547.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (5 samples, 0.07%)</title><rect x="242.1" y="531.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (3 samples, 0.04%)</title><rect x="242.4" y="515.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.4" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (9 samples, 0.12%)</title><rect x="242.9" y="563.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="245.9" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (9 samples, 0.12%)</title><rect x="242.9" y="547.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.9" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (9 samples, 0.12%)</title><rect x="242.9" y="531.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="245.9" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (7 samples, 0.09%)</title><rect x="243.2" y="515.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.2" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (6 samples, 0.08%)</title><rect x="243.4" y="499.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.4" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (6 samples, 0.08%)</title><rect x="243.4" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.4" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="243.8" y="467.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="246.8" y="478.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="243.8" y="451.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="246.8" y="462.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="243.8" y="435.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="246.8" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (4 samples, 0.05%)</title><rect x="244.8" y="707.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="247.8" y="718.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="245.1" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool$$Lambda$89/728436316.apply (6 samples, 0.08%)</title><rect x="245.4" y="707.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="248.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (6 samples, 0.08%)</title><rect x="245.4" y="691.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="248.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.08%)</title><rect x="245.4" y="675.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="248.4" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.05%)</title><rect x="245.7" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="248.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.05%)</title><rect x="245.7" y="643.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="248.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.05%)</title><rect x="245.7" y="627.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="248.7" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="245.7" y="611.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="248.7" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$96/371629601.apply (6 samples, 0.08%)</title><rect x="246.3" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.3" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (6 samples, 0.08%)</title><rect x="246.3" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.3" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (6 samples, 0.08%)</title><rect x="246.3" y="723.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (3 samples, 0.04%)</title><rect x="246.8" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.8" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="246.8" y="691.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="246.8" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.8" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO$$Lambda$96/371629601.apply (8 samples, 0.10%)</title><rect x="247.2" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.getIterator (601 samples, 7.87%)</title><rect x="248.5" y="771.0" width="92.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="251.5" y="782.0">ru/mail/pol..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="249.9" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="252.9" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="249.9" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="252.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="249.9" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="252.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="249.9" y="707.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="252.9" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (12 samples, 0.16%)</title><rect x="250.2" y="755.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.2" y="766.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (11 samples, 0.14%)</title><rect x="250.3" y="739.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="250.9" y="723.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="253.9" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.04%)</title><rect x="250.9" y="707.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="253.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.04%)</title><rect x="250.9" y="691.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="253.9" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="250.9" y="675.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="253.9" y="686.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.04%)</title><rect x="251.6" y="723.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.6" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="251.7" y="707.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="254.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.03%)</title><rect x="251.7" y="691.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="254.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="251.7" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="254.7" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="251.7" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="254.7" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (42 samples, 0.55%)</title><rect x="252.0" y="755.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.0" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (42 samples, 0.55%)</title><rect x="252.0" y="739.0" width="6.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.0" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (32 samples, 0.42%)</title><rect x="252.6" y="723.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="255.6" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (32 samples, 0.42%)</title><rect x="252.6" y="707.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.6" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (15 samples, 0.20%)</title><rect x="253.9" y="691.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.9" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.08%)</title><rect x="254.3" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.3" y="686.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="255.3" y="675.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="258.3" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="255.6" y="675.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="258.6" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.07%)</title><rect x="256.2" y="691.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool.iterator (3 samples, 0.04%)</title><rect x="257.1" y="691.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (6 samples, 0.08%)</title><rect x="257.6" y="723.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.6" y="734.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (3 samples, 0.04%)</title><rect x="258.5" y="755.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.5" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="258.5" y="739.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.5" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="258.5" y="723.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.5" y="734.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.get$Lambda (2 samples, 0.03%)</title><rect x="258.5" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.5" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.&lt;init&gt; (2 samples, 0.03%)</title><rect x="258.5" y="691.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.5" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (12 samples, 0.16%)</title><rect x="259.0" y="755.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.0" y="766.0"></text>
</g>
<g>
<title>java/util/Comparator.comparing (8 samples, 0.10%)</title><rect x="259.0" y="739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.0" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8 samples, 0.10%)</title><rect x="259.0" y="723.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="262.0" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8 samples, 0.10%)</title><rect x="259.0" y="707.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="262.0" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.get$Lambda (7 samples, 0.09%)</title><rect x="259.1" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.1" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.&lt;init&gt; (7 samples, 0.09%)</title><rect x="259.1" y="675.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.1" y="686.0"></text>
</g>
<g>
<title>java/util/Comparator.thenComparing (4 samples, 0.05%)</title><rect x="260.2" y="739.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.2" y="750.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (2 samples, 0.03%)</title><rect x="260.5" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="263.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (6 samples, 0.08%)</title><rect x="260.8" y="755.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.8" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="260.8" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="263.8" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="261.0" y="723.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="264.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (2 samples, 0.03%)</title><rect x="261.3" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="264.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (2 samples, 0.03%)</title><rect x="261.3" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (2 samples, 0.03%)</title><rect x="261.3" y="707.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (2 samples, 0.03%)</title><rect x="261.3" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (2 samples, 0.03%)</title><rect x="261.3" y="675.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (2 samples, 0.03%)</title><rect x="261.3" y="659.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.3" y="670.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.compare (2 samples, 0.03%)</title><rect x="261.3" y="643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="264.3" y="654.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (2 samples, 0.03%)</title><rect x="261.3" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (64 samples, 0.84%)</title><rect x="261.8" y="755.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.8" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (64 samples, 0.84%)</title><rect x="261.8" y="739.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.8" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (53 samples, 0.69%)</title><rect x="262.2" y="723.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.2" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (51 samples, 0.67%)</title><rect x="262.5" y="707.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (51 samples, 0.67%)</title><rect x="262.5" y="691.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (31 samples, 0.41%)</title><rect x="262.5" y="675.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="265.5" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (27 samples, 0.35%)</title><rect x="262.5" y="659.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.5" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (27 samples, 0.35%)</title><rect x="262.5" y="643.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="265.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (26 samples, 0.34%)</title><rect x="262.7" y="627.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.7" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (26 samples, 0.34%)</title><rect x="262.7" y="611.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.7" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (21 samples, 0.27%)</title><rect x="262.7" y="595.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="265.7" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (18 samples, 0.24%)</title><rect x="263.1" y="579.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="266.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (18 samples, 0.24%)</title><rect x="263.1" y="563.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (17 samples, 0.22%)</title><rect x="263.3" y="547.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.05%)</title><rect x="263.6" y="531.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.05%)</title><rect x="263.6" y="515.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="266.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.05%)</title><rect x="263.6" y="499.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (11 samples, 0.14%)</title><rect x="264.2" y="531.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (9 samples, 0.12%)</title><rect x="264.5" y="515.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="267.5" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (9 samples, 0.12%)</title><rect x="264.5" y="499.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.5" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (6 samples, 0.08%)</title><rect x="265.0" y="483.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.0" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (5 samples, 0.07%)</title><rect x="265.2" y="467.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.2" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (5 samples, 0.07%)</title><rect x="265.2" y="451.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.2" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="265.5" y="435.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="268.5" y="446.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="265.5" y="419.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="268.5" y="430.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="265.6" y="403.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="268.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (4 samples, 0.05%)</title><rect x="266.1" y="595.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="269.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.03%)</title><rect x="266.1" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (2 samples, 0.03%)</title><rect x="266.1" y="563.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="269.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="266.4" y="579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.4" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool$$Lambda$89/728436316.apply (2 samples, 0.03%)</title><rect x="266.4" y="563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.4" y="574.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.05%)</title><rect x="266.7" y="659.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.05%)</title><rect x="266.7" y="643.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (2 samples, 0.03%)</title><rect x="267.0" y="627.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.0" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.03%)</title><rect x="267.3" y="675.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.3" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (8 samples, 0.10%)</title><rect x="267.6" y="675.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="270.6" y="686.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.07%)</title><rect x="268.1" y="659.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="271.1" y="670.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.03%)</title><rect x="268.5" y="643.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="271.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool$$Lambda$89/728436316.apply (10 samples, 0.13%)</title><rect x="268.9" y="675.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (10 samples, 0.13%)</title><rect x="268.9" y="659.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.9" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.13%)</title><rect x="268.9" y="643.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.9" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.05%)</title><rect x="269.8" y="627.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="272.8" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.05%)</title><rect x="269.8" y="611.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="272.8" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.05%)</title><rect x="269.8" y="595.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="272.8" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="269.8" y="579.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="272.8" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="270.1" y="563.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="273.1" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title><rect x="270.4" y="723.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="273.4" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="270.9" y="723.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="273.9" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="271.2" y="723.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="274.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool.iterator (451 samples, 5.90%)</title><rect x="271.6" y="755.0" width="69.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.6" y="766.0">ru/mail..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (88 samples, 1.15%)</title><rect x="273.2" y="739.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.2" y="750.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (88 samples, 1.15%)</title><rect x="273.2" y="723.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.2" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (4 samples, 0.05%)</title><rect x="274.1" y="707.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="277.1" y="718.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.04%)</title><rect x="274.7" y="707.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="277.7" y="718.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (75 samples, 0.98%)</title><rect x="275.2" y="707.0" width="11.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.2" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (74 samples, 0.97%)</title><rect x="275.3" y="691.0" width="11.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="278.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (74 samples, 0.97%)</title><rect x="275.3" y="675.0" width="11.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (50 samples, 0.65%)</title><rect x="275.3" y="659.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractSpinedBuffer.count (2 samples, 0.03%)</title><rect x="276.7" y="643.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="279.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (2 samples, 0.03%)</title><rect x="277.0" y="643.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (37 samples, 0.48%)</title><rect x="277.4" y="643.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (37 samples, 0.48%)</title><rect x="277.4" y="627.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="280.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (37 samples, 0.48%)</title><rect x="277.4" y="611.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="277.4" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (2 samples, 0.03%)</title><rect x="277.4" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (35 samples, 0.46%)</title><rect x="277.7" y="595.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.7" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (28 samples, 0.37%)</title><rect x="278.7" y="579.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (28 samples, 0.37%)</title><rect x="278.7" y="563.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.7" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (23 samples, 0.30%)</title><rect x="279.5" y="547.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="282.5" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (20 samples, 0.26%)</title><rect x="280.0" y="531.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="283.0" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (20 samples, 0.26%)</title><rect x="280.0" y="515.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="280.8" y="499.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="283.8" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="280.8" y="483.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="283.8" y="494.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.05%)</title><rect x="281.1" y="499.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="284.1" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.12%)</title><rect x="281.7" y="499.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="284.7" y="510.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.10%)</title><rect x="281.8" y="483.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="284.8" y="494.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="282.6" y="467.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="285.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (24 samples, 0.31%)</title><rect x="283.1" y="659.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.1" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8 samples, 0.10%)</title><rect x="284.0" y="643.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8 samples, 0.10%)</title><rect x="284.0" y="627.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.get$Lambda (8 samples, 0.10%)</title><rect x="284.0" y="611.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.&lt;init&gt; (8 samples, 0.10%)</title><rect x="284.0" y="595.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (2 samples, 0.03%)</title><rect x="284.9" y="579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.03%)</title><rect x="285.2" y="643.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (2 samples, 0.03%)</title><rect x="285.2" y="627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/SpinedBuffer.&lt;init&gt; (8 samples, 0.10%)</title><rect x="285.5" y="643.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="288.5" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.05%)</title><rect x="286.0" y="627.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.0" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (3 samples, 0.04%)</title><rect x="286.0" y="611.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="286.0" y="595.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="289.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="286.0" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="289.0" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="286.0" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="289.0" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (4 samples, 0.05%)</title><rect x="286.8" y="739.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (2 samples, 0.03%)</title><rect x="287.5" y="739.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.values (3 samples, 0.04%)</title><rect x="287.9" y="739.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (6 samples, 0.08%)</title><rect x="288.3" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (6 samples, 0.08%)</title><rect x="288.3" y="723.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (6 samples, 0.08%)</title><rect x="288.3" y="707.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.05%)</title><rect x="288.6" y="691.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.6" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.05%)</title><rect x="288.6" y="675.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="291.6" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.05%)</title><rect x="288.6" y="659.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="291.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (43 samples, 0.56%)</title><rect x="289.4" y="739.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (41 samples, 0.54%)</title><rect x="289.7" y="723.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.7" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (41 samples, 0.54%)</title><rect x="289.7" y="707.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.7" y="718.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (22 samples, 0.29%)</title><rect x="289.7" y="691.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.7" y="702.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (21 samples, 0.27%)</title><rect x="289.9" y="675.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.9" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (21 samples, 0.27%)</title><rect x="289.9" y="659.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="292.9" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (21 samples, 0.27%)</title><rect x="289.9" y="643.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.9" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (20 samples, 0.26%)</title><rect x="290.0" y="627.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$87/1727436625.getAsBoolean (20 samples, 0.26%)</title><rect x="290.0" y="611.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (20 samples, 0.26%)</title><rect x="290.0" y="595.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (20 samples, 0.26%)</title><rect x="290.0" y="579.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (7 samples, 0.09%)</title><rect x="290.0" y="563.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (7 samples, 0.09%)</title><rect x="290.0" y="547.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.05%)</title><rect x="290.5" y="531.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.ascend (2 samples, 0.03%)</title><rect x="290.8" y="515.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.8" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (13 samples, 0.17%)</title><rect x="291.1" y="563.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable$$Lambda$78/2011843539.apply (12 samples, 0.16%)</title><rect x="291.3" y="547.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.lambda$iterator$0 (12 samples, 0.16%)</title><rect x="291.3" y="531.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.3" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.&lt;init&gt; (9 samples, 0.12%)</title><rect x="291.7" y="515.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.7" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Value.&lt;init&gt; (6 samples, 0.08%)</title><rect x="292.2" y="499.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Time.currentTime (6 samples, 0.08%)</title><rect x="292.2" y="483.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.2" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="292.3" y="467.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="295.3" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="292.3" y="451.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="295.3" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="292.6" y="467.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="295.6" y="478.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="292.6" y="451.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="295.6" y="462.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="292.8" y="435.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="295.8" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (19 samples, 0.25%)</title><rect x="293.1" y="691.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (19 samples, 0.25%)</title><rect x="293.1" y="675.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.1" y="686.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (16 samples, 0.21%)</title><rect x="293.6" y="659.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (4 samples, 0.05%)</title><rect x="293.6" y="643.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.6" y="654.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (4 samples, 0.05%)</title><rect x="293.6" y="627.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (4 samples, 0.05%)</title><rect x="293.6" y="611.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="296.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (4 samples, 0.05%)</title><rect x="293.6" y="595.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.init (2 samples, 0.03%)</title><rect x="293.6" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.6" y="590.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.initPartialTraversalState (2 samples, 0.03%)</title><rect x="293.9" y="579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.9" y="590.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (12 samples, 0.16%)</title><rect x="294.2" y="643.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.2" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (12 samples, 0.16%)</title><rect x="294.2" y="627.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.2" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (5 samples, 0.07%)</title><rect x="294.7" y="611.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.7" y="622.0"></text>
</g>
<g>
<title>java/util/AbstractMap$SimpleImmutableEntry.&lt;init&gt; (4 samples, 0.05%)</title><rect x="295.4" y="611.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.4" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.iterator (293 samples, 3.84%)</title><rect x="296.0" y="739.0" width="45.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.0" y="750.0">ru/m..</text>
</g>
<g>
<title>java/util/Collection.stream (267 samples, 3.49%)</title><rect x="296.7" y="723.0" width="41.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="299.7" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.spliterator (263 samples, 3.44%)</title><rect x="296.7" y="707.0" width="40.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="299.7" y="718.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="296.8" y="691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="299.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.&lt;init&gt; (260 samples, 3.40%)</title><rect x="297.1" y="691.0" width="40.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.1" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (258 samples, 3.38%)</title><rect x="297.4" y="675.0" width="39.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="300.4" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.hiNode (3 samples, 0.04%)</title><rect x="306.4" y="659.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="309.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (13 samples, 0.17%)</title><rect x="306.9" y="659.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (13 samples, 0.17%)</title><rect x="306.9" y="643.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="309.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (12 samples, 0.16%)</title><rect x="307.0" y="627.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="310.0" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="307.0" y="611.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.0" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.04%)</title><rect x="307.0" y="595.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.0" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.compare (9 samples, 0.12%)</title><rect x="307.5" y="611.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="310.5" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.12%)</title><rect x="307.5" y="595.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="310.5" y="606.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (5 samples, 0.07%)</title><rect x="307.5" y="579.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (5 samples, 0.07%)</title><rect x="307.5" y="563.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.5" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper$$Lambda$125/1502381804.apply (4 samples, 0.05%)</title><rect x="308.2" y="579.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.2" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.getStatus (4 samples, 0.05%)</title><rect x="308.2" y="563.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="311.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (184 samples, 2.41%)</title><rect x="308.9" y="659.0" width="28.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.9" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findNear (128 samples, 1.68%)</title><rect x="317.5" y="643.0" width="19.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="320.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.03%)</title><rect x="318.3" y="627.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (16 samples, 0.21%)</title><rect x="318.6" y="627.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.6" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.12%)</title><rect x="319.2" y="611.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="322.2" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.12%)</title><rect x="319.2" y="595.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="322.2" y="606.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.05%)</title><rect x="319.7" y="579.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.7" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="320.0" y="563.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="323.0" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="320.3" y="579.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.3" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.compare (3 samples, 0.04%)</title><rect x="320.6" y="611.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.6" y="622.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.04%)</title><rect x="320.6" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.6" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper$$Lambda$125/1502381804.apply (2 samples, 0.03%)</title><rect x="320.8" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (105 samples, 1.37%)</title><rect x="321.1" y="627.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (82 samples, 1.07%)</title><rect x="324.6" y="611.0" width="12.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="327.6" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (72 samples, 0.94%)</title><rect x="325.5" y="595.0" width="11.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.5" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (72 samples, 0.94%)</title><rect x="325.5" y="579.0" width="11.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.5" y="590.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (7 samples, 0.09%)</title><rect x="326.8" y="563.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.8" y="574.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (36 samples, 0.47%)</title><rect x="327.9" y="563.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.9" y="574.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (14 samples, 0.18%)</title><rect x="331.3" y="547.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="334.3" y="558.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 0.07%)</title><rect x="332.3" y="531.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="335.3" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (2 samples, 0.03%)</title><rect x="333.1" y="531.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.1" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (21 samples, 0.27%)</title><rect x="333.4" y="563.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.4" y="574.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (15 samples, 0.20%)</title><rect x="333.9" y="547.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="336.9" y="558.0"></text>
</g>
<g>
<title>vectorizedMismatch (13 samples, 0.17%)</title><rect x="334.2" y="531.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="337.2" y="542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (3 samples, 0.04%)</title><rect x="336.2" y="547.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.2" y="558.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.compare (4 samples, 0.05%)</title><rect x="336.7" y="595.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="339.7" y="606.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.05%)</title><rect x="336.7" y="579.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="339.7" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.05%)</title><rect x="336.7" y="563.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="339.7" y="574.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (4 samples, 0.05%)</title><rect x="337.3" y="707.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="337.4" y="691.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="340.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (7 samples, 0.09%)</title><rect x="337.9" y="723.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="340.9" y="734.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.04%)</title><rect x="338.5" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="341.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (6 samples, 0.08%)</title><rect x="339.0" y="723.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (4 samples, 0.05%)</title><rect x="339.0" y="707.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="342.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.03%)</title><rect x="339.6" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.03%)</title><rect x="339.6" y="691.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.iterator (2 samples, 0.03%)</title><rect x="339.9" y="723.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="342.9" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.spliterator (2 samples, 0.03%)</title><rect x="339.9" y="707.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="342.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.map (7 samples, 0.09%)</title><rect x="340.2" y="723.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="340.2" y="707.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="343.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="340.2" y="691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="343.2" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="340.2" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="343.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.&lt;init&gt; (5 samples, 0.07%)</title><rect x="340.5" y="707.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (5 samples, 0.07%)</title><rect x="340.5" y="691.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="343.5" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (5 samples, 0.07%)</title><rect x="340.5" y="675.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.5" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (5 samples, 0.07%)</title><rect x="340.5" y="659.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.mergeResponses (47 samples, 0.62%)</title><rect x="341.5" y="803.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.5" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (21 samples, 0.27%)</title><rect x="341.8" y="787.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper$$Lambda$127/2021558490.accept (21 samples, 0.27%)</title><rect x="341.8" y="771.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.lambda$mergeResponses$0 (21 samples, 0.27%)</title><rect x="341.8" y="755.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="344.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.get (2 samples, 0.03%)</title><rect x="341.8" y="739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doGet (2 samples, 0.03%)</title><rect x="341.8" y="723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (19 samples, 0.25%)</title><rect x="342.1" y="739.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="345.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (19 samples, 0.25%)</title><rect x="342.1" y="723.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="345.1" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.03%)</title><rect x="343.1" y="707.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="346.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="343.1" y="691.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="346.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.12%)</title><rect x="343.6" y="707.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.6" y="718.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$81/1847947043.compare (8 samples, 0.10%)</title><rect x="343.8" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.8" y="702.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (5 samples, 0.07%)</title><rect x="344.2" y="675.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.2" y="686.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (2 samples, 0.03%)</title><rect x="344.4" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="347.4" y="670.0"></text>
</g>
<g>
<title>java/lang/String.compareTo (2 samples, 0.03%)</title><rect x="344.4" y="643.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.4" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper$$Lambda$125/1502381804.apply (2 samples, 0.03%)</title><rect x="344.7" y="659.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.7" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.getStatus (2 samples, 0.03%)</title><rect x="344.7" y="643.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="347.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (3 samples, 0.04%)</title><rect x="345.2" y="787.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntryIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="345.2" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Iter.&lt;init&gt; (3 samples, 0.04%)</title><rect x="345.2" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Iter.advance (2 samples, 0.03%)</title><rect x="345.2" y="739.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.2" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.getTimestamp (20 samples, 0.26%)</title><rect x="345.6" y="787.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="348.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (8 samples, 0.10%)</title><rect x="345.6" y="771.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="348.6" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.parseLong (8 samples, 0.10%)</title><rect x="345.6" y="755.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.08%)</title><rect x="345.9" y="739.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="346.4" y="723.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="349.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (12 samples, 0.16%)</title><rect x="346.9" y="771.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.10%)</title><rect x="347.2" y="755.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="350.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.09%)</title><rect x="347.3" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="350.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="348.4" y="755.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="348.4" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="351.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.sendLoggedResponse (1,604 samples, 20.99%)</title><rect x="348.7" y="803.0" width="247.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="351.7" y="814.0">ru/mail/polis/service/kate/moreva..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,604 samples, 20.99%)</title><rect x="348.7" y="787.0" width="247.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="351.7" y="798.0">one/nio/http/HttpSession.sendResp..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.10%)</title><rect x="350.9" y="771.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.10%)</title><rect x="350.9" y="755.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.10%)</title><rect x="350.9" y="739.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="351.8" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,573 samples, 20.59%)</title><rect x="352.1" y="771.0" width="243.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.1" y="782.0">one/nio/http/HttpSession.writeRe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (48 samples, 0.63%)</title><rect x="352.1" y="755.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="355.1" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.09%)</title><rect x="353.7" y="739.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="356.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (30 samples, 0.39%)</title><rect x="354.9" y="739.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.03%)</title><rect x="355.0" y="723.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (16 samples, 0.21%)</title><rect x="355.4" y="723.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.08%)</title><rect x="356.7" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.7" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 0.05%)</title><rect x="356.7" y="691.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.7" y="702.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (2 samples, 0.03%)</title><rect x="357.4" y="691.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="360.4" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.14%)</title><rect x="357.8" y="723.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.14%)</title><rect x="357.8" y="707.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="360.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.14%)</title><rect x="357.8" y="691.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="360.8" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,525 samples, 19.96%)</title><rect x="359.5" y="755.0" width="235.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="362.5" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,525 samples, 19.96%)</title><rect x="359.5" y="739.0" width="235.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.5" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>[unknown] (3 samples, 0.04%)</title><rect x="359.7" y="723.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="362.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="359.7" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="362.7" y="718.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.09%)</title><rect x="360.1" y="723.0" width="1.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="363.1" y="734.0"></text>
</g>
<g>
<title>gettimeofday@plt (2 samples, 0.03%)</title><rect x="361.2" y="723.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="364.2" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,505 samples, 19.70%)</title><rect x="361.5" y="723.0" width="232.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.5" y="734.0">one/nio/net/Session$ArrayQueueI..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,503 samples, 19.67%)</title><rect x="361.8" y="707.0" width="232.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="364.8" y="718.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (28 samples, 0.37%)</title><rect x="364.3" y="691.0" width="4.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="367.3" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="366.2" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="369.2" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (4 samples, 0.05%)</title><rect x="366.5" y="675.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="369.5" y="686.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (4 samples, 0.05%)</title><rect x="367.1" y="675.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="370.1" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.04%)</title><rect x="367.7" y="675.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="370.7" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.04%)</title><rect x="368.2" y="675.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="371.2" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.07%)</title><rect x="368.8" y="691.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="371.8" y="702.0"></text>
</g>
<g>
<title>send (1,452 samples, 19.01%)</title><rect x="369.6" y="691.0" width="224.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="372.6" y="702.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,400 samples, 18.32%)</title><rect x="377.6" y="675.0" width="216.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="380.6" y="686.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (1,399 samples, 18.31%)</title><rect x="377.6" y="659.0" width="216.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="380.6" y="670.0">do_syscall_64</text>
</g>
<g>
<title>sys_sendto (1,374 samples, 17.98%)</title><rect x="381.5" y="643.0" width="212.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="384.5" y="654.0">sys_sendto</text>
</g>
<g>
<title>SYSC_sendto (1,365 samples, 17.87%)</title><rect x="381.5" y="627.0" width="210.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="384.5" y="638.0">SYSC_sendto</text>
</g>
<g>
<title>__fdget (4 samples, 0.05%)</title><rect x="382.4" y="611.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="385.4" y="622.0"></text>
</g>
<g>
<title>sock_sendmsg (1,322 samples, 17.30%)</title><rect x="383.3" y="611.0" width="204.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="386.3" y="622.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.03%)</title><rect x="383.5" y="595.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="386.5" y="606.0"></text>
</g>
<g>
<title>inet_sendmsg (1,306 samples, 17.09%)</title><rect x="383.8" y="595.0" width="201.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="386.8" y="606.0">inet_sendmsg</text>
</g>
<g>
<title>release_sock (3 samples, 0.04%)</title><rect x="384.2" y="579.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="387.2" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg (1,299 samples, 17.00%)</title><rect x="384.7" y="579.0" width="200.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="387.7" y="590.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.07%)</title><rect x="385.0" y="563.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="388.0" y="574.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.04%)</title><rect x="385.8" y="563.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="388.8" y="574.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.07%)</title><rect x="386.2" y="563.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="389.2" y="574.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (4 samples, 0.05%)</title><rect x="386.4" y="547.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="389.4" y="558.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.04%)</title><rect x="386.5" y="531.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="389.5" y="542.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.04%)</title><rect x="387.2" y="563.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="390.2" y="574.0"></text>
</g>
<g>
<title>tcp_release_cb (6 samples, 0.08%)</title><rect x="387.6" y="563.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="390.6" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,270 samples, 16.62%)</title><rect x="388.6" y="563.0" width="196.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="391.6" y="574.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (7 samples, 0.09%)</title><rect x="391.2" y="547.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="394.2" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.07%)</title><rect x="391.5" y="531.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="394.5" y="542.0"></text>
</g>
<g>
<title>_copy_from_iter_full (10 samples, 0.13%)</title><rect x="392.4" y="547.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="395.4" y="558.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.08%)</title><rect x="392.6" y="531.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="395.6" y="542.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.04%)</title><rect x="393.5" y="531.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="396.5" y="542.0"></text>
</g>
<g>
<title>check_stack_object (3 samples, 0.04%)</title><rect x="394.0" y="547.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="397.0" y="558.0"></text>
</g>
<g>
<title>copyin (3 samples, 0.04%)</title><rect x="394.4" y="547.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="397.4" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (45 samples, 0.59%)</title><rect x="394.9" y="547.0" width="6.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="397.9" y="558.0"></text>
</g>
<g>
<title>__alloc_skb (43 samples, 0.56%)</title><rect x="395.2" y="531.0" width="6.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="398.2" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.43 (23 samples, 0.30%)</title><rect x="395.7" y="515.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="398.7" y="526.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (17 samples, 0.22%)</title><rect x="395.7" y="499.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="398.7" y="510.0"></text>
</g>
<g>
<title>__slab_alloc (9 samples, 0.12%)</title><rect x="396.9" y="483.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="399.9" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (4 samples, 0.05%)</title><rect x="398.4" y="499.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="401.4" y="510.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (13 samples, 0.17%)</title><rect x="399.2" y="515.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="402.2" y="526.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="400.9" y="499.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="403.9" y="510.0"></text>
</g>
<g>
<title>ksize (4 samples, 0.05%)</title><rect x="401.2" y="515.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="404.2" y="526.0"></text>
</g>
<g>
<title>skb_entail (6 samples, 0.08%)</title><rect x="401.8" y="547.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="404.8" y="558.0"></text>
</g>
<g>
<title>tcp_push (1,142 samples, 14.95%)</title><rect x="402.9" y="547.0" width="176.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="405.9" y="558.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,137 samples, 14.88%)</title><rect x="403.5" y="531.0" width="175.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="406.5" y="542.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 0.04%)</title><rect x="403.5" y="515.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="406.5" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.04%)</title><rect x="404.2" y="515.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="407.2" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="404.6" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="407.6" y="526.0"></text>
</g>
<g>
<title>tcp_write_xmit (1,126 samples, 14.74%)</title><rect x="405.2" y="515.0" width="173.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="408.2" y="526.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (1,073 samples, 14.04%)</title><rect x="407.4" y="499.0" width="165.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="410.4" y="510.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="410.3" y="483.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="413.3" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (1,036 samples, 13.56%)</title><rect x="411.0" y="483.0" width="160.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="414.0" y="494.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="411.7" y="467.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="414.7" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (6 samples, 0.08%)</title><rect x="412.0" y="467.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="415.0" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="412.5" y="451.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="415.5" y="462.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rdx (3 samples, 0.04%)</title><rect x="413.0" y="467.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="416.0" y="478.0"></text>
</g>
<g>
<title>ip_local_out (1,018 samples, 13.32%)</title><rect x="413.4" y="467.0" width="157.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="416.4" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (231 samples, 3.02%)</title><rect x="413.6" y="451.0" width="35.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="416.6" y="462.0">__i..</text>
</g>
<g>
<title>ip_send_check (2 samples, 0.03%)</title><rect x="414.2" y="435.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="417.2" y="446.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (4 samples, 0.05%)</title><rect x="414.5" y="435.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="417.5" y="446.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (4 samples, 0.05%)</title><rect x="415.1" y="435.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="418.1" y="446.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn?[iptable_nat] (7 samples, 0.09%)</title><rect x="415.7" y="435.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="418.7" y="446.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (8 samples, 0.10%)</title><rect x="416.8" y="435.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="419.8" y="446.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack_ipv4] (5 samples, 0.07%)</title><rect x="418.1" y="435.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="421.1" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (197 samples, 2.58%)</title><rect x="418.8" y="435.0" width="30.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="421.8" y="446.0">nf..</text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (4 samples, 0.05%)</title><rect x="419.1" y="419.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="422.1" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (27 samples, 0.35%)</title><rect x="419.8" y="419.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="422.8" y="430.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (23 samples, 0.30%)</title><rect x="420.4" y="403.0" width="3.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="423.4" y="414.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (21 samples, 0.27%)</title><rect x="423.9" y="419.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="426.9" y="430.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (20 samples, 0.26%)</title><rect x="424.1" y="403.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="427.1" y="414.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn?[iptable_nat] (11 samples, 0.14%)</title><rect x="427.2" y="419.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="430.2" y="430.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (3 samples, 0.04%)</title><rect x="427.3" y="403.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="430.3" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat_ipv4] (7 samples, 0.09%)</title><rect x="427.8" y="403.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="430.8" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (5 samples, 0.07%)</title><rect x="427.9" y="387.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="430.9" y="398.0"></text>
</g>
<g>
<title>nf_nat_packet?[nf_nat] (3 samples, 0.04%)</title><rect x="428.3" y="371.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="431.3" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack_ipv4] (126 samples, 1.65%)</title><rect x="428.9" y="419.0" width="19.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="431.9" y="430.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (3 samples, 0.04%)</title><rect x="428.9" y="403.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="431.9" y="414.0"></text>
</g>
<g>
<title>ipv4_get_l4proto?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="429.5" y="403.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="432.5" y="414.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (102 samples, 1.34%)</title><rect x="429.8" y="403.0" width="15.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="432.8" y="414.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (8 samples, 0.10%)</title><rect x="433.3" y="387.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="436.3" y="398.0"></text>
</g>
<g>
<title>__nf_ct_l4proto_find?[nf_conntrack] (7 samples, 0.09%)</title><rect x="434.6" y="387.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="437.6" y="398.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="435.8" y="387.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="438.8" y="398.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (8 samples, 0.10%)</title><rect x="436.1" y="387.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="439.1" y="398.0"></text>
</g>
<g>
<title>ipv4_get_l4proto?[nf_conntrack_ipv4] (3 samples, 0.04%)</title><rect x="437.4" y="387.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="440.4" y="398.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (2 samples, 0.03%)</title><rect x="438.0" y="387.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="441.0" y="398.0"></text>
</g>
<g>
<title>tcp_error?[nf_conntrack] (6 samples, 0.08%)</title><rect x="438.3" y="387.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="441.3" y="398.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (36 samples, 0.47%)</title><rect x="439.4" y="387.0" width="5.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="442.4" y="398.0"></text>
</g>
<g>
<title>__nf_ct_refresh_acct?[nf_conntrack] (2 samples, 0.03%)</title><rect x="442.0" y="371.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="445.0" y="382.0"></text>
</g>
<g>
<title>nf_ct_seq_offset?[nf_conntrack] (5 samples, 0.07%)</title><rect x="442.3" y="371.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="445.3" y="382.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (12 samples, 0.16%)</title><rect x="443.1" y="371.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="446.1" y="382.0"></text>
</g>
<g>
<title>tcp_pkt_to_tuple?[nf_conntrack] (4 samples, 0.05%)</title><rect x="444.9" y="387.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="447.9" y="398.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (4 samples, 0.05%)</title><rect x="445.5" y="403.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="448.5" y="414.0"></text>
</g>
<g>
<title>tcp_error?[nf_conntrack] (8 samples, 0.10%)</title><rect x="446.2" y="403.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="449.2" y="414.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (5 samples, 0.07%)</title><rect x="447.6" y="403.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="450.6" y="414.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (5 samples, 0.07%)</title><rect x="448.3" y="419.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="451.3" y="430.0"></text>
</g>
<g>
<title>ip_finish_output (3 samples, 0.04%)</title><rect x="449.3" y="451.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="452.3" y="462.0"></text>
</g>
<g>
<title>ip_output (772 samples, 10.10%)</title><rect x="449.7" y="451.0" width="119.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="452.7" y="462.0">ip_output</text>
</g>
<g>
<title>__indirect_thunk_start (2 samples, 0.03%)</title><rect x="449.9" y="435.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="452.9" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (741 samples, 9.70%)</title><rect x="450.3" y="435.0" width="114.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="453.3" y="446.0">ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (734 samples, 9.61%)</title><rect x="451.1" y="419.0" width="113.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="454.1" y="430.0">ip_finish_outp..</text>
</g>
<g>
<title>__local_bh_enable_ip (624 samples, 8.17%)</title><rect x="456.4" y="403.0" width="96.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="459.4" y="414.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.17 (623 samples, 8.15%)</title><rect x="456.5" y="387.0" width="96.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="459.5" y="398.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (618 samples, 8.09%)</title><rect x="457.3" y="371.0" width="95.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="460.3" y="382.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (612 samples, 8.01%)</title><rect x="457.3" y="355.0" width="94.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="460.3" y="366.0">__softirqen..</text>
</g>
<g>
<title>__kfree_skb_flush (4 samples, 0.05%)</title><rect x="461.0" y="339.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="464.0" y="350.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.03%)</title><rect x="461.6" y="339.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="464.6" y="350.0"></text>
</g>
<g>
<title>net_rx_action (574 samples, 7.51%)</title><rect x="461.9" y="339.0" width="88.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="464.9" y="350.0">net_rx_act..</text>
</g>
<g>
<title>process_backlog (558 samples, 7.30%)</title><rect x="464.4" y="323.0" width="86.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="467.4" y="334.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (554 samples, 7.25%)</title><rect x="464.9" y="307.0" width="85.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="467.9" y="318.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (553 samples, 7.24%)</title><rect x="464.9" y="291.0" width="85.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="467.9" y="302.0">__netif_re..</text>
</g>
<g>
<title>ip_rcv (524 samples, 6.86%)</title><rect x="467.9" y="275.0" width="81.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="470.9" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (4 samples, 0.05%)</title><rect x="469.2" y="259.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="472.2" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (492 samples, 6.44%)</title><rect x="469.8" y="259.0" width="76.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="472.8" y="270.0">ip_rcv_f..</text>
</g>
<g>
<title>ip_local_deliver (489 samples, 6.40%)</title><rect x="470.0" y="243.0" width="75.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="473.0" y="254.0">ip_local..</text>
</g>
<g>
<title>ip_local_deliver_finish (453 samples, 5.93%)</title><rect x="470.4" y="227.0" width="70.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="473.4" y="238.0">ip_loca..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="471.0" y="211.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="474.0" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (446 samples, 5.84%)</title><rect x="471.5" y="211.0" width="68.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="474.5" y="222.0">tcp_v4_..</text>
</g>
<g>
<title>__inet_lookup_established (24 samples, 0.31%)</title><rect x="473.2" y="195.0" width="3.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="476.2" y="206.0"></text>
</g>
<g>
<title>inet_ehashfn (4 samples, 0.05%)</title><rect x="476.3" y="179.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="479.3" y="190.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="477.1" y="195.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="480.1" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (6 samples, 0.08%)</title><rect x="477.4" y="195.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="480.4" y="206.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="477.4" y="179.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="480.4" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (4 samples, 0.05%)</title><rect x="477.7" y="179.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="480.7" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.04%)</title><rect x="478.4" y="195.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="481.4" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (396 samples, 5.18%)</title><rect x="478.9" y="195.0" width="61.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="481.9" y="206.0">tcp_v4..</text>
</g>
<g>
<title>ipv4_dst_check (4 samples, 0.05%)</title><rect x="479.1" y="179.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="482.1" y="190.0"></text>
</g>
<g>
<title>tcp_check_space (13 samples, 0.17%)</title><rect x="479.7" y="179.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="482.7" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (377 samples, 4.93%)</title><rect x="481.8" y="179.0" width="58.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="484.8" y="190.0">tcp_rc..</text>
</g>
<g>
<title>__tcp_ack_snd_check (18 samples, 0.24%)</title><rect x="484.0" y="163.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="487.0" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (16 samples, 0.21%)</title><rect x="484.3" y="147.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="487.3" y="158.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="484.5" y="131.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="487.5" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (13 samples, 0.17%)</title><rect x="484.8" y="131.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="487.8" y="142.0"></text>
</g>
<g>
<title>mod_timer (12 samples, 0.16%)</title><rect x="484.9" y="115.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="487.9" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (11 samples, 0.14%)</title><rect x="485.1" y="99.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="488.1" y="110.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.04%)</title><rect x="486.8" y="163.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="489.8" y="174.0"></text>
</g>
<g>
<title>ktime_get_real_seconds (3 samples, 0.04%)</title><rect x="487.3" y="163.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="490.3" y="174.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.03%)</title><rect x="487.7" y="163.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="490.7" y="174.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.03%)</title><rect x="487.7" y="147.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="490.7" y="158.0"></text>
</g>
<g>
<title>native_sched_clock (2 samples, 0.03%)</title><rect x="487.7" y="131.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="490.7" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.04%)</title><rect x="488.2" y="163.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="491.2" y="174.0"></text>
</g>
<g>
<title>tcp_ack (119 samples, 1.56%)</title><rect x="488.6" y="163.0" width="18.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="491.6" y="174.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (4 samples, 0.05%)</title><rect x="493.3" y="147.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="496.3" y="158.0"></text>
</g>
<g>
<title>rb_first (3 samples, 0.04%)</title><rect x="493.9" y="147.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="496.9" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (77 samples, 1.01%)</title><rect x="494.5" y="147.0" width="11.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="497.5" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (39 samples, 0.51%)</title><rect x="497.0" y="131.0" width="6.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="500.0" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (10 samples, 0.13%)</title><rect x="497.0" y="115.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="500.0" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (8 samples, 0.10%)</title><rect x="497.3" y="99.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="500.3" y="110.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.04%)</title><rect x="498.1" y="83.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="501.1" y="94.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.33 (2 samples, 0.03%)</title><rect x="498.2" y="67.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="501.2" y="78.0"></text>
</g>
<g>
<title>skb_release_all (26 samples, 0.34%)</title><rect x="498.5" y="115.0" width="4.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="501.5" y="126.0"></text>
</g>
<g>
<title>skb_free_head (4 samples, 0.05%)</title><rect x="498.7" y="99.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="501.7" y="110.0"></text>
</g>
<g>
<title>skb_release_data (20 samples, 0.26%)</title><rect x="499.3" y="99.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="502.3" y="110.0"></text>
</g>
<g>
<title>skb_free_head (13 samples, 0.17%)</title><rect x="500.4" y="83.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="503.4" y="94.0"></text>
</g>
<g>
<title>kfree (12 samples, 0.16%)</title><rect x="500.5" y="67.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="503.5" y="78.0"></text>
</g>
<g>
<title>__slab_free (6 samples, 0.08%)</title><rect x="501.5" y="51.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="504.5" y="62.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.33 (5 samples, 0.07%)</title><rect x="501.6" y="35.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="504.6" y="46.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.03%)</title><rect x="502.5" y="115.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="505.5" y="126.0"></text>
</g>
<g>
<title>bictcp_acked (5 samples, 0.07%)</title><rect x="503.2" y="131.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="506.2" y="142.0"></text>
</g>
<g>
<title>rb_erase (3 samples, 0.04%)</title><rect x="504.1" y="131.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="507.1" y="142.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (7 samples, 0.09%)</title><rect x="504.5" y="131.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="507.5" y="142.0"></text>
</g>
<g>
<title>minmax_running_min (2 samples, 0.03%)</title><rect x="505.2" y="115.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="508.2" y="126.0"></text>
</g>
<g>
<title>tcp_rack_advance (3 samples, 0.04%)</title><rect x="505.6" y="131.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="508.6" y="142.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.03%)</title><rect x="506.1" y="131.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="509.1" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.03%)</title><rect x="506.7" y="147.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="509.7" y="158.0"></text>
</g>
<g>
<title>tcp_data_queue (206 samples, 2.70%)</title><rect x="507.2" y="163.0" width="31.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="510.2" y="174.0">tc..</text>
</g>
<g>
<title>dst_release (2 samples, 0.03%)</title><rect x="509.0" y="147.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="512.0" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (181 samples, 2.37%)</title><rect x="509.3" y="147.0" width="28.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="512.3" y="158.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (173 samples, 2.26%)</title><rect x="510.6" y="131.0" width="26.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="513.6" y="142.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (172 samples, 2.25%)</title><rect x="510.6" y="115.0" width="26.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="513.6" y="126.0">_..</text>
</g>
<g>
<title>__lock_text_start (171 samples, 2.24%)</title><rect x="510.6" y="99.0" width="26.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="513.6" y="110.0">_..</text>
</g>
<g>
<title>tcp_event_data_recv (6 samples, 0.08%)</title><rect x="537.3" y="147.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="540.3" y="158.0"></text>
</g>
<g>
<title>tcp_queue_rcv (5 samples, 0.07%)</title><rect x="538.2" y="147.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="541.2" y="158.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.03%)</title><rect x="539.1" y="163.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="542.1" y="174.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.03%)</title><rect x="539.5" y="163.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="542.5" y="174.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="540.1" y="195.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="543.1" y="206.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_fn?[iptable_nat] (2 samples, 0.03%)</title><rect x="540.5" y="227.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="543.5" y="238.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="540.8" y="227.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="543.8" y="238.0"></text>
</g>
<g>
<title>ipv4_helper?[nf_conntrack_ipv4] (5 samples, 0.07%)</title><rect x="541.2" y="227.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="544.2" y="238.0"></text>
</g>
<g>
<title>nf_hook_slow (20 samples, 0.26%)</title><rect x="541.9" y="227.0" width="3.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="544.9" y="238.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (11 samples, 0.14%)</title><rect x="541.9" y="211.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="544.9" y="222.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (10 samples, 0.13%)</title><rect x="542.1" y="195.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="545.1" y="206.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (3 samples, 0.04%)</title><rect x="543.6" y="211.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="546.6" y="222.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (2 samples, 0.03%)</title><rect x="543.8" y="195.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="546.8" y="206.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_fn?[iptable_nat] (2 samples, 0.03%)</title><rect x="544.1" y="211.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="547.1" y="222.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (2 samples, 0.03%)</title><rect x="544.1" y="195.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="547.1" y="206.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (3 samples, 0.04%)</title><rect x="544.4" y="211.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="547.4" y="222.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (3 samples, 0.04%)</title><rect x="544.4" y="195.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="547.4" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (2 samples, 0.03%)</title><rect x="545.2" y="227.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="548.2" y="238.0"></text>
</g>
<g>
<title>ip_sabotage_in?[br_netfilter] (6 samples, 0.08%)</title><rect x="545.8" y="259.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="548.8" y="270.0"></text>
</g>
<g>
<title>nf_hook_slow (13 samples, 0.17%)</title><rect x="546.9" y="259.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="549.9" y="270.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (6 samples, 0.08%)</title><rect x="547.0" y="243.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="550.0" y="254.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (6 samples, 0.08%)</title><rect x="547.0" y="227.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="550.0" y="238.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="548.0" y="243.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="551.0" y="254.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (2 samples, 0.03%)</title><rect x="548.0" y="227.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="551.0" y="238.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 0.04%)</title><rect x="548.3" y="243.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="551.3" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (3 samples, 0.04%)</title><rect x="548.9" y="275.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="551.9" y="286.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.08%)</title><rect x="549.3" y="275.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="552.3" y="286.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.03%)</title><rect x="550.6" y="339.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="553.6" y="350.0"></text>
</g>
<g>
<title>rcu_bh_qs (6 samples, 0.08%)</title><rect x="550.9" y="339.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="553.9" y="350.0"></text>
</g>
<g>
<title>rcu_bh_qs (6 samples, 0.08%)</title><rect x="551.8" y="355.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="554.8" y="366.0"></text>
</g>
<g>
<title>dev_queue_xmit (75 samples, 0.98%)</title><rect x="552.7" y="403.0" width="11.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="555.7" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (75 samples, 0.98%)</title><rect x="552.7" y="387.0" width="11.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="555.7" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (34 samples, 0.45%)</title><rect x="555.5" y="371.0" width="5.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="558.5" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="556.3" y="355.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="559.3" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (21 samples, 0.27%)</title><rect x="556.6" y="355.0" width="3.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="559.6" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.04%)</title><rect x="557.2" y="339.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="560.2" y="350.0"></text>
</g>
<g>
<title>netif_rx (8 samples, 0.10%)</title><rect x="557.7" y="339.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="560.7" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.03%)</title><rect x="557.7" y="323.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="560.7" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.08%)</title><rect x="558.0" y="323.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="561.0" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (6 samples, 0.08%)</title><rect x="558.0" y="307.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="561.0" y="318.0"></text>
</g>
<g>
<title>sk_free (4 samples, 0.05%)</title><rect x="559.1" y="339.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="562.1" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (6 samples, 0.08%)</title><rect x="559.8" y="355.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="562.8" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (7 samples, 0.09%)</title><rect x="560.8" y="371.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="563.8" y="382.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.03%)</title><rect x="562.0" y="371.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="565.0" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (12 samples, 0.16%)</title><rect x="562.5" y="371.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="565.5" y="382.0"></text>
</g>
<g>
<title>netif_skb_features (6 samples, 0.08%)</title><rect x="562.9" y="355.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="565.9" y="366.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (3 samples, 0.04%)</title><rect x="563.9" y="355.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="566.9" y="366.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="564.5" y="419.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="567.5" y="430.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="565.1" y="435.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="568.1" y="446.0"></text>
</g>
<g>
<title>ipv4_helper?[nf_conntrack_ipv4] (3 samples, 0.04%)</title><rect x="565.4" y="435.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="568.4" y="446.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="565.9" y="435.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="568.9" y="446.0"></text>
</g>
<g>
<title>nf_hook_slow (18 samples, 0.24%)</title><rect x="566.2" y="435.0" width="2.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="569.2" y="446.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (6 samples, 0.08%)</title><rect x="566.2" y="419.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="569.2" y="430.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (4 samples, 0.05%)</title><rect x="566.5" y="403.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="569.5" y="414.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_out?[iptable_nat] (2 samples, 0.03%)</title><rect x="567.1" y="419.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="570.1" y="430.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (4 samples, 0.05%)</title><rect x="567.4" y="419.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="570.4" y="430.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (2 samples, 0.03%)</title><rect x="567.7" y="403.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="570.7" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out?[nf_nat_ipv4] (5 samples, 0.07%)</title><rect x="568.2" y="419.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="571.2" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (10 samples, 0.13%)</title><rect x="569.1" y="451.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="572.1" y="462.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.03%)</title><rect x="570.7" y="467.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="573.7" y="478.0"></text>
</g>
<g>
<title>skb_clone (11 samples, 0.14%)</title><rect x="571.0" y="483.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="574.0" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="571.0" y="467.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="574.0" y="478.0"></text>
</g>
<g>
<title>__skb_clone (9 samples, 0.12%)</title><rect x="571.3" y="467.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="574.3" y="478.0"></text>
</g>
<g>
<title>__copy_skb_header (4 samples, 0.05%)</title><rect x="572.0" y="451.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="575.0" y="462.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.03%)</title><rect x="572.7" y="483.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="575.7" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.05%)</title><rect x="573.3" y="499.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="576.3" y="510.0"></text>
</g>
<g>
<title>sched_clock_cpu (4 samples, 0.05%)</title><rect x="574.1" y="499.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="577.1" y="510.0"></text>
</g>
<g>
<title>sched_clock (4 samples, 0.05%)</title><rect x="574.1" y="483.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="577.1" y="494.0"></text>
</g>
<g>
<title>native_sched_clock (4 samples, 0.05%)</title><rect x="574.1" y="467.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="577.1" y="478.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (13 samples, 0.17%)</title><rect x="575.1" y="499.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="578.1" y="510.0"></text>
</g>
<g>
<title>tcp_rearm_rto (8 samples, 0.10%)</title><rect x="575.9" y="483.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="578.9" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (8 samples, 0.10%)</title><rect x="575.9" y="467.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="578.9" y="478.0"></text>
</g>
<g>
<title>sk_reset_timer (8 samples, 0.10%)</title><rect x="575.9" y="451.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="578.9" y="462.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.08%)</title><rect x="576.2" y="435.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="579.2" y="446.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.07%)</title><rect x="576.4" y="419.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="579.4" y="430.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.03%)</title><rect x="577.3" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="580.3" y="510.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.05%)</title><rect x="577.9" y="499.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="580.9" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="578.2" y="483.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="581.2" y="494.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="578.2" y="467.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="581.2" y="478.0"></text>
</g>
<g>
<title>tcp_v4_send_check (3 samples, 0.04%)</title><rect x="578.7" y="499.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="581.7" y="510.0"></text>
</g>
<g>
<title>tcp_send_mss (33 samples, 0.43%)</title><rect x="579.3" y="547.0" width="5.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="582.3" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (6 samples, 0.08%)</title><rect x="579.8" y="531.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="582.8" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (24 samples, 0.31%)</title><rect x="580.7" y="531.0" width="3.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="583.7" y="542.0"></text>
</g>
<g>
<title>tcp_established_options (10 samples, 0.13%)</title><rect x="582.4" y="515.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="585.4" y="526.0"></text>
</g>
<g>
<title>tcp_md5_do_lookup (2 samples, 0.03%)</title><rect x="583.5" y="499.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="586.5" y="510.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (3 samples, 0.04%)</title><rect x="583.9" y="515.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="586.9" y="526.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.04%)</title><rect x="584.7" y="563.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="587.7" y="574.0"></text>
</g>
<g>
<title>security_socket_sendmsg (12 samples, 0.16%)</title><rect x="585.5" y="595.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="588.5" y="606.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (8 samples, 0.10%)</title><rect x="586.1" y="579.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="589.1" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (8 samples, 0.10%)</title><rect x="586.1" y="563.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="589.1" y="574.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.05%)</title><rect x="586.7" y="547.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="589.7" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (31 samples, 0.41%)</title><rect x="587.5" y="611.0" width="4.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="590.5" y="622.0"></text>
</g>
<g>
<title>__fdget (19 samples, 0.25%)</title><rect x="587.6" y="595.0" width="3.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="590.6" y="606.0"></text>
</g>
<g>
<title>__fget_light (19 samples, 0.25%)</title><rect x="587.6" y="579.0" width="3.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="590.6" y="590.0"></text>
</g>
<g>
<title>__fget (19 samples, 0.25%)</title><rect x="587.6" y="563.0" width="3.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="590.6" y="574.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.14%)</title><rect x="590.6" y="595.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="593.6" y="606.0"></text>
</g>
<g>
<title>fput (6 samples, 0.08%)</title><rect x="592.3" y="627.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="595.3" y="638.0"></text>
</g>
<g>
<title>import_single_range (3 samples, 0.04%)</title><rect x="593.2" y="627.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="596.2" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.09%)</title><rect x="594.0" y="723.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="597.0" y="734.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.08%)</title><rect x="594.1" y="707.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="597.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.09%)</title><rect x="595.1" y="771.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="598.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.07%)</title><rect x="595.4" y="755.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="598.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="595.5" y="739.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="598.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="595.5" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="598.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="595.8" y="739.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="598.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.replication (2,099 samples, 27.47%)</title><rect x="596.4" y="803.0" width="324.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="599.4" y="814.0">ru/mail/polis/service/kate/moreva/MySimpleHt..</text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.05%)</title><rect x="596.9" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="599.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.05%)</title><rect x="596.9" y="771.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="599.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7 samples, 0.09%)</title><rect x="597.5" y="787.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="600.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3 samples, 0.04%)</title><rect x="597.5" y="771.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="600.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (3 samples, 0.04%)</title><rect x="597.5" y="755.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="600.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4 samples, 0.05%)</title><rect x="598.0" y="771.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="601.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.&lt;init&gt; (4 samples, 0.05%)</title><rect x="598.0" y="755.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.0" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractSet.&lt;init&gt; (4 samples, 0.05%)</title><rect x="598.0" y="739.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="601.0" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/ModuleTopology.primaryFor (41 samples, 0.54%)</title><rect x="598.8" y="787.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="601.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (2 samples, 0.03%)</title><rect x="599.8" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="602.8" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="599.8" y="755.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="602.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (2 samples, 0.03%)</title><rect x="600.3" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.add (16 samples, 0.21%)</title><rect x="600.6" y="771.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (16 samples, 0.21%)</title><rect x="600.6" y="755.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.04%)</title><rect x="600.8" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.03%)</title><rect x="600.9" y="723.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.16%)</title><rect x="601.2" y="739.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="604.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.03%)</title><rect x="601.2" y="723.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="604.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.08%)</title><rect x="601.5" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="604.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.&lt;init&gt; (2 samples, 0.03%)</title><rect x="602.2" y="707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.03%)</title><rect x="602.5" y="723.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="605.5" y="734.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="602.8" y="723.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="605.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.size (13 samples, 0.17%)</title><rect x="603.1" y="771.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="606.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.proxy (10 samples, 0.13%)</title><rect x="603.6" y="755.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="606.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.proxy (2,043 samples, 26.74%)</title><rect x="605.1" y="787.0" width="315.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="608.1" y="798.0">ru/mail/polis/service/kate/moreva/MySimpleH..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="605.6" y="771.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/689401025.invoke (2 samples, 0.03%)</title><rect x="605.6" y="755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="608.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (2,035 samples, 26.64%)</title><rect x="605.9" y="771.0" width="314.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="608.9" y="782.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (2,034 samples, 26.62%)</title><rect x="606.0" y="755.0" width="314.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.0" y="766.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.08%)</title><rect x="610.5" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="613.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.04%)</title><rect x="611.0" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="614.0" y="734.0"></text>
</g>
<g>
<title>_new_array_Java (3 samples, 0.04%)</title><rect x="611.0" y="707.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="614.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (484 samples, 6.34%)</title><rect x="611.4" y="739.0" width="74.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="614.4" y="750.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (36 samples, 0.47%)</title><rect x="612.8" y="723.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.8" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (33 samples, 0.43%)</title><rect x="613.3" y="707.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="616.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (33 samples, 0.43%)</title><rect x="613.3" y="691.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.3" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (29 samples, 0.38%)</title><rect x="613.4" y="675.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="616.4" y="686.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="613.6" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="616.6" y="670.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (2 samples, 0.03%)</title><rect x="613.6" y="643.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="616.6" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.04%)</title><rect x="614.4" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="617.4" y="670.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="614.8" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="617.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.07%)</title><rect x="615.1" y="659.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="618.1" y="670.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.03%)</title><rect x="615.3" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="618.3" y="654.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (2 samples, 0.03%)</title><rect x="616.1" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="619.1" y="670.0"></text>
</g>
<g>
<title>__memset_avx2 (10 samples, 0.13%)</title><rect x="616.4" y="659.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="619.4" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="617.9" y="675.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="620.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (436 samples, 5.71%)</title><rect x="618.4" y="723.0" width="67.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="621.4" y="734.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (81 samples, 1.06%)</title><rect x="621.0" y="707.0" width="12.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="624.0" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (9 samples, 0.12%)</title><rect x="624.4" y="691.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="627.4" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.05%)</title><rect x="625.8" y="691.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="628.8" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.04%)</title><rect x="626.4" y="691.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="629.4" y="702.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (15 samples, 0.20%)</title><rect x="626.9" y="691.0" width="2.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="629.9" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (25 samples, 0.33%)</title><rect x="629.2" y="691.0" width="3.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="632.2" y="702.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.05%)</title><rect x="630.6" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="633.6" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.07%)</title><rect x="631.2" y="675.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="634.2" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (7 samples, 0.09%)</title><rect x="632.0" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="635.0" y="686.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="633.2" y="691.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="636.2" y="702.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (10 samples, 0.13%)</title><rect x="633.5" y="707.0" width="1.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="636.5" y="718.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.08%)</title><rect x="635.1" y="707.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="638.1" y="718.0"></text>
</g>
<g>
<title>recv (322 samples, 4.21%)</title><rect x="636.0" y="707.0" width="49.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="639.0" y="718.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (249 samples, 3.26%)</title><rect x="647.3" y="691.0" width="38.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="650.3" y="702.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (247 samples, 3.23%)</title><rect x="647.3" y="675.0" width="38.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="650.3" y="686.0">do_..</text>
</g>
<g>
<title>SYSC_recvfrom (2 samples, 0.03%)</title><rect x="649.0" y="659.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="652.0" y="670.0"></text>
</g>
<g>
<title>sys_recvfrom (234 samples, 3.06%)</title><rect x="649.3" y="659.0" width="36.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="652.3" y="670.0">sys..</text>
</g>
<g>
<title>SYSC_recvfrom (231 samples, 3.02%)</title><rect x="649.3" y="643.0" width="35.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="652.3" y="654.0">SYS..</text>
</g>
<g>
<title>inet_recvmsg (2 samples, 0.03%)</title><rect x="650.2" y="627.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="653.2" y="638.0"></text>
</g>
<g>
<title>sock_recvmsg (222 samples, 2.91%)</title><rect x="650.5" y="627.0" width="34.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="653.5" y="638.0">so..</text>
</g>
<g>
<title>inet_recvmsg (213 samples, 2.79%)</title><rect x="650.8" y="611.0" width="32.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="653.8" y="622.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (208 samples, 2.72%)</title><rect x="651.6" y="595.0" width="32.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="654.6" y="606.0">tc..</text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.10%)</title><rect x="655.4" y="579.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="658.4" y="590.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="655.4" y="563.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="658.4" y="574.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.07%)</title><rect x="655.8" y="563.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="658.8" y="574.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.03%)</title><rect x="655.9" y="547.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="658.9" y="558.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.03%)</title><rect x="656.2" y="547.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="659.2" y="558.0"></text>
</g>
<g>
<title>add_wait_queue (3 samples, 0.04%)</title><rect x="656.8" y="579.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="659.8" y="590.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="657.3" y="579.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="660.3" y="590.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.04%)</title><rect x="657.6" y="579.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="660.6" y="590.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.03%)</title><rect x="657.8" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="660.8" y="574.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="658.1" y="579.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="661.1" y="590.0"></text>
</g>
<g>
<title>sk_wait_data (121 samples, 1.58%)</title><rect x="658.4" y="579.0" width="18.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="661.4" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (8 samples, 0.10%)</title><rect x="659.0" y="563.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="662.0" y="574.0"></text>
</g>
<g>
<title>add_wait_queue (7 samples, 0.09%)</title><rect x="660.2" y="563.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="663.2" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.08%)</title><rect x="660.4" y="547.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="663.4" y="558.0"></text>
</g>
<g>
<title>remove_wait_queue (5 samples, 0.07%)</title><rect x="661.5" y="563.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="664.5" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.07%)</title><rect x="661.5" y="547.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="664.5" y="558.0"></text>
</g>
<g>
<title>schedule_timeout (4 samples, 0.05%)</title><rect x="662.2" y="563.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="665.2" y="574.0"></text>
</g>
<g>
<title>wait_woken (92 samples, 1.20%)</title><rect x="662.9" y="563.0" width="14.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="665.9" y="574.0"></text>
</g>
<g>
<title>del_timer_sync (3 samples, 0.04%)</title><rect x="663.9" y="547.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="666.9" y="558.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="664.4" y="547.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="667.4" y="558.0"></text>
</g>
<g>
<title>schedule_timeout (80 samples, 1.05%)</title><rect x="664.7" y="547.0" width="12.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="667.7" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.13%)</title><rect x="665.5" y="531.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="668.5" y="542.0"></text>
</g>
<g>
<title>del_timer_sync (13 samples, 0.17%)</title><rect x="667.0" y="531.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="670.0" y="542.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="667.2" y="515.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="670.2" y="526.0"></text>
</g>
<g>
<title>try_to_del_timer_sync (10 samples, 0.13%)</title><rect x="667.5" y="515.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="670.5" y="526.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.07%)</title><rect x="667.8" y="499.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="670.8" y="510.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="668.7" y="499.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="671.7" y="510.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="669.0" y="531.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="672.0" y="542.0"></text>
</g>
<g>
<title>schedule (49 samples, 0.64%)</title><rect x="669.3" y="531.0" width="7.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="672.3" y="542.0"></text>
</g>
<g>
<title>__schedule (47 samples, 0.62%)</title><rect x="669.7" y="515.0" width="7.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="672.7" y="526.0"></text>
</g>
<g>
<title>finish_task_switch (43 samples, 0.56%)</title><rect x="670.3" y="499.0" width="6.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="673.3" y="510.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (29 samples, 0.38%)</title><rect x="677.1" y="579.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="680.1" y="590.0"></text>
</g>
<g>
<title>__check_object_size (13 samples, 0.17%)</title><rect x="677.2" y="563.0" width="2.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="680.2" y="574.0"></text>
</g>
<g>
<title>__check_heap_object (5 samples, 0.07%)</title><rect x="677.8" y="547.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="680.8" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.05%)</title><rect x="678.6" y="547.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="681.6" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="679.2" y="563.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="682.2" y="574.0"></text>
</g>
<g>
<title>_copy_to_iter (11 samples, 0.14%)</title><rect x="679.5" y="563.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="682.5" y="574.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.08%)</title><rect x="679.9" y="547.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="682.9" y="558.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.04%)</title><rect x="680.8" y="547.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="683.8" y="558.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.03%)</title><rect x="681.2" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="684.2" y="574.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (7 samples, 0.09%)</title><rect x="681.5" y="579.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="684.5" y="590.0"></text>
</g>
<g>
<title>tcp_send_ack (5 samples, 0.07%)</title><rect x="681.9" y="563.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="684.9" y="574.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.38 (5 samples, 0.07%)</title><rect x="681.9" y="547.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="684.9" y="558.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (5 samples, 0.07%)</title><rect x="681.9" y="531.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="684.9" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (5 samples, 0.07%)</title><rect x="681.9" y="515.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="684.9" y="526.0"></text>
</g>
<g>
<title>ip_local_out (5 samples, 0.07%)</title><rect x="681.9" y="499.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="684.9" y="510.0"></text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="681.9" y="483.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="684.9" y="494.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.03%)</title><rect x="681.9" y="467.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="684.9" y="478.0"></text>
</g>
<g>
<title>ip_output (3 samples, 0.04%)</title><rect x="682.2" y="483.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="685.2" y="494.0"></text>
</g>
<g>
<title>ip_finish_output (3 samples, 0.04%)</title><rect x="682.2" y="467.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="685.2" y="478.0"></text>
</g>
<g>
<title>ip_finish_output2 (3 samples, 0.04%)</title><rect x="682.2" y="451.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="685.2" y="462.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.04%)</title><rect x="682.2" y="435.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="685.2" y="446.0"></text>
</g>
<g>
<title>do_softirq.part.17 (3 samples, 0.04%)</title><rect x="682.2" y="419.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="685.2" y="430.0"></text>
</g>
<g>
<title>do_softirq_own_stack (3 samples, 0.04%)</title><rect x="682.2" y="403.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="685.2" y="414.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.04%)</title><rect x="682.2" y="387.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="685.2" y="398.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.04%)</title><rect x="682.2" y="371.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="685.2" y="382.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.04%)</title><rect x="682.2" y="355.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="685.2" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb (3 samples, 0.04%)</title><rect x="682.2" y="339.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="685.2" y="350.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.04%)</title><rect x="682.2" y="323.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="685.2" y="334.0"></text>
</g>
<g>
<title>ip_rcv (3 samples, 0.04%)</title><rect x="682.2" y="307.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="685.2" y="318.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.04%)</title><rect x="682.6" y="579.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="685.6" y="590.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.04%)</title><rect x="683.1" y="579.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="686.1" y="590.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 0.05%)</title><rect x="683.7" y="611.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="686.7" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.04%)</title><rect x="683.9" y="595.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="686.9" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (3 samples, 0.04%)</title><rect x="683.9" y="579.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="686.9" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.04%)</title><rect x="683.9" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="686.9" y="574.0"></text>
</g>
<g>
<title>tcp_recvmsg (3 samples, 0.04%)</title><rect x="684.3" y="611.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="687.3" y="622.0"></text>
</g>
<g>
<title>fput (3 samples, 0.04%)</title><rect x="684.9" y="643.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="687.9" y="654.0"></text>
</g>
<g>
<title>sys_recvfrom (2 samples, 0.03%)</title><rect x="685.4" y="675.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="688.4" y="686.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.03%)</title><rect x="685.7" y="723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (184 samples, 2.41%)</title><rect x="686.2" y="739.0" width="28.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="689.2" y="750.0">on..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="689.7" y="723.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="692.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.04%)</title><rect x="690.0" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="693.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="690.2" y="707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="693.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="690.2" y="691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="690.2" y="675.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="693.2" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="690.2" y="659.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="693.2" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (16 samples, 0.21%)</title><rect x="690.5" y="723.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.21%)</title><rect x="690.5" y="707.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="693.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.18%)</title><rect x="690.8" y="691.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="693.8" y="702.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.07%)</title><rect x="691.0" y="675.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="694.0" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 0.10%)</title><rect x="691.7" y="675.0" width="1.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="694.7" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="693.0" y="723.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="696.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (56 samples, 0.73%)</title><rect x="693.3" y="723.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="696.3" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (49 samples, 0.64%)</title><rect x="694.4" y="707.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.4" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (48 samples, 0.63%)</title><rect x="694.5" y="691.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="697.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.08%)</title><rect x="700.7" y="675.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="703.7" y="686.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.08%)</title><rect x="700.7" y="659.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="703.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6 samples, 0.08%)</title><rect x="700.7" y="643.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="703.7" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.03%)</title><rect x="701.6" y="675.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.08%)</title><rect x="701.9" y="723.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (5 samples, 0.07%)</title><rect x="702.9" y="723.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="705.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (3 samples, 0.04%)</title><rect x="703.0" y="707.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="706.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (22 samples, 0.29%)</title><rect x="703.6" y="723.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="706.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.14%)</title><rect x="704.4" y="707.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="707.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.14%)</title><rect x="704.4" y="691.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="707.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="705.8" y="675.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="708.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="705.8" y="659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="708.8" y="670.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.03%)</title><rect x="705.8" y="643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="708.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.08%)</title><rect x="706.1" y="707.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="709.1" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.07%)</title><rect x="706.3" y="691.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.3" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.04%)</title><rect x="706.6" y="675.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.6" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="706.7" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="709.7" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="706.7" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="709.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="706.7" y="627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="709.7" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="706.7" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="709.7" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (32 samples, 0.42%)</title><rect x="707.0" y="723.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="710.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.03%)</title><rect x="711.7" y="707.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="714.7" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.setBody (14 samples, 0.18%)</title><rect x="712.0" y="723.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="715.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.04%)</title><rect x="714.1" y="723.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="717.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (43 samples, 0.56%)</title><rect x="714.6" y="739.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (29 samples, 0.38%)</title><rect x="715.8" y="723.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="718.8" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="716.3" y="707.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="719.3" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.08%)</title><rect x="716.6" y="707.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="719.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.07%)</title><rect x="717.7" y="707.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="720.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.05%)</title><rect x="717.8" y="691.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="720.8" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.03%)</title><rect x="718.2" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.16%)</title><rect x="718.5" y="707.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="721.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.16%)</title><rect x="718.5" y="691.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="721.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (12 samples, 0.16%)</title><rect x="718.5" y="675.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.5" y="686.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="719.7" y="659.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="722.7" y="670.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="720.0" y="659.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="723.0" y="670.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 0.08%)</title><rect x="720.3" y="723.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="723.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.08%)</title><rect x="720.3" y="707.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="723.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (14 samples, 0.18%)</title><rect x="721.2" y="739.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="724.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.10%)</title><rect x="721.6" y="723.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="724.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="721.6" y="707.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.6" y="718.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="721.6" y="691.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="724.6" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.08%)</title><rect x="721.9" y="707.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="724.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="722.5" y="691.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="725.5" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.03%)</title><rect x="722.5" y="675.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="725.5" y="686.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.03%)</title><rect x="722.5" y="659.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.5" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.05%)</title><rect x="722.8" y="723.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="725.8" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title><rect x="722.8" y="707.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="722.8" y="691.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="725.8" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="723.1" y="675.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="726.1" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (169 samples, 2.21%)</title><rect x="723.4" y="739.0" width="26.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.4" y="750.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (6 samples, 0.08%)</title><rect x="724.6" y="723.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="727.6" y="734.0"></text>
</g>
<g>
<title>__GI___setsockopt (154 samples, 2.02%)</title><rect x="725.6" y="723.0" width="23.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="728.6" y="734.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (91 samples, 1.19%)</title><rect x="735.3" y="707.0" width="14.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="738.3" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (90 samples, 1.18%)</title><rect x="735.3" y="691.0" width="13.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="738.3" y="702.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="738.5" y="675.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="741.5" y="686.0"></text>
</g>
<g>
<title>sys_setsockopt (67 samples, 0.88%)</title><rect x="738.9" y="675.0" width="10.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="741.9" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (2 samples, 0.03%)</title><rect x="739.3" y="659.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="742.3" y="670.0"></text>
</g>
<g>
<title>security_socket_setsockopt (23 samples, 0.30%)</title><rect x="739.6" y="659.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="742.6" y="670.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (5 samples, 0.07%)</title><rect x="740.1" y="643.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="743.1" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (15 samples, 0.20%)</title><rect x="740.9" y="643.0" width="2.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="743.9" y="654.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (15 samples, 0.20%)</title><rect x="740.9" y="627.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="743.9" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (10 samples, 0.13%)</title><rect x="741.6" y="611.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="744.6" y="622.0"></text>
</g>
<g>
<title>sock_setsockopt (23 samples, 0.30%)</title><rect x="743.3" y="659.0" width="3.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="746.3" y="670.0"></text>
</g>
<g>
<title>_copy_from_user (2 samples, 0.03%)</title><rect x="743.8" y="643.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="746.8" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.04%)</title><rect x="744.1" y="643.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="747.1" y="654.0"></text>
</g>
<g>
<title>sock_set_timeout (7 samples, 0.09%)</title><rect x="745.0" y="643.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="748.0" y="654.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (2 samples, 0.03%)</title><rect x="745.8" y="627.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="748.8" y="638.0"></text>
</g>
<g>
<title>tcp_release_cb (5 samples, 0.07%)</title><rect x="746.1" y="643.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="749.1" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (15 samples, 0.20%)</title><rect x="746.9" y="659.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="749.9" y="670.0"></text>
</g>
<g>
<title>__fdget (10 samples, 0.13%)</title><rect x="747.0" y="643.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="750.0" y="654.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.13%)</title><rect x="747.0" y="627.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="750.0" y="638.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.13%)</title><rect x="747.0" y="611.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="750.0" y="622.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="748.3" y="595.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="751.3" y="606.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="748.3" y="579.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="751.3" y="590.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="748.3" y="563.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="751.3" y="574.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="748.3" y="547.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="751.3" y="558.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.05%)</title><rect x="748.6" y="643.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="751.6" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,095 samples, 14.33%)</title><rect x="749.5" y="739.0" width="169.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.5" y="750.0">one/nio/net/NativeSock..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (30 samples, 0.39%)</title><rect x="750.3" y="723.0" width="4.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="753.3" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="752.0" y="707.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="755.0" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="752.3" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="755.3" y="718.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (5 samples, 0.07%)</title><rect x="752.8" y="707.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="755.8" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.12%)</title><rect x="753.5" y="707.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="756.5" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="754.1" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="757.1" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (3 samples, 0.04%)</title><rect x="754.5" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="757.5" y="702.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.04%)</title><rect x="754.9" y="723.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="757.9" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.05%)</title><rect x="755.4" y="723.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="758.4" y="734.0"></text>
</g>
<g>
<title>send (1,053 samples, 13.78%)</title><rect x="756.0" y="723.0" width="162.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="759.0" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,019 samples, 13.34%)</title><rect x="761.2" y="707.0" width="157.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="764.2" y="718.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>do_syscall_64 (1,015 samples, 13.29%)</title><rect x="761.2" y="691.0" width="156.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="764.2" y="702.0">do_syscall_64</text>
</g>
<g>
<title>sys_sendto (1,001 samples, 13.10%)</title><rect x="763.4" y="675.0" width="154.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="766.4" y="686.0">sys_sendto</text>
</g>
<g>
<title>SYSC_sendto (996 samples, 13.04%)</title><rect x="763.4" y="659.0" width="153.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="766.4" y="670.0">SYSC_sendto</text>
</g>
<g>
<title>inet_sendmsg (3 samples, 0.04%)</title><rect x="763.9" y="643.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="766.9" y="654.0"></text>
</g>
<g>
<title>sock_sendmsg (986 samples, 12.91%)</title><rect x="764.3" y="643.0" width="152.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="767.3" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (980 samples, 12.83%)</title><rect x="764.5" y="627.0" width="151.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="767.5" y="638.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (974 samples, 12.75%)</title><rect x="765.3" y="611.0" width="150.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="768.3" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="765.3" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="768.3" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="765.6" y="595.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="768.6" y="606.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="765.9" y="595.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="768.9" y="606.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.03%)</title><rect x="765.9" y="579.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="768.9" y="590.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="765.9" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="768.9" y="574.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.03%)</title><rect x="766.7" y="595.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="769.7" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="767.0" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="770.0" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (959 samples, 12.55%)</title><rect x="767.3" y="595.0" width="148.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="770.3" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (6 samples, 0.08%)</title><rect x="769.9" y="579.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="772.9" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.04%)</title><rect x="770.4" y="563.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="773.4" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (6 samples, 0.08%)</title><rect x="770.8" y="579.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="773.8" y="590.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (4 samples, 0.05%)</title><rect x="771.0" y="563.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="774.0" y="574.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.03%)</title><rect x="771.7" y="579.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="774.7" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (48 samples, 0.63%)</title><rect x="772.1" y="579.0" width="7.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="775.1" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (44 samples, 0.58%)</title><rect x="772.5" y="563.0" width="6.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="775.5" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.43 (17 samples, 0.22%)</title><rect x="773.4" y="547.0" width="2.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="776.4" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (14 samples, 0.18%)</title><rect x="773.4" y="531.0" width="2.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="776.4" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.05%)</title><rect x="775.0" y="515.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="778.0" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.04%)</title><rect x="775.6" y="531.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="778.6" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (15 samples, 0.20%)</title><rect x="776.1" y="547.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="779.1" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="778.1" y="531.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="781.1" y="542.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.08%)</title><rect x="778.4" y="547.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="781.4" y="558.0"></text>
</g>
<g>
<title>skb_entail (8 samples, 0.10%)</title><rect x="779.5" y="579.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="782.5" y="590.0"></text>
</g>
<g>
<title>tcp_push (847 samples, 11.09%)</title><rect x="780.7" y="579.0" width="130.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="783.7" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (843 samples, 11.03%)</title><rect x="781.0" y="563.0" width="130.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="784.0" y="574.0">__tcp_push_pendi..</text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 0.04%)</title><rect x="781.0" y="547.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="784.0" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="781.8" y="547.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="784.8" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (835 samples, 10.93%)</title><rect x="782.3" y="547.0" width="128.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="785.3" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (792 samples, 10.37%)</title><rect x="783.6" y="531.0" width="122.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="786.6" y="542.0">__tcp_transmit_..</text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.05%)</title><rect x="786.3" y="515.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="789.3" y="526.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.03%)</title><rect x="786.9" y="515.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="789.9" y="526.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.03%)</title><rect x="787.2" y="515.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="790.2" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (756 samples, 9.90%)</title><rect x="787.5" y="515.0" width="116.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="790.5" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="788.1" y="499.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="791.1" y="510.0"></text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="788.4" y="499.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="791.4" y="510.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="788.4" y="483.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="791.4" y="494.0"></text>
</g>
<g>
<title>ip_local_out (745 samples, 9.75%)</title><rect x="788.7" y="499.0" width="115.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="791.7" y="510.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (159 samples, 2.08%)</title><rect x="788.7" y="483.0" width="24.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="791.7" y="494.0">_..</text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (9 samples, 0.12%)</title><rect x="788.9" y="467.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="791.9" y="478.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (2 samples, 0.03%)</title><rect x="790.3" y="467.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="793.3" y="478.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn?[iptable_nat] (2 samples, 0.03%)</title><rect x="790.6" y="467.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="793.6" y="478.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (8 samples, 0.10%)</title><rect x="790.9" y="467.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="793.9" y="478.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack_ipv4] (6 samples, 0.08%)</title><rect x="792.1" y="467.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="795.1" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (131 samples, 1.71%)</title><rect x="793.1" y="467.0" width="20.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="796.1" y="478.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (4 samples, 0.05%)</title><rect x="793.5" y="451.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="796.5" y="462.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (9 samples, 0.12%)</title><rect x="794.1" y="451.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="797.1" y="462.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (8 samples, 0.10%)</title><rect x="794.3" y="435.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="797.3" y="446.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (25 samples, 0.33%)</title><rect x="795.5" y="451.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="798.5" y="462.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (24 samples, 0.31%)</title><rect x="795.7" y="435.0" width="3.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="798.7" y="446.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn?[iptable_nat] (5 samples, 0.07%)</title><rect x="799.4" y="451.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="802.4" y="462.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat_ipv4] (5 samples, 0.07%)</title><rect x="799.4" y="435.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="802.4" y="446.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (3 samples, 0.04%)</title><rect x="799.4" y="419.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="802.4" y="430.0"></text>
</g>
<g>
<title>nf_nat_packet?[nf_nat] (2 samples, 0.03%)</title><rect x="799.5" y="403.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="802.5" y="414.0"></text>
</g>
<g>
<title>nf_nat_packet?[nf_nat] (2 samples, 0.03%)</title><rect x="799.9" y="419.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="802.9" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack_ipv4] (81 samples, 1.06%)</title><rect x="800.2" y="451.0" width="12.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="803.2" y="462.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (2 samples, 0.03%)</title><rect x="800.5" y="435.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="803.5" y="446.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (2 samples, 0.03%)</title><rect x="800.9" y="435.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="803.9" y="446.0"></text>
</g>
<g>
<title>ipv4_get_l4proto?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="801.2" y="435.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="804.2" y="446.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (65 samples, 0.85%)</title><rect x="801.6" y="435.0" width="10.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="804.6" y="446.0"></text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (9 samples, 0.12%)</title><rect x="803.6" y="419.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="806.6" y="430.0"></text>
</g>
<g>
<title>__nf_ct_l4proto_find?[nf_conntrack] (2 samples, 0.03%)</title><rect x="805.0" y="419.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="808.0" y="430.0"></text>
</g>
<g>
<title>ipv4_get_l4proto?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="805.4" y="419.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="808.4" y="430.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (4 samples, 0.05%)</title><rect x="805.7" y="419.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="808.7" y="430.0"></text>
</g>
<g>
<title>tcp_error?[nf_conntrack] (7 samples, 0.09%)</title><rect x="806.3" y="419.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="809.3" y="430.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (23 samples, 0.30%)</title><rect x="807.6" y="419.0" width="3.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="810.6" y="430.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (14 samples, 0.18%)</title><rect x="809.0" y="403.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="812.0" y="414.0"></text>
</g>
<g>
<title>tcp_pkt_to_tuple?[nf_conntrack] (3 samples, 0.04%)</title><rect x="811.1" y="419.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="814.1" y="430.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (4 samples, 0.05%)</title><rect x="812.1" y="435.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="815.1" y="446.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (3 samples, 0.04%)</title><rect x="812.7" y="451.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="815.7" y="462.0"></text>
</g>
<g>
<title>ip_output (583 samples, 7.63%)</title><rect x="813.5" y="483.0" width="90.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="816.5" y="494.0">ip_output</text>
</g>
<g>
<title>__indirect_thunk_start (2 samples, 0.03%)</title><rect x="814.1" y="467.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="817.1" y="478.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.03%)</title><rect x="814.4" y="467.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="817.4" y="478.0"></text>
</g>
<g>
<title>ip_finish_output (558 samples, 7.30%)</title><rect x="814.7" y="467.0" width="86.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="817.7" y="478.0">ip_finish_..</text>
</g>
<g>
<title>ip_finish_output2 (553 samples, 7.24%)</title><rect x="815.3" y="451.0" width="85.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="818.3" y="462.0">ip_finish_..</text>
</g>
<g>
<title>__local_bh_enable_ip (490 samples, 6.41%)</title><rect x="817.6" y="435.0" width="75.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="820.6" y="446.0">__local_..</text>
</g>
<g>
<title>do_softirq.part.17 (489 samples, 6.40%)</title><rect x="817.8" y="419.0" width="75.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="820.8" y="430.0">do_softi..</text>
</g>
<g>
<title>do_softirq_own_stack (484 samples, 6.34%)</title><rect x="818.5" y="403.0" width="74.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="821.5" y="414.0">do_softi..</text>
</g>
<g>
<title>__softirqentry_text_start (481 samples, 6.30%)</title><rect x="818.5" y="387.0" width="74.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="821.5" y="398.0">__softir..</text>
</g>
<g>
<title>net_rx_action (463 samples, 6.06%)</title><rect x="821.0" y="371.0" width="71.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="824.0" y="382.0">net_rx_a..</text>
</g>
<g>
<title>process_backlog (452 samples, 5.92%)</title><rect x="822.7" y="355.0" width="69.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="825.7" y="366.0">process..</text>
</g>
<g>
<title>__netif_receive_skb (446 samples, 5.84%)</title><rect x="823.6" y="339.0" width="68.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="826.6" y="350.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_core (441 samples, 5.77%)</title><rect x="824.1" y="323.0" width="68.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="827.1" y="334.0">__netif..</text>
</g>
<g>
<title>ip_rcv (424 samples, 5.55%)</title><rect x="826.3" y="307.0" width="65.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="829.3" y="318.0">ip_rcv</text>
</g>
<g>
<title>__indirect_thunk_start (2 samples, 0.03%)</title><rect x="826.7" y="291.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="829.7" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="827.0" y="291.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="830.0" y="302.0"></text>
</g>
<g>
<title>ip_rcv_finish (394 samples, 5.16%)</title><rect x="827.4" y="291.0" width="60.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="830.4" y="302.0">ip_rcv..</text>
</g>
<g>
<title>ip_local_deliver (387 samples, 5.07%)</title><rect x="827.8" y="275.0" width="59.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="830.8" y="286.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (363 samples, 4.75%)</title><rect x="828.3" y="259.0" width="56.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="831.3" y="270.0">ip_loc..</text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.04%)</title><rect x="829.4" y="243.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="832.4" y="254.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.03%)</title><rect x="829.8" y="243.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="832.8" y="254.0"></text>
</g>
<g>
<title>tcp_v4_rcv (351 samples, 4.59%)</title><rect x="830.1" y="243.0" width="54.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="833.1" y="254.0">tcp_v..</text>
</g>
<g>
<title>__inet_lookup_established (9 samples, 0.12%)</title><rect x="831.5" y="227.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="834.5" y="238.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (5 samples, 0.07%)</title><rect x="833.1" y="227.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="836.1" y="238.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.03%)</title><rect x="833.5" y="211.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="836.5" y="222.0"></text>
</g>
<g>
<title>tcp_md5_do_lookup (2 samples, 0.03%)</title><rect x="833.8" y="227.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="836.8" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (325 samples, 4.25%)</title><rect x="834.1" y="227.0" width="50.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="837.1" y="238.0">tcp_v..</text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.04%)</title><rect x="834.6" y="211.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="837.6" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (315 samples, 4.12%)</title><rect x="835.4" y="211.0" width="48.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="838.4" y="222.0">tcp_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (18 samples, 0.24%)</title><rect x="836.3" y="195.0" width="2.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="839.3" y="206.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (17 samples, 0.22%)</title><rect x="836.5" y="179.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="839.5" y="190.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.05%)</title><rect x="836.5" y="163.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="839.5" y="174.0"></text>
</g>
<g>
<title>sk_reset_timer (13 samples, 0.17%)</title><rect x="837.1" y="163.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="840.1" y="174.0"></text>
</g>
<g>
<title>mod_timer (12 samples, 0.16%)</title><rect x="837.2" y="147.0" width="1.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="840.2" y="158.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.12%)</title><rect x="837.7" y="131.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="840.7" y="142.0"></text>
</g>
<g>
<title>ktime_get_real_seconds (2 samples, 0.03%)</title><rect x="839.2" y="195.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="842.2" y="206.0"></text>
</g>
<g>
<title>sched_clock_cpu (4 samples, 0.05%)</title><rect x="839.6" y="195.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="842.6" y="206.0"></text>
</g>
<g>
<title>sched_clock (3 samples, 0.04%)</title><rect x="839.7" y="179.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="842.7" y="190.0"></text>
</g>
<g>
<title>native_sched_clock (3 samples, 0.04%)</title><rect x="839.7" y="163.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="842.7" y="174.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 0.05%)</title><rect x="840.2" y="195.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="843.2" y="206.0"></text>
</g>
<g>
<title>__wake_up_sync_key (3 samples, 0.04%)</title><rect x="840.3" y="179.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="843.3" y="190.0"></text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.04%)</title><rect x="840.3" y="163.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="843.3" y="174.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="840.3" y="147.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="843.3" y="158.0"></text>
</g>
<g>
<title>tcp_ack (80 samples, 1.05%)</title><rect x="840.8" y="195.0" width="12.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="843.8" y="206.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.03%)</title><rect x="843.0" y="179.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="846.0" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (62 samples, 0.81%)</title><rect x="843.3" y="179.0" width="9.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="846.3" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (36 samples, 0.47%)</title><rect x="845.0" y="163.0" width="5.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="848.0" y="174.0"></text>
</g>
<g>
<title>kfree_skbmem (12 samples, 0.16%)</title><rect x="845.0" y="147.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="848.0" y="158.0"></text>
</g>
<g>
<title>kmem_cache_free (12 samples, 0.16%)</title><rect x="845.0" y="131.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="848.0" y="142.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.04%)</title><rect x="846.2" y="115.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="849.2" y="126.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.33 (2 samples, 0.03%)</title><rect x="846.3" y="99.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="849.3" y="110.0"></text>
</g>
<g>
<title>skb_release_all (22 samples, 0.29%)</title><rect x="846.8" y="147.0" width="3.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="849.8" y="158.0"></text>
</g>
<g>
<title>skb_release_data (18 samples, 0.24%)</title><rect x="847.0" y="131.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="850.0" y="142.0"></text>
</g>
<g>
<title>skb_free_head (13 samples, 0.17%)</title><rect x="847.7" y="115.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="850.7" y="126.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="847.7" y="99.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="850.7" y="110.0"></text>
</g>
<g>
<title>kfree (11 samples, 0.14%)</title><rect x="848.0" y="99.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="851.0" y="110.0"></text>
</g>
<g>
<title>__slab_free (6 samples, 0.08%)</title><rect x="848.8" y="83.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="851.8" y="94.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.33 (5 samples, 0.07%)</title><rect x="849.0" y="67.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="852.0" y="78.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.04%)</title><rect x="849.7" y="131.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="852.7" y="142.0"></text>
</g>
<g>
<title>minmax_running_min (2 samples, 0.03%)</title><rect x="850.8" y="163.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="853.8" y="174.0"></text>
</g>
<g>
<title>rb_erase (2 samples, 0.03%)</title><rect x="851.1" y="163.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="854.1" y="174.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (7 samples, 0.09%)</title><rect x="851.6" y="163.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="854.6" y="174.0"></text>
</g>
<g>
<title>minmax_running_min (3 samples, 0.04%)</title><rect x="852.1" y="147.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="855.1" y="158.0"></text>
</g>
<g>
<title>minmax_subwin_update (2 samples, 0.03%)</title><rect x="852.2" y="131.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="855.2" y="142.0"></text>
</g>
<g>
<title>tcp_data_queue (190 samples, 2.49%)</title><rect x="853.3" y="195.0" width="29.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="856.3" y="206.0">tc..</text>
</g>
<g>
<title>sock_def_readable (172 samples, 2.25%)</title><rect x="854.5" y="179.0" width="26.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="857.5" y="190.0">s..</text>
</g>
<g>
<title>__wake_up_sync_key (166 samples, 2.17%)</title><rect x="855.5" y="163.0" width="25.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="858.5" y="174.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (165 samples, 2.16%)</title><rect x="855.5" y="147.0" width="25.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="858.5" y="158.0">_..</text>
</g>
<g>
<title>__lock_text_start (164 samples, 2.15%)</title><rect x="855.6" y="131.0" width="25.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="858.6" y="142.0">_..</text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.07%)</title><rect x="881.1" y="179.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="884.1" y="190.0"></text>
</g>
<g>
<title>tcp_queue_rcv (4 samples, 0.05%)</title><rect x="882.0" y="179.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="885.0" y="190.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.03%)</title><rect x="882.8" y="195.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="885.8" y="206.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.03%)</title><rect x="883.3" y="195.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="886.3" y="206.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.04%)</title><rect x="883.6" y="195.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="886.6" y="206.0"></text>
</g>
<g>
<title>tcp_urg (2 samples, 0.03%)</title><rect x="884.0" y="211.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="887.0" y="222.0"></text>
</g>
<g>
<title>nf_hook_slow (16 samples, 0.21%)</title><rect x="884.7" y="259.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="887.7" y="270.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (6 samples, 0.08%)</title><rect x="885.1" y="243.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="888.1" y="254.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (6 samples, 0.08%)</title><rect x="885.1" y="227.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="888.1" y="238.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (4 samples, 0.05%)</title><rect x="886.0" y="243.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="889.0" y="254.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (4 samples, 0.05%)</title><rect x="886.0" y="227.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="889.0" y="238.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="886.7" y="243.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="889.7" y="254.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (2 samples, 0.03%)</title><rect x="886.7" y="227.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="889.7" y="238.0"></text>
</g>
<g>
<title>tcp_v4_rcv (3 samples, 0.04%)</title><rect x="887.1" y="259.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="890.1" y="270.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.04%)</title><rect x="887.6" y="275.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="890.6" y="286.0"></text>
</g>
<g>
<title>ip_sabotage_in?[br_netfilter] (3 samples, 0.04%)</title><rect x="888.2" y="291.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="891.2" y="302.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (3 samples, 0.04%)</title><rect x="888.7" y="291.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="891.7" y="302.0"></text>
</g>
<g>
<title>nf_hook_slow (17 samples, 0.22%)</title><rect x="889.1" y="291.0" width="2.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="892.1" y="302.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (4 samples, 0.05%)</title><rect x="889.7" y="275.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="892.7" y="286.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (3 samples, 0.04%)</title><rect x="889.9" y="259.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="892.9" y="270.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack_ipv4] (4 samples, 0.05%)</title><rect x="890.5" y="275.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="893.5" y="286.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (4 samples, 0.05%)</title><rect x="890.5" y="259.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="893.5" y="270.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in?[nf_nat_ipv4] (3 samples, 0.04%)</title><rect x="891.3" y="275.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="894.3" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.03%)</title><rect x="891.8" y="307.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="894.8" y="318.0"></text>
</g>
<g>
<title>ip_rcv (2 samples, 0.03%)</title><rect x="892.2" y="323.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="895.2" y="334.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.03%)</title><rect x="892.5" y="371.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="895.5" y="382.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.04%)</title><rect x="892.8" y="387.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="895.8" y="398.0"></text>
</g>
<g>
<title>dev_queue_xmit (48 samples, 0.63%)</title><rect x="893.3" y="435.0" width="7.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="896.3" y="446.0"></text>
</g>
<g>
<title>__dev_queue_xmit (47 samples, 0.62%)</title><rect x="893.5" y="419.0" width="7.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="896.5" y="430.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (18 samples, 0.24%)</title><rect x="896.1" y="403.0" width="2.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="899.1" y="414.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="897.0" y="387.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="900.0" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.10%)</title><rect x="897.3" y="387.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="900.3" y="398.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="897.3" y="371.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="900.3" y="382.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.03%)</title><rect x="897.9" y="371.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="900.9" y="382.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.03%)</title><rect x="898.2" y="371.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="901.2" y="382.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.03%)</title><rect x="898.6" y="387.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="901.6" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.03%)</title><rect x="898.9" y="403.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="901.9" y="414.0"></text>
</g>
<g>
<title>validate_xmit_skb (8 samples, 0.10%)</title><rect x="899.3" y="403.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="902.3" y="414.0"></text>
</g>
<g>
<title>netif_skb_features (6 samples, 0.08%)</title><rect x="899.6" y="387.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="902.6" y="398.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (2 samples, 0.03%)</title><rect x="900.9" y="467.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="903.9" y="478.0"></text>
</g>
<g>
<title>ipv4_helper?[nf_conntrack_ipv4] (3 samples, 0.04%)</title><rect x="901.2" y="467.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="904.2" y="478.0"></text>
</g>
<g>
<title>nf_hook_slow (12 samples, 0.16%)</title><rect x="901.6" y="467.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="904.6" y="478.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (6 samples, 0.08%)</title><rect x="901.8" y="451.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="904.8" y="462.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (6 samples, 0.08%)</title><rect x="901.8" y="435.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="904.8" y="446.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (2 samples, 0.03%)</title><rect x="903.0" y="451.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="906.0" y="462.0"></text>
</g>
<g>
<title>nf_hook_slow (2 samples, 0.03%)</title><rect x="903.5" y="483.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="906.5" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="904.0" y="499.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="907.0" y="510.0"></text>
</g>
<g>
<title>skb_clone (6 samples, 0.08%)</title><rect x="904.3" y="515.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="907.3" y="526.0"></text>
</g>
<g>
<title>__skb_clone (6 samples, 0.08%)</title><rect x="904.3" y="499.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="907.3" y="510.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.03%)</title><rect x="905.7" y="515.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="908.7" y="526.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.03%)</title><rect x="905.7" y="499.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="908.7" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.04%)</title><rect x="906.0" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="909.0" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="906.4" y="531.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="909.4" y="542.0"></text>
</g>
<g>
<title>skb_push (2 samples, 0.03%)</title><rect x="906.9" y="531.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="909.9" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (9 samples, 0.12%)</title><rect x="907.2" y="531.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="910.2" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.04%)</title><rect x="908.1" y="515.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="911.1" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (3 samples, 0.04%)</title><rect x="908.1" y="499.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="911.1" y="510.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="908.3" y="483.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="911.3" y="494.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="908.3" y="467.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="911.3" y="478.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (3 samples, 0.04%)</title><rect x="908.7" y="531.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="911.7" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.07%)</title><rect x="909.4" y="531.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="912.4" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="909.8" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="912.8" y="526.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="909.8" y="499.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="912.8" y="510.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.29 (2 samples, 0.03%)</title><rect x="910.1" y="531.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="913.1" y="542.0"></text>
</g>
<g>
<title>tcp_tso_segs (2 samples, 0.03%)</title><rect x="910.4" y="531.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="913.4" y="542.0"></text>
</g>
<g>
<title>tcp_v4_send_check (3 samples, 0.04%)</title><rect x="910.8" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="913.8" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (2 samples, 0.03%)</title><rect x="911.2" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="914.2" y="574.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.04%)</title><rect x="911.5" y="579.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="914.5" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (21 samples, 0.27%)</title><rect x="912.0" y="579.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="915.0" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (7 samples, 0.09%)</title><rect x="912.1" y="563.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="915.1" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (13 samples, 0.17%)</title><rect x="913.2" y="563.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="916.2" y="574.0"></text>
</g>
<g>
<title>tcp_established_options (3 samples, 0.04%)</title><rect x="914.3" y="547.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="917.3" y="558.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (3 samples, 0.04%)</title><rect x="914.8" y="547.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="917.8" y="558.0"></text>
</g>
<g>
<title>security_socket_sendmsg (3 samples, 0.04%)</title><rect x="915.9" y="627.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="918.9" y="638.0"></text>
</g>
<g>
<title>tcp_sendmsg (2 samples, 0.03%)</title><rect x="916.3" y="627.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="919.3" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.05%)</title><rect x="916.6" y="643.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="919.6" y="654.0"></text>
</g>
<g>
<title>__fdget (4 samples, 0.05%)</title><rect x="916.6" y="627.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="919.6" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.05%)</title><rect x="916.6" y="611.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="919.6" y="622.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.05%)</title><rect x="916.6" y="595.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="919.6" y="606.0"></text>
</g>
<g>
<title>fput (3 samples, 0.04%)</title><rect x="917.2" y="659.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="920.2" y="670.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.03%)</title><rect x="917.7" y="659.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="920.7" y="670.0"></text>
</g>
<g>
<title>sys_sendto (4 samples, 0.05%)</title><rect x="918.0" y="691.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="921.0" y="702.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (10 samples, 0.13%)</title><rect x="918.6" y="739.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.6" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (7 samples, 0.09%)</title><rect x="919.1" y="723.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="922.1" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (7 samples, 0.09%)</title><rect x="919.1" y="707.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.04%)</title><rect x="920.2" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="923.2" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="920.2" y="755.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="923.2" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/Replicas.quorum (3 samples, 0.04%)</title><rect x="920.6" y="835.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="923.6" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.defineMethod (5 samples, 0.07%)</title><rect x="921.1" y="883.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="924.1" y="894.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,544 samples, 20.21%)</title><rect x="921.9" y="915.0" width="238.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="924.9" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (33 samples, 0.43%)</title><rect x="922.8" y="899.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="925.8" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (33 samples, 0.43%)</title><rect x="922.8" y="883.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="925.8" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (440 samples, 5.76%)</title><rect x="927.9" y="899.0" width="68.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="930.9" y="910.0">one/nio..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.05%)</title><rect x="930.4" y="883.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="933.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.05%)</title><rect x="930.4" y="867.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="933.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.05%)</title><rect x="930.4" y="851.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="933.4" y="862.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.03%)</title><rect x="930.7" y="835.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="933.7" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (14 samples, 0.18%)</title><rect x="931.0" y="883.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="934.0" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (13 samples, 0.17%)</title><rect x="931.1" y="867.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="934.1" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (406 samples, 5.31%)</title><rect x="933.1" y="883.0" width="62.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.1" y="894.0">one/ni..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (4 samples, 0.05%)</title><rect x="937.8" y="867.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="940.8" y="878.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (3 samples, 0.04%)</title><rect x="937.9" y="851.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.9" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (2 samples, 0.03%)</title><rect x="937.9" y="835.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="940.9" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="937.9" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="940.9" y="830.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="937.9" y="803.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="940.9" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="937.9" y="787.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="940.9" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="937.9" y="771.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="940.9" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (10 samples, 0.13%)</title><rect x="938.4" y="867.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="941.4" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="939.9" y="867.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="942.9" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.03%)</title><rect x="939.9" y="851.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="942.9" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (17 samples, 0.22%)</title><rect x="940.3" y="867.0" width="2.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="943.3" y="878.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (6 samples, 0.08%)</title><rect x="942.9" y="867.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="945.9" y="878.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.03%)</title><rect x="943.8" y="867.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="946.8" y="878.0"></text>
</g>
<g>
<title>epoll_wait (319 samples, 4.18%)</title><rect x="944.3" y="867.0" width="49.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="947.3" y="878.0">epoll..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (261 samples, 3.42%)</title><rect x="953.2" y="851.0" width="40.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="956.2" y="862.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (260 samples, 3.40%)</title><rect x="953.2" y="835.0" width="40.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="956.2" y="846.0">do_..</text>
</g>
<g>
<title>fput (5 samples, 0.07%)</title><rect x="955.7" y="819.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="958.7" y="830.0"></text>
</g>
<g>
<title>sys_epoll_wait (239 samples, 3.13%)</title><rect x="956.5" y="819.0" width="36.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="959.5" y="830.0">sys..</text>
</g>
<g>
<title>__fdget (6 samples, 0.08%)</title><rect x="957.9" y="803.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="960.9" y="814.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.07%)</title><rect x="958.0" y="787.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="961.0" y="798.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.07%)</title><rect x="958.0" y="771.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="961.0" y="782.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="959.1" y="803.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="962.1" y="814.0"></text>
</g>
<g>
<title>ep_poll (218 samples, 2.85%)</title><rect x="959.4" y="803.0" width="33.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="962.4" y="814.0">ep..</text>
</g>
<g>
<title>__lock_text_start (14 samples, 0.18%)</title><rect x="960.5" y="787.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="963.5" y="798.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="962.6" y="787.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="965.6" y="798.0"></text>
</g>
<g>
<title>ep_scan_ready_list (105 samples, 1.37%)</title><rect x="963.0" y="787.0" width="16.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="966.0" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (19 samples, 0.25%)</title><rect x="963.1" y="771.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="966.1" y="782.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (3 samples, 0.04%)</title><rect x="966.2" y="771.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="969.2" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (73 samples, 0.96%)</title><rect x="966.8" y="771.0" width="11.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="969.8" y="782.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (44 samples, 0.58%)</title><rect x="970.1" y="755.0" width="6.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="973.1" y="766.0"></text>
</g>
<g>
<title>sock_poll (32 samples, 0.42%)</title><rect x="971.3" y="739.0" width="4.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="974.3" y="750.0"></text>
</g>
<g>
<title>tcp_poll (11 samples, 0.14%)</title><rect x="973.0" y="723.0" width="1.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="976.0" y="734.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (10 samples, 0.13%)</title><rect x="974.7" y="723.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="977.7" y="734.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.05%)</title><rect x="976.2" y="739.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="979.2" y="750.0"></text>
</g>
<g>
<title>sock_poll (8 samples, 0.10%)</title><rect x="976.9" y="755.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="979.9" y="766.0"></text>
</g>
<g>
<title>mutex_lock (7 samples, 0.09%)</title><rect x="978.1" y="771.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="981.1" y="782.0"></text>
</g>
<g>
<title>rcu_all_qs (2 samples, 0.03%)</title><rect x="978.9" y="755.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="981.9" y="766.0"></text>
</g>
<g>
<title>ep_send_events_proc (7 samples, 0.09%)</title><rect x="979.2" y="787.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="982.2" y="798.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.04%)</title><rect x="980.3" y="787.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="983.3" y="798.0"></text>
</g>
<g>
<title>mutex_unlock (4 samples, 0.05%)</title><rect x="980.7" y="787.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="983.7" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (75 samples, 0.98%)</title><rect x="981.3" y="787.0" width="11.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="984.3" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (72 samples, 0.94%)</title><rect x="981.8" y="771.0" width="11.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="984.8" y="782.0"></text>
</g>
<g>
<title>schedule (67 samples, 0.88%)</title><rect x="982.6" y="755.0" width="10.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="985.6" y="766.0"></text>
</g>
<g>
<title>__schedule (63 samples, 0.82%)</title><rect x="983.2" y="739.0" width="9.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="986.2" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (58 samples, 0.76%)</title><rect x="984.0" y="723.0" width="8.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="987.0" y="734.0"></text>
</g>
<g>
<title>ep_scan_ready_list (2 samples, 0.03%)</title><rect x="993.1" y="803.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="996.1" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.17%)</title><rect x="993.8" y="867.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="996.8" y="878.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.17%)</title><rect x="993.8" y="851.0" width="2.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="996.8" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.07%)</title><rect x="993.8" y="835.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="996.8" y="846.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.04%)</title><rect x="994.2" y="819.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="997.2" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (8 samples, 0.10%)</title><rect x="994.6" y="835.0" width="1.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="997.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,065 samples, 13.94%)</title><rect x="995.9" y="899.0" width="164.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="998.9" y="910.0">one/nio/net/Session.p..</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.05%)</title><rect x="996.8" y="883.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="999.8" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,049 samples, 13.73%)</title><rect x="997.6" y="883.0" width="162.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1000.6" y="894.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (627 samples, 8.21%)</title><rect x="997.9" y="867.0" width="96.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1000.9" y="878.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (418 samples, 5.47%)</title><rect x="1000.2" y="851.0" width="64.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1003.2" y="862.0">one/nio..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (415 samples, 5.43%)</title><rect x="1000.6" y="835.0" width="64.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1003.6" y="846.0">one/nio..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (397 samples, 5.20%)</title><rect x="1000.8" y="819.0" width="61.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1003.8" y="830.0">Reques..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6 samples, 0.08%)</title><rect x="1000.8" y="803.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1003.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1001.1" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1004.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (2 samples, 0.03%)</title><rect x="1001.4" y="787.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1004.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="1001.4" y="771.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1004.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (45 samples, 0.59%)</title><rect x="1001.7" y="803.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1004.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (42 samples, 0.55%)</title><rect x="1001.7" y="787.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1004.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.12%)</title><rect x="1001.7" y="771.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1004.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.12%)</title><rect x="1001.7" y="755.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1004.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (26 samples, 0.34%)</title><rect x="1003.1" y="771.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1006.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (16 samples, 0.21%)</title><rect x="1004.7" y="755.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1007.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9 samples, 0.12%)</title><rect x="1005.0" y="739.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1008.0" y="750.0"></text>
</g>
<g>
<title>jbyte_arraycopy (4 samples, 0.05%)</title><rect x="1005.1" y="723.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1008.1" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="1005.7" y="723.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1008.7" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.07%)</title><rect x="1006.4" y="739.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1009.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.05%)</title><rect x="1006.5" y="723.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1009.5" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="1006.7" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="1006.7" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1009.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1006.7" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.7" y="686.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.09%)</title><rect x="1007.1" y="771.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1010.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.09%)</title><rect x="1007.1" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1010.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.09%)</title><rect x="1007.1" y="739.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1010.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.07%)</title><rect x="1007.4" y="723.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1010.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.04%)</title><rect x="1008.2" y="787.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1011.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.entity (346 samples, 4.53%)</title><rect x="1008.7" y="803.0" width="53.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1011.7" y="814.0">ru/ma..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1236802685.linkToTargetMethod (7 samples, 0.09%)</title><rect x="1008.8" y="787.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1011.8" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (7 samples, 0.09%)</title><rect x="1008.8" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1011.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$66/1288711039.get$Lambda (7 samples, 0.09%)</title><rect x="1008.8" y="755.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1011.8" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="1009.4" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.4" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.04%)</title><rect x="1009.4" y="723.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1012.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.04%)</title><rect x="1009.4" y="707.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1012.4" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="1009.4" y="691.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1012.4" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1009.6" y="675.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1012.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (338 samples, 4.42%)</title><rect x="1009.9" y="787.0" width="52.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1012.9" y="798.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (333 samples, 4.36%)</title><rect x="1010.7" y="771.0" width="51.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1013.7" y="782.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (16 samples, 0.21%)</title><rect x="1011.6" y="755.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1014.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (8 samples, 0.10%)</title><rect x="1012.8" y="739.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1015.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (8 samples, 0.10%)</title><rect x="1012.8" y="723.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1015.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.04%)</title><rect x="1013.6" y="707.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1016.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.16%)</title><rect x="1014.1" y="755.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1017.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 0.16%)</title><rect x="1014.1" y="739.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1017.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.07%)</title><rect x="1014.1" y="723.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1017.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.07%)</title><rect x="1014.1" y="707.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1017.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.07%)</title><rect x="1014.1" y="691.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1017.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (5 samples, 0.07%)</title><rect x="1014.1" y="675.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1017.1" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (4 samples, 0.05%)</title><rect x="1014.2" y="659.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1017.2" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="1014.5" y="643.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1017.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.09%)</title><rect x="1014.9" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1017.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.09%)</title><rect x="1014.9" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1017.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="1015.2" y="691.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1018.2" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="1015.2" y="675.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1018.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="1015.2" y="659.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1018.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (3 samples, 0.04%)</title><rect x="1015.5" y="691.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1018.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (299 samples, 3.91%)</title><rect x="1015.9" y="755.0" width="46.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1018.9" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.03%)</title><rect x="1015.9" y="739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (297 samples, 3.89%)</title><rect x="1016.2" y="739.0" width="45.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1019.2" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (297 samples, 3.89%)</title><rect x="1016.2" y="723.0" width="45.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.2" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (297 samples, 3.89%)</title><rect x="1016.2" y="707.0" width="45.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1019.2" y="718.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (297 samples, 3.89%)</title><rect x="1016.2" y="691.0" width="45.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1019.2" y="702.0">jdk/..</text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="1016.6" y="675.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1019.6" y="686.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1016.9" y="675.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1019.9" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (53 samples, 0.69%)</title><rect x="1017.6" y="675.0" width="8.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1020.6" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="1018.4" y="659.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.4" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1018.9" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1021.9" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.228] (2 samples, 0.03%)</title><rect x="1019.2" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.2" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.04%)</title><rect x="1019.5" y="659.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1022.5" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (13 samples, 0.17%)</title><rect x="1020.0" y="659.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1023.0" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.04%)</title><rect x="1022.0" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1025.0" y="670.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_unlock (3 samples, 0.04%)</title><rect x="1022.4" y="659.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1025.4" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (9 samples, 0.12%)</title><rect x="1023.0" y="659.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1026.0" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (5 samples, 0.07%)</title><rect x="1024.7" y="659.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.7" y="670.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="1025.5" y="659.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1028.5" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (221 samples, 2.89%)</title><rect x="1025.8" y="675.0" width="34.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1028.8" y="686.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (174 samples, 2.28%)</title><rect x="1033.1" y="659.0" width="26.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1036.1" y="670.0">e..</text>
</g>
<g>
<title>do_syscall_64 (172 samples, 2.25%)</title><rect x="1033.1" y="643.0" width="26.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1036.1" y="654.0">d..</text>
</g>
<g>
<title>sys_futex (157 samples, 2.05%)</title><rect x="1035.4" y="627.0" width="24.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1038.4" y="638.0">s..</text>
</g>
<g>
<title>do_futex (154 samples, 2.02%)</title><rect x="1035.7" y="611.0" width="23.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1038.7" y="622.0">d..</text>
</g>
<g>
<title>_raw_spin_lock (4 samples, 0.05%)</title><rect x="1036.2" y="595.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1039.2" y="606.0"></text>
</g>
<g>
<title>futex_wake_op (142 samples, 1.86%)</title><rect x="1036.8" y="595.0" width="21.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1039.8" y="606.0">f..</text>
</g>
<g>
<title>get_futex_key (4 samples, 0.05%)</title><rect x="1038.9" y="579.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1041.9" y="590.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.9 (2 samples, 0.03%)</title><rect x="1039.3" y="563.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1042.3" y="574.0"></text>
</g>
<g>
<title>mark_wake_futex (8 samples, 0.10%)</title><rect x="1039.9" y="579.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1042.9" y="590.0"></text>
</g>
<g>
<title>plist_del (2 samples, 0.03%)</title><rect x="1040.2" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1043.2" y="574.0"></text>
</g>
<g>
<title>wake_q_add (4 samples, 0.05%)</title><rect x="1040.5" y="563.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1043.5" y="574.0"></text>
</g>
<g>
<title>wake_up_q (114 samples, 1.49%)</title><rect x="1041.1" y="579.0" width="17.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1044.1" y="590.0"></text>
</g>
<g>
<title>try_to_wake_up (114 samples, 1.49%)</title><rect x="1041.1" y="563.0" width="17.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1044.1" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (113 samples, 1.48%)</title><rect x="1041.3" y="547.0" width="17.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1044.3" y="558.0"></text>
</g>
<g>
<title>hash_futex (5 samples, 0.07%)</title><rect x="1058.7" y="595.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1061.7" y="606.0"></text>
</g>
<g>
<title>sys_futex (2 samples, 0.03%)</title><rect x="1059.6" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1062.6" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.08%)</title><rect x="1060.0" y="675.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1063.0" y="686.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (5 samples, 0.07%)</title><rect x="1060.9" y="675.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1063.9" y="686.0"></text>
</g>
<g>
<title>pthread_cond_signal@plt (2 samples, 0.03%)</title><rect x="1061.8" y="675.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1064.8" y="686.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.17%)</title><rect x="1062.1" y="819.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1065.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.17%)</title><rect x="1062.1" y="803.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1065.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.10%)</title><rect x="1062.1" y="787.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1065.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equals (6 samples, 0.08%)</title><rect x="1062.4" y="771.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1065.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.07%)</title><rect x="1063.4" y="787.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1066.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.05%)</title><rect x="1063.5" y="771.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1066.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.03%)</title><rect x="1063.8" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1066.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.05%)</title><rect x="1064.1" y="819.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="1064.3" y="803.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="1064.3" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1067.3" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1064.4" y="771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1067.4" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1064.4" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.4" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1064.4" y="739.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.4" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1064.4" y="723.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1067.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (124 samples, 1.62%)</title><rect x="1064.7" y="851.0" width="19.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1067.7" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="1067.5" y="835.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.5" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.04%)</title><rect x="1067.5" y="819.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1070.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.04%)</title><rect x="1067.5" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.5" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="1067.5" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.5" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1067.7" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (66 samples, 0.86%)</title><rect x="1068.0" y="835.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1071.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (9 samples, 0.12%)</title><rect x="1070.6" y="819.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (8 samples, 0.10%)</title><rect x="1070.8" y="803.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1073.8" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.09%)</title><rect x="1070.9" y="787.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.9" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.09%)</title><rect x="1070.9" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1073.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="1071.5" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.5" y="766.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (8 samples, 0.10%)</title><rect x="1072.0" y="819.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1075.0" y="830.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.08%)</title><rect x="1073.2" y="819.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1076.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (18 samples, 0.24%)</title><rect x="1074.2" y="819.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1077.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (18 samples, 0.24%)</title><rect x="1074.2" y="803.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1077.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (16 samples, 0.21%)</title><rect x="1074.5" y="787.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1077.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="1076.5" y="771.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1079.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.08%)</title><rect x="1076.9" y="819.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1079.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1077.9" y="819.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1080.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (34 samples, 0.45%)</title><rect x="1078.2" y="835.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1081.2" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (34 samples, 0.45%)</title><rect x="1078.2" y="819.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1081.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.07%)</title><rect x="1081.6" y="803.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.6" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.07%)</title><rect x="1081.6" y="787.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1084.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.07%)</title><rect x="1081.6" y="771.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1084.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1081.6" y="755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1084.6" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="1081.9" y="755.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1084.9" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1082.3" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1082.7" y="803.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1085.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1082.7" y="787.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1085.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.04%)</title><rect x="1082.7" y="771.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1085.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1082.8" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1085.8" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1082.8" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1082.8" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1085.8" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1082.8" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1085.8" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.03%)</title><rect x="1083.1" y="803.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1086.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.04%)</title><rect x="1083.4" y="835.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1086.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (11 samples, 0.14%)</title><rect x="1083.9" y="851.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1086.9" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (9 samples, 0.12%)</title><rect x="1084.2" y="835.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1087.2" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (7 samples, 0.09%)</title><rect x="1084.2" y="819.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1087.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.07%)</title><rect x="1084.4" y="803.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1087.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="1084.8" y="787.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1087.8" y="798.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1085.3" y="819.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1088.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (3 samples, 0.04%)</title><rect x="1085.6" y="851.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1088.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.16%)</title><rect x="1086.1" y="851.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1089.1" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.10%)</title><rect x="1086.7" y="835.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1089.7" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.10%)</title><rect x="1086.7" y="819.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1089.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.05%)</title><rect x="1087.3" y="803.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1090.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.05%)</title><rect x="1087.3" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1090.3" y="798.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.05%)</title><rect x="1087.3" y="771.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1090.3" y="782.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.03%)</title><rect x="1087.6" y="755.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1090.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (44 samples, 0.58%)</title><rect x="1087.9" y="851.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1090.9" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (44 samples, 0.58%)</title><rect x="1087.9" y="835.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1090.9" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (10 samples, 0.13%)</title><rect x="1089.5" y="819.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.5" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.13%)</title><rect x="1089.5" y="803.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.5" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (10 samples, 0.13%)</title><rect x="1089.5" y="787.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1092.5" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.09%)</title><rect x="1089.6" y="771.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1092.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.07%)</title><rect x="1089.8" y="755.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1092.8" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="1089.8" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.8" y="750.0"></text>
</g>
<g>
<title>__memset_avx2 (2 samples, 0.03%)</title><rect x="1090.2" y="739.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1093.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1091.2" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1094.2" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1091.2" y="803.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.2" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1091.2" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1094.2" y="798.0"></text>
</g>
<g>
<title>_new_array_Java (2 samples, 0.03%)</title><rect x="1091.6" y="819.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1094.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.20%)</title><rect x="1091.9" y="819.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1094.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (14 samples, 0.18%)</title><rect x="1091.9" y="803.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1094.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (14 samples, 0.18%)</title><rect x="1091.9" y="787.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1094.9" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.12%)</title><rect x="1092.5" y="771.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1095.5" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.09%)</title><rect x="1092.9" y="755.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1095.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.08%)</title><rect x="1092.9" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.9" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.08%)</title><rect x="1092.9" y="723.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1093.3" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1096.3" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.03%)</title><rect x="1094.4" y="819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1097.4" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (420 samples, 5.50%)</title><rect x="1094.7" y="867.0" width="64.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1097.7" y="878.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (419 samples, 5.48%)</title><rect x="1094.9" y="851.0" width="64.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1097.9" y="862.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (57 samples, 0.75%)</title><rect x="1099.3" y="835.0" width="8.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1102.3" y="846.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.07%)</title><rect x="1100.3" y="819.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.3" y="830.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (6 samples, 0.08%)</title><rect x="1101.0" y="819.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.0" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (6 samples, 0.08%)</title><rect x="1102.0" y="819.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.0" y="830.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (4 samples, 0.05%)</title><rect x="1102.9" y="819.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1105.9" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (26 samples, 0.34%)</title><rect x="1103.5" y="819.0" width="4.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1106.5" y="830.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (10 samples, 0.13%)</title><rect x="1105.1" y="803.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.1" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (6 samples, 0.08%)</title><rect x="1106.6" y="803.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.6" y="814.0"></text>
</g>
<g>
<title>memmove@plt (3 samples, 0.04%)</title><rect x="1107.5" y="819.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1110.5" y="830.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.03%)</title><rect x="1108.1" y="835.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1111.1" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.04%)</title><rect x="1108.5" y="835.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1111.5" y="846.0"></text>
</g>
<g>
<title>recv (328 samples, 4.29%)</title><rect x="1108.9" y="835.0" width="50.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1111.9" y="846.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (242 samples, 3.17%)</title><rect x="1122.2" y="819.0" width="37.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1125.2" y="830.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (238 samples, 3.12%)</title><rect x="1122.2" y="803.0" width="36.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1125.2" y="814.0">do_..</text>
</g>
<g>
<title>sys_recvfrom (199 samples, 2.60%)</title><rect x="1128.2" y="787.0" width="30.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1131.2" y="798.0">sy..</text>
</g>
<g>
<title>SYSC_recvfrom (194 samples, 2.54%)</title><rect x="1128.2" y="771.0" width="30.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1131.2" y="782.0">SY..</text>
</g>
<g>
<title>import_single_range (3 samples, 0.04%)</title><rect x="1129.6" y="755.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1132.6" y="766.0"></text>
</g>
<g>
<title>inet_recvmsg (2 samples, 0.03%)</title><rect x="1130.1" y="755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1133.1" y="766.0"></text>
</g>
<g>
<title>sock_recvmsg (142 samples, 1.86%)</title><rect x="1130.4" y="755.0" width="21.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1133.4" y="766.0">s..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (7 samples, 0.09%)</title><rect x="1130.4" y="739.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1133.4" y="750.0"></text>
</g>
<g>
<title>inet_recvmsg (113 samples, 1.48%)</title><rect x="1131.5" y="739.0" width="17.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1134.5" y="750.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="1131.9" y="723.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1134.9" y="734.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.03%)</title><rect x="1132.4" y="723.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1135.4" y="734.0"></text>
</g>
<g>
<title>tcp_recvmsg (105 samples, 1.37%)</title><rect x="1132.7" y="723.0" width="16.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1135.7" y="734.0"></text>
</g>
<g>
<title>__kfree_skb (19 samples, 0.25%)</title><rect x="1135.9" y="707.0" width="3.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1138.9" y="718.0"></text>
</g>
<g>
<title>skb_release_all (17 samples, 0.22%)</title><rect x="1136.1" y="691.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1139.1" y="702.0"></text>
</g>
<g>
<title>skb_release_data (6 samples, 0.08%)</title><rect x="1136.3" y="675.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1139.3" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.04%)</title><rect x="1137.2" y="675.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1140.2" y="686.0"></text>
</g>
<g>
<title>sock_rfree (7 samples, 0.09%)</title><rect x="1137.6" y="675.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1140.6" y="686.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="1138.9" y="707.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1141.9" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.07%)</title><rect x="1139.2" y="707.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1142.2" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (4 samples, 0.05%)</title><rect x="1140.0" y="707.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1143.0" y="718.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="1140.7" y="707.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1143.7" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (40 samples, 0.52%)</title><rect x="1141.0" y="707.0" width="6.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1144.0" y="718.0"></text>
</g>
<g>
<title>__check_object_size (19 samples, 0.25%)</title><rect x="1141.2" y="691.0" width="2.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1144.2" y="702.0"></text>
</g>
<g>
<title>__virt_addr_valid (9 samples, 0.12%)</title><rect x="1142.7" y="675.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1145.7" y="686.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.04%)</title><rect x="1144.1" y="691.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1147.1" y="702.0"></text>
</g>
<g>
<title>_copy_to_iter (16 samples, 0.21%)</title><rect x="1144.6" y="691.0" width="2.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1147.6" y="702.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (11 samples, 0.14%)</title><rect x="1144.9" y="675.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1147.9" y="686.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (3 samples, 0.04%)</title><rect x="1146.6" y="675.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1149.6" y="686.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.03%)</title><rect x="1147.2" y="707.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1150.2" y="718.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (4 samples, 0.05%)</title><rect x="1147.5" y="707.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1150.5" y="718.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.05%)</title><rect x="1148.3" y="707.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1151.3" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (22 samples, 0.29%)</title><rect x="1148.9" y="739.0" width="3.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1151.9" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (19 samples, 0.25%)</title><rect x="1149.4" y="723.0" width="2.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1152.4" y="734.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (18 samples, 0.24%)</title><rect x="1149.5" y="707.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1152.5" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (17 samples, 0.22%)</title><rect x="1149.7" y="691.0" width="2.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1152.7" y="702.0"></text>
</g>
<g>
<title>sockfd_lookup_light (38 samples, 0.50%)</title><rect x="1152.3" y="755.0" width="5.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1155.3" y="766.0"></text>
</g>
<g>
<title>__fdget (21 samples, 0.27%)</title><rect x="1152.3" y="739.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1155.3" y="750.0"></text>
</g>
<g>
<title>__fget_light (21 samples, 0.27%)</title><rect x="1152.3" y="723.0" width="3.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1155.3" y="734.0"></text>
</g>
<g>
<title>__fget (21 samples, 0.27%)</title><rect x="1152.3" y="707.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1155.3" y="718.0"></text>
</g>
<g>
<title>__fget_light (17 samples, 0.22%)</title><rect x="1155.6" y="739.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1158.6" y="750.0"></text>
</g>
<g>
<title>import_single_range (4 samples, 0.05%)</title><rect x="1158.3" y="771.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1161.3" y="782.0"></text>
</g>
<g>
<title>sys_recvfrom (4 samples, 0.05%)</title><rect x="1159.0" y="803.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1162.0" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.07%)</title><rect x="1159.6" y="883.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="894.0"></text>
</g>
<g>
<title>start_thread (192 samples, 2.51%)</title><rect x="1160.3" y="915.0" width="29.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1163.3" y="926.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (192 samples, 2.51%)</title><rect x="1160.3" y="899.0" width="29.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1163.3" y="910.0">th..</text>
</g>
<g>
<title>GangWorker::loop() (179 samples, 2.34%)</title><rect x="1160.3" y="883.0" width="27.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.3" y="894.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (173 samples, 2.26%)</title><rect x="1160.3" y="867.0" width="26.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.3" y="878.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (137 samples, 1.79%)</title><rect x="1160.3" y="851.0" width="21.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.3" y="862.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 0.04%)</title><rect x="1160.3" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.3" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.03%)</title><rect x="1160.5" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.5" y="830.0"></text>
</g>
<g>
<title>SpinPause (134 samples, 1.75%)</title><rect x="1160.8" y="835.0" width="20.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1163.8" y="846.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.08%)</title><rect x="1181.5" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="862.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.08%)</title><rect x="1181.5" y="835.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.5" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.08%)</title><rect x="1181.5" y="819.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.08%)</title><rect x="1181.5" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.5" y="814.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.08%)</title><rect x="1181.5" y="787.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (6 samples, 0.08%)</title><rect x="1181.5" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.5" y="782.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (5 samples, 0.07%)</title><rect x="1181.5" y="755.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.03%)</title><rect x="1182.0" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (27 samples, 0.35%)</title><rect x="1182.6" y="851.0" width="4.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (23 samples, 0.30%)</title><rect x="1182.7" y="835.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.7" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (21 samples, 0.27%)</title><rect x="1183.0" y="819.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="830.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (18 samples, 0.24%)</title><rect x="1183.4" y="803.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="814.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (5 samples, 0.07%)</title><rect x="1183.4" y="787.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="798.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (4 samples, 0.05%)</title><rect x="1183.5" y="771.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.5" y="782.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (3 samples, 0.04%)</title><rect x="1183.7" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="766.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (3 samples, 0.04%)</title><rect x="1183.7" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="750.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (8 samples, 0.10%)</title><rect x="1184.3" y="787.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="798.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (5 samples, 0.07%)</title><rect x="1184.7" y="771.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="782.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (3 samples, 0.04%)</title><rect x="1184.9" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.03%)</title><rect x="1185.1" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="750.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.03%)</title><rect x="1185.5" y="787.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.5" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (2 samples, 0.03%)</title><rect x="1186.4" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.4" y="846.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (6 samples, 0.08%)</title><rect x="1187.1" y="867.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="878.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (6 samples, 0.08%)</title><rect x="1187.1" y="851.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.63] (2 samples, 0.03%)</title><rect x="1187.1" y="835.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (4 samples, 0.05%)</title><rect x="1187.4" y="835.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.4" y="846.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (3 samples, 0.04%)</title><rect x="1187.5" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.5" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (10 samples, 0.13%)</title><rect x="1188.0" y="883.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="894.0"></text>
</g>
<g>
<title>VMThread::loop() (10 samples, 0.13%)</title><rect x="1188.0" y="867.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.54] (10 samples, 0.13%)</title><rect x="1188.0" y="851.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (10 samples, 0.13%)</title><rect x="1188.0" y="835.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="846.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (10 samples, 0.13%)</title><rect x="1188.0" y="819.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (10 samples, 0.13%)</title><rect x="1188.0" y="803.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (2 samples, 0.03%)</title><rect x="1188.0" y="787.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.0" y="798.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.03%)</title><rect x="1188.0" y="771.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="782.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title><rect x="1188.0" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.0" y="766.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.03%)</title><rect x="1188.0" y="739.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1191.0" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (3 samples, 0.04%)</title><rect x="1188.3" y="787.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="798.0"></text>
</g>
<g>
<title>WatcherThread::run() (3 samples, 0.04%)</title><rect x="1189.5" y="883.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.5" y="894.0"></text>
</g>
</g>
</svg>
