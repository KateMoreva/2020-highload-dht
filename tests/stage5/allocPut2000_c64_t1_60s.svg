<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="421"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="421"> </text>
<g id="frames">
<g>
<title>all (419,310 samples, 100.00%)</title><rect x="10.0" y="387.0" width="1180.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="13.0" y="398.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (260,310 samples, 62.08%)</title><rect x="10.0" y="371.0" width="732.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (260,310 samples, 62.08%)</title><rect x="10.0" y="355.0" width="732.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="366.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (260,310 samples, 62.08%)</title><rect x="10.0" y="339.0" width="732.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="350.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (15,904 samples, 3.79%)</title><rect x="10.0" y="323.0" width="44.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (15,904 samples, 3.79%)</title><rect x="10.0" y="307.0" width="44.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="318.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (15,344 samples, 3.66%)</title><rect x="10.0" y="291.0" width="43.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="302.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (15,344 samples, 3.66%)</title><rect x="10.0" y="275.0" width="43.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="286.0">java..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (15,344 samples, 3.66%)</title><rect x="10.0" y="259.0" width="43.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="13.0" y="270.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (560 samples, 0.13%)</title><rect x="53.2" y="291.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (560 samples, 0.13%)</title><rect x="53.2" y="275.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (560 samples, 0.13%)</title><rect x="53.2" y="259.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (560 samples, 0.13%)</title><rect x="53.2" y="243.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.2" y="254.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (560 samples, 0.13%)</title><rect x="53.2" y="227.0" width="1.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="56.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$66/1288711039.run (244,406 samples, 58.29%)</title><rect x="54.8" y="323.0" width="687.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.8" y="334.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$66/1288711039.run</text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.lambda$entity$1 (244,406 samples, 58.29%)</title><rect x="54.8" y="307.0" width="687.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.8" y="318.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.lambda$entity$1</text>
</g>
<g>
<title>java/lang/String.getBytes (1,720 samples, 0.41%)</title><rect x="54.8" y="291.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1,720 samples, 0.41%)</title><rect x="54.8" y="275.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1,720 samples, 0.41%)</title><rect x="54.8" y="259.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.8" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,720 samples, 0.41%)</title><rect x="54.8" y="243.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.8" y="254.0"></text>
</g>
<g>
<title>byte[] (1,720 samples, 0.41%)</title><rect x="54.8" y="227.0" width="4.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="57.8" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,167 samples, 0.76%)</title><rect x="59.6" y="291.0" width="8.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,167 samples, 0.76%)</title><rect x="59.6" y="275.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.6" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,167 samples, 0.76%)</title><rect x="59.6" y="259.0" width="8.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="62.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.isProxied (10,693 samples, 2.55%)</title><rect x="68.5" y="291.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="71.5" y="302.0">ru..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10,693 samples, 2.55%)</title><rect x="68.5" y="275.0" width="30.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.5" y="286.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (10,693 samples, 2.55%)</title><rect x="68.5" y="259.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="71.5" y="270.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (10,693 samples, 2.55%)</title><rect x="68.5" y="243.0" width="30.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.5" y="254.0">ja..</text>
</g>
<g>
<title>java.lang.String (6,671 samples, 1.59%)</title><rect x="68.5" y="227.0" width="18.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="71.5" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,022 samples, 0.96%)</title><rect x="87.3" y="227.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.3" y="238.0"></text>
</g>
<g>
<title>byte[] (4,022 samples, 0.96%)</title><rect x="87.3" y="211.0" width="11.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="90.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.defineMethod (225,608 samples, 53.80%)</title><rect x="98.6" y="291.0" width="634.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="101.6" y="302.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.defineMethod</text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.putMethod (225,608 samples, 53.80%)</title><rect x="98.6" y="275.0" width="634.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.6" y="286.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.putMethod</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (242 samples, 0.06%)</title><rect x="98.6" y="259.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.6" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (242 samples, 0.06%)</title><rect x="98.6" y="243.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="101.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$68/1567649937.get$Lambda (242 samples, 0.06%)</title><rect x="98.6" y="227.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="101.6" y="238.0"></text>
</g>
<g>
<title>ru.mail.polis.service.kate.moreva.MySimpleHttpServer$$Lambda$68 (242 samples, 0.06%)</title><rect x="98.6" y="211.0" width="0.7" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="101.6" y="222.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1,485 samples, 0.35%)</title><rect x="99.3" y="259.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.3" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (487 samples, 0.12%)</title><rect x="99.3" y="243.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.3" y="254.0"></text>
</g>
<g>
<title>java.util.ArrayList$ArrayListSpliterator (487 samples, 0.12%)</title><rect x="99.3" y="227.0" width="1.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="102.3" y="238.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (998 samples, 0.24%)</title><rect x="100.7" y="243.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.7" y="254.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (998 samples, 0.24%)</title><rect x="100.7" y="227.0" width="2.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="103.7" y="238.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.toList (558 samples, 0.13%)</title><rect x="103.5" y="259.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.5" y="270.0"></text>
</g>
<g>
<title>java.util.stream.Collectors$CollectorImpl (558 samples, 0.13%)</title><rect x="103.5" y="243.0" width="1.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="106.5" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2,345 samples, 0.56%)</title><rect x="105.0" y="259.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="108.0" y="270.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2,345 samples, 0.56%)</title><rect x="105.0" y="243.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="108.0" y="254.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2,345 samples, 0.56%)</title><rect x="105.0" y="227.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.0" y="238.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1,796 samples, 0.43%)</title><rect x="105.0" y="211.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.0" y="222.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1,463 samples, 0.35%)</title><rect x="105.0" y="195.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="108.0" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (1,119 samples, 0.27%)</title><rect x="105.0" y="179.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.0" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1,119 samples, 0.27%)</title><rect x="105.0" y="163.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.0" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1,119 samples, 0.27%)</title><rect x="105.0" y="147.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="108.0" y="158.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$72/998018245.accept (1,119 samples, 0.27%)</title><rect x="105.0" y="131.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.0" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,119 samples, 0.27%)</title><rect x="105.0" y="115.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.0" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,119 samples, 0.27%)</title><rect x="105.0" y="99.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.0" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,119 samples, 0.27%)</title><rect x="105.0" y="83.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="108.0" y="94.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,119 samples, 0.27%)</title><rect x="105.0" y="67.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.0" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,119 samples, 0.27%)</title><rect x="105.0" y="51.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.0" y="62.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,119 samples, 0.27%)</title><rect x="105.0" y="35.0" width="3.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="108.0" y="46.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (344 samples, 0.08%)</title><rect x="108.2" y="179.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.2" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (344 samples, 0.08%)</title><rect x="108.2" y="163.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.2" y="174.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$71/901477378.get (344 samples, 0.08%)</title><rect x="108.2" y="147.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="111.2" y="158.0"></text>
</g>
<g>
<title>java.util.ArrayList (344 samples, 0.08%)</title><rect x="108.2" y="131.0" width="0.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="111.2" y="142.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (333 samples, 0.08%)</title><rect x="109.1" y="195.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="112.1" y="206.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (333 samples, 0.08%)</title><rect x="109.1" y="179.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.1" y="190.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2$1 (333 samples, 0.08%)</title><rect x="109.1" y="163.0" width="1.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="112.1" y="174.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (549 samples, 0.13%)</title><rect x="110.1" y="211.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="113.1" y="222.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.makeSink (549 samples, 0.13%)</title><rect x="110.1" y="195.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="113.1" y="206.0"></text>
</g>
<g>
<title>java.util.stream.ReduceOps$3ReducingSink (549 samples, 0.13%)</title><rect x="110.1" y="179.0" width="1.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="113.1" y="190.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (1,547 samples, 0.37%)</title><rect x="111.6" y="259.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="114.6" y="270.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (1,547 samples, 0.37%)</title><rect x="111.6" y="243.0" width="4.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="114.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.correctReplication (4,782 samples, 1.14%)</title><rect x="116.0" y="259.0" width="13.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="119.0" y="270.0"></text>
</g>
<g>
<title>one.nio.http.Response (438 samples, 0.10%)</title><rect x="116.0" y="243.0" width="1.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="119.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2,774 samples, 0.66%)</title><rect x="117.2" y="243.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="120.2" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (2,774 samples, 0.66%)</title><rect x="117.2" y="227.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="120.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,818 samples, 0.43%)</title><rect x="117.2" y="211.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.2" y="222.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,818 samples, 0.43%)</title><rect x="117.2" y="195.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="120.2" y="206.0"></text>
</g>
<g>
<title>byte[] (1,818 samples, 0.43%)</title><rect x="117.2" y="179.0" width="5.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="120.2" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (956 samples, 0.23%)</title><rect x="122.3" y="211.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.3" y="222.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (956 samples, 0.23%)</title><rect x="122.3" y="195.0" width="2.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="125.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1,570 samples, 0.37%)</title><rect x="125.0" y="243.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.0" y="254.0"></text>
</g>
<g>
<title>byte[] (572 samples, 0.14%)</title><rect x="125.0" y="227.0" width="1.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="128.0" y="238.0"></text>
</g>
<g>
<title>java.lang.String[] (563 samples, 0.13%)</title><rect x="126.6" y="227.0" width="1.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="129.6" y="238.0"></text>
</g>
<g>
<title>java.lang.String (435 samples, 0.10%)</title><rect x="128.2" y="227.0" width="1.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="131.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.putEntity (33,415 samples, 7.97%)</title><rect x="129.4" y="259.0" width="94.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.4" y="270.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,188 samples, 0.76%)</title><rect x="129.4" y="243.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="132.4" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3,188 samples, 0.76%)</title><rect x="129.4" y="227.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="132.4" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,188 samples, 0.76%)</title><rect x="129.4" y="211.0" width="9.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="132.4" y="222.0"></text>
</g>
<g>
<title>one.nio.http.Response (1,749 samples, 0.42%)</title><rect x="138.4" y="243.0" width="4.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="141.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (10,739 samples, 2.56%)</title><rect x="143.3" y="243.0" width="30.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.3" y="254.0">on..</text>
</g>
<g>
<title>byte[] (4,769 samples, 1.14%)</title><rect x="143.3" y="227.0" width="13.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="146.3" y="238.0"></text>
</g>
<g>
<title>java.lang.String[] (3,349 samples, 0.80%)</title><rect x="156.8" y="227.0" width="9.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="159.8" y="238.0"></text>
</g>
<g>
<title>java.lang.String (2,621 samples, 0.63%)</title><rect x="166.2" y="227.0" width="7.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="169.2" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.upsert (17,739 samples, 4.23%)</title><rect x="173.6" y="243.0" width="49.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.6" y="254.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3,417 samples, 0.81%)</title><rect x="173.6" y="227.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="176.6" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3,417 samples, 0.81%)</title><rect x="173.6" y="211.0" width="9.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="176.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool.upsert (14,322 samples, 3.42%)</title><rect x="183.2" y="227.0" width="40.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.2" y="238.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3,937 samples, 0.94%)</title><rect x="183.2" y="211.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="186.2" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,937 samples, 0.94%)</title><rect x="183.2" y="195.0" width="11.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="186.2" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (3,748 samples, 0.89%)</title><rect x="194.3" y="211.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="197.3" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3,748 samples, 0.89%)</title><rect x="194.3" y="195.0" width="10.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="197.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (201 samples, 0.05%)</title><rect x="204.8" y="211.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (201 samples, 0.05%)</title><rect x="204.8" y="195.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (201 samples, 0.05%)</title><rect x="204.8" y="179.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.8" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (187 samples, 0.04%)</title><rect x="204.8" y="163.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.8" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (187 samples, 0.04%)</title><rect x="204.8" y="147.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.8" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (106 samples, 0.03%)</title><rect x="204.8" y="131.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.8" y="142.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (106 samples, 0.03%)</title><rect x="204.8" y="115.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="207.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.upsert (6,436 samples, 1.53%)</title><rect x="205.4" y="211.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.4" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Value (2,279 samples, 0.54%)</title><rect x="205.4" y="195.0" width="6.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="208.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.changeSize (4,157 samples, 0.99%)</title><rect x="211.8" y="195.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="214.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (4,157 samples, 0.99%)</title><rect x="211.8" y="179.0" width="11.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="214.8" y="190.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4,157 samples, 0.99%)</title><rect x="211.8" y="163.0" width="11.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="214.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MyRequestHelper.sendLoggedResponse (34,427 samples, 8.21%)</title><rect x="223.5" y="259.0" width="96.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.5" y="270.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (34,427 samples, 8.21%)</title><rect x="223.5" y="243.0" width="96.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.5" y="254.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (34,427 samples, 8.21%)</title><rect x="223.5" y="227.0" width="96.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.5" y="238.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (22,350 samples, 5.33%)</title><rect x="223.5" y="211.0" width="62.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="226.5" y="222.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (22,350 samples, 5.33%)</title><rect x="223.5" y="195.0" width="62.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.5" y="206.0">one/ni..</text>
</g>
<g>
<title>byte[] (11,630 samples, 2.77%)</title><rect x="223.5" y="179.0" width="32.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="226.5" y="190.0">by..</text>
</g>
<g>
<title>byte[] (10,720 samples, 2.56%)</title><rect x="256.2" y="179.0" width="30.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="259.2" y="190.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (12,077 samples, 2.88%)</title><rect x="286.4" y="211.0" width="34.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.4" y="222.0">on..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (12,077 samples, 2.88%)</title><rect x="286.4" y="195.0" width="34.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="289.4" y="206.0">on..</text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.replication (146,807 samples, 35.01%)</title><rect x="320.4" y="259.0" width="413.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.4" y="270.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.repl..</text>
</g>
<g>
<title>java.util.ArrayList (177 samples, 0.04%)</title><rect x="320.4" y="243.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="323.4" y="254.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (252 samples, 0.06%)</title><rect x="320.9" y="243.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.9" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (252 samples, 0.06%)</title><rect x="320.9" y="227.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="323.9" y="238.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (537 samples, 0.13%)</title><rect x="321.6" y="243.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (427 samples, 0.10%)</title><rect x="321.6" y="227.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.6" y="238.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (427 samples, 0.10%)</title><rect x="321.6" y="211.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="324.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (110 samples, 0.03%)</title><rect x="322.8" y="227.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.8" y="238.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet (110 samples, 0.03%)</title><rect x="322.8" y="211.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="325.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/ModuleTopology.primaryFor (1,808 samples, 0.43%)</title><rect x="323.1" y="243.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.1" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (489 samples, 0.12%)</title><rect x="323.1" y="227.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.1" y="238.0"></text>
</g>
<g>
<title>java.util.HashMap (489 samples, 0.12%)</title><rect x="323.1" y="211.0" width="1.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="326.1" y="222.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1,314 samples, 0.31%)</title><rect x="324.5" y="227.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.5" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1,314 samples, 0.31%)</title><rect x="324.5" y="211.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.5" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1,314 samples, 0.31%)</title><rect x="324.5" y="195.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.5" y="206.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (781 samples, 0.19%)</title><rect x="324.5" y="179.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.5" y="190.0"></text>
</g>
<g>
<title>java.util.HashMap$Node (781 samples, 0.19%)</title><rect x="324.5" y="163.0" width="2.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="327.5" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (533 samples, 0.13%)</title><rect x="326.7" y="179.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.7" y="190.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (533 samples, 0.13%)</title><rect x="326.7" y="163.0" width="1.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="329.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.proxy (144,033 samples, 34.35%)</title><rect x="328.2" y="243.0" width="405.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.2" y="254.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.pr..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,582 samples, 0.38%)</title><rect x="328.2" y="227.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.2" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/689401025.invoke (1,582 samples, 0.38%)</title><rect x="328.2" y="211.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.2" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,582 samples, 0.38%)</title><rect x="328.2" y="195.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="331.2" y="206.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (490 samples, 0.12%)</title><rect x="328.2" y="179.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String (490 samples, 0.12%)</title><rect x="328.2" y="163.0" width="1.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="331.2" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1,092 samples, 0.26%)</title><rect x="329.5" y="179.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1,092 samples, 0.26%)</title><rect x="329.5" y="163.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.5" y="174.0"></text>
</g>
<g>
<title>byte[] (1,092 samples, 0.26%)</title><rect x="329.5" y="147.0" width="3.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="332.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (142,451 samples, 33.97%)</title><rect x="332.6" y="227.0" width="400.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.6" y="238.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (142,451 samples, 33.97%)</title><rect x="332.6" y="211.0" width="400.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="335.6" y="222.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (785 samples, 0.19%)</title><rect x="332.6" y="195.0" width="2.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="335.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (121,810 samples, 29.05%)</title><rect x="334.8" y="195.0" width="342.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="337.8" y="206.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (16,624 samples, 3.96%)</title><rect x="334.8" y="179.0" width="46.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="337.8" y="190.0">byte[]</text>
</g>
<g>
<title>byte[] (105,186 samples, 25.09%)</title><rect x="381.6" y="179.0" width="296.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="384.6" y="190.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (13,066 samples, 3.12%)</title><rect x="677.6" y="195.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="680.6" y="206.0">one..</text>
</g>
<g>
<title>byte[] (421 samples, 0.10%)</title><rect x="677.6" y="179.0" width="1.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="680.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (889 samples, 0.21%)</title><rect x="678.8" y="179.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="681.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (889 samples, 0.21%)</title><rect x="678.8" y="163.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="681.8" y="174.0"></text>
</g>
<g>
<title>java.lang.String (431 samples, 0.10%)</title><rect x="678.8" y="147.0" width="1.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="681.8" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (458 samples, 0.11%)</title><rect x="680.0" y="147.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="683.0" y="158.0"></text>
</g>
<g>
<title>byte[] (458 samples, 0.11%)</title><rect x="680.0" y="131.0" width="1.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="683.0" y="142.0"></text>
</g>
<g>
<title>one.nio.http.Response (260 samples, 0.06%)</title><rect x="681.3" y="179.0" width="0.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="684.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (9,616 samples, 2.29%)</title><rect x="682.0" y="179.0" width="27.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="685.0" y="190.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (9,616 samples, 2.29%)</title><rect x="682.0" y="163.0" width="27.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="685.0" y="174.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (9,616 samples, 2.29%)</title><rect x="682.0" y="147.0" width="27.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="685.0" y="158.0">o..</text>
</g>
<g>
<title>char[] (4,840 samples, 1.15%)</title><rect x="682.0" y="131.0" width="13.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="685.0" y="142.0"></text>
</g>
<g>
<title>java.lang.String (2,051 samples, 0.49%)</title><rect x="695.7" y="131.0" width="5.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="698.7" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,725 samples, 0.65%)</title><rect x="701.4" y="131.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="704.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,725 samples, 0.65%)</title><rect x="701.4" y="115.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,725 samples, 0.65%)</title><rect x="701.4" y="99.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="704.4" y="110.0"></text>
</g>
<g>
<title>byte[] (2,725 samples, 0.65%)</title><rect x="701.4" y="83.0" width="7.7" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="704.4" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (483 samples, 0.12%)</title><rect x="709.1" y="179.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="712.1" y="190.0"></text>
</g>
<g>
<title>java.lang.String[] (483 samples, 0.12%)</title><rect x="709.1" y="163.0" width="1.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="712.1" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1,397 samples, 0.33%)</title><rect x="710.5" y="179.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="713.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,397 samples, 0.33%)</title><rect x="710.5" y="163.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.5" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,397 samples, 0.33%)</title><rect x="710.5" y="147.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.5" y="158.0"></text>
</g>
<g>
<title>java.lang.String (731 samples, 0.17%)</title><rect x="710.5" y="131.0" width="2.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="713.5" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (666 samples, 0.16%)</title><rect x="712.5" y="131.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="715.5" y="142.0"></text>
</g>
<g>
<title>byte[] (666 samples, 0.16%)</title><rect x="712.5" y="115.0" width="1.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="715.5" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4,708 samples, 1.12%)</title><rect x="714.4" y="195.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.4" y="206.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4,708 samples, 1.12%)</title><rect x="714.4" y="179.0" width="13.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.4" y="190.0"></text>
</g>
<g>
<title>byte[] (4,702 samples, 1.12%)</title><rect x="714.4" y="163.0" width="13.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="717.4" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1,553 samples, 0.37%)</title><rect x="727.6" y="195.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="730.6" y="206.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,553 samples, 0.37%)</title><rect x="727.6" y="179.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="730.6" y="190.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,553 samples, 0.37%)</title><rect x="727.6" y="163.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.6" y="174.0"></text>
</g>
<g>
<title>java.lang.String (691 samples, 0.16%)</title><rect x="727.6" y="147.0" width="2.0" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="730.6" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (862 samples, 0.21%)</title><rect x="729.6" y="147.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="732.6" y="158.0"></text>
</g>
<g>
<title>byte[] (862 samples, 0.21%)</title><rect x="729.6" y="131.0" width="2.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="732.6" y="142.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (529 samples, 0.13%)</title><rect x="732.0" y="195.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="735.0" y="206.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (529 samples, 0.13%)</title><rect x="732.0" y="179.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="735.0" y="190.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (529 samples, 0.13%)</title><rect x="732.0" y="163.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="735.0" y="174.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (529 samples, 0.13%)</title><rect x="732.0" y="147.0" width="1.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="735.0" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/Replicas.quorum (3,218 samples, 0.77%)</title><rect x="733.5" y="291.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="736.5" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.service.kate.moreva.Replicas (3,218 samples, 0.77%)</title><rect x="733.5" y="275.0" width="9.1" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="736.5" y="286.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (158,996 samples, 37.92%)</title><rect x="742.6" y="371.0" width="447.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="745.6" y="382.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5,429 samples, 1.29%)</title><rect x="742.6" y="355.0" width="15.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="745.6" y="366.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (5,429 samples, 1.29%)</title><rect x="742.6" y="339.0" width="15.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="745.6" y="350.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (153,567 samples, 36.62%)</title><rect x="757.8" y="355.0" width="432.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="760.8" y="366.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (153,567 samples, 36.62%)</title><rect x="757.8" y="339.0" width="432.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="760.8" y="350.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (153,528 samples, 36.61%)</title><rect x="757.8" y="323.0" width="432.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.8" y="334.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (12,909 samples, 3.08%)</title><rect x="757.8" y="307.0" width="36.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.8" y="318.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (12,909 samples, 3.08%)</title><rect x="757.8" y="291.0" width="36.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.8" y="302.0">one..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (7,923 samples, 1.89%)</title><rect x="757.8" y="275.0" width="22.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.8" y="286.0">R..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4,926 samples, 1.17%)</title><rect x="757.8" y="259.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="760.8" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4,926 samples, 1.17%)</title><rect x="757.8" y="243.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="760.8" y="254.0"></text>
</g>
<g>
<title>java/lang/String.substring (4,926 samples, 1.17%)</title><rect x="757.8" y="227.0" width="13.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="760.8" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,926 samples, 1.17%)</title><rect x="757.8" y="211.0" width="13.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="760.8" y="222.0"></text>
</g>
<g>
<title>java.lang.String (2,498 samples, 0.60%)</title><rect x="757.8" y="195.0" width="7.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="760.8" y="206.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,428 samples, 0.58%)</title><rect x="764.9" y="195.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.9" y="206.0"></text>
</g>
<g>
<title>byte[] (2,428 samples, 0.58%)</title><rect x="764.9" y="179.0" width="6.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="767.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.entity (2,997 samples, 0.71%)</title><rect x="771.7" y="259.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="774.7" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1236802685.linkToTargetMethod (2,691 samples, 0.64%)</title><rect x="771.7" y="243.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="774.7" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,691 samples, 0.64%)</title><rect x="771.7" y="227.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="774.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$66/1288711039.get$Lambda (2,691 samples, 0.64%)</title><rect x="771.7" y="211.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="774.7" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.service.kate.moreva.MySimpleHttpServer$$Lambda$66 (2,691 samples, 0.64%)</title><rect x="771.7" y="195.0" width="7.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="774.7" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (306 samples, 0.07%)</title><rect x="779.3" y="243.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="782.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (306 samples, 0.07%)</title><rect x="779.3" y="227.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="782.3" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (306 samples, 0.07%)</title><rect x="779.3" y="211.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.3" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (306 samples, 0.07%)</title><rect x="779.3" y="195.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="782.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (306 samples, 0.07%)</title><rect x="779.3" y="179.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="782.3" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (306 samples, 0.07%)</title><rect x="779.3" y="163.0" width="0.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="782.3" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4,986 samples, 1.19%)</title><rect x="780.1" y="275.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (4,986 samples, 1.19%)</title><rect x="780.1" y="259.0" width="14.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,986 samples, 1.19%)</title><rect x="780.1" y="243.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="783.1" y="254.0"></text>
</g>
<g>
<title>java.lang.String (3,440 samples, 0.82%)</title><rect x="780.1" y="227.0" width="9.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="783.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,546 samples, 0.37%)</title><rect x="789.8" y="227.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="792.8" y="238.0"></text>
</g>
<g>
<title>byte[] (1,546 samples, 0.37%)</title><rect x="789.8" y="211.0" width="4.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="792.8" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (67,324 samples, 16.06%)</title><rect x="794.2" y="307.0" width="189.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="797.2" y="318.0">one/nio/http/HttpSession...</text>
</g>
<g>
<title>one.nio.http.Request (4,349 samples, 1.04%)</title><rect x="794.2" y="291.0" width="12.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="797.2" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14,490 samples, 3.46%)</title><rect x="806.4" y="291.0" width="40.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.4" y="302.0">one..</text>
</g>
<g>
<title>java.lang.String[] (6,533 samples, 1.56%)</title><rect x="806.4" y="275.0" width="18.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="809.4" y="286.0"></text>
</g>
<g>
<title>java.lang.String[] (7,957 samples, 1.90%)</title><rect x="824.8" y="275.0" width="22.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="827.8" y="286.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (48,485 samples, 11.56%)</title><rect x="847.2" y="291.0" width="136.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="850.2" y="302.0">one/nio/util/Utf8..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (48,485 samples, 11.56%)</title><rect x="847.2" y="275.0" width="136.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.2" y="286.0">one/nio/util/Utf8..</text>
</g>
<g>
<title>char[] (39,224 samples, 9.35%)</title><rect x="847.2" y="259.0" width="110.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="850.2" y="270.0">char[]</text>
</g>
<g>
<title>char[] (1,475 samples, 0.35%)</title><rect x="957.6" y="259.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="960.6" y="270.0"></text>
</g>
<g>
<title>java.lang.String (1,527 samples, 0.36%)</title><rect x="961.7" y="259.0" width="4.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="964.7" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,259 samples, 1.49%)</title><rect x="966.0" y="259.0" width="17.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="969.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,259 samples, 1.49%)</title><rect x="966.0" y="243.0" width="17.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="969.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6,259 samples, 1.49%)</title><rect x="966.0" y="227.0" width="17.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="969.0" y="238.0"></text>
</g>
<g>
<title>byte[] (6,259 samples, 1.49%)</title><rect x="966.0" y="211.0" width="17.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="969.0" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (6,003 samples, 1.43%)</title><rect x="983.6" y="307.0" width="16.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="986.6" y="318.0"></text>
</g>
<g>
<title>byte[] (6,003 samples, 1.43%)</title><rect x="983.6" y="291.0" width="16.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="986.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4,062 samples, 0.97%)</title><rect x="1000.5" y="307.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1003.5" y="318.0"></text>
</g>
<g>
<title>java/lang/String.substring (4,062 samples, 0.97%)</title><rect x="1000.5" y="291.0" width="11.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1003.5" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,062 samples, 0.97%)</title><rect x="1000.5" y="275.0" width="11.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1003.5" y="286.0"></text>
</g>
<g>
<title>java.lang.String (2,059 samples, 0.49%)</title><rect x="1000.5" y="259.0" width="5.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1003.5" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,003 samples, 0.48%)</title><rect x="1006.3" y="259.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1009.3" y="270.0"></text>
</g>
<g>
<title>byte[] (2,003 samples, 0.48%)</title><rect x="1006.3" y="243.0" width="5.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1009.3" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (63,230 samples, 15.08%)</title><rect x="1012.0" y="307.0" width="177.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1015.0" y="318.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (63,230 samples, 15.08%)</title><rect x="1012.0" y="291.0" width="177.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1015.0" y="302.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (16,772 samples, 4.00%)</title><rect x="1012.0" y="275.0" width="47.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1015.0" y="286.0">char[]</text>
</g>
<g>
<title>char[] (9,698 samples, 2.31%)</title><rect x="1059.2" y="275.0" width="27.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1062.2" y="286.0">c..</text>
</g>
<g>
<title>java.lang.String (13,199 samples, 3.15%)</title><rect x="1086.4" y="275.0" width="37.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1089.4" y="286.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23,561 samples, 5.62%)</title><rect x="1123.6" y="275.0" width="66.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.6" y="286.0">java/la..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (23,561 samples, 5.62%)</title><rect x="1123.6" y="259.0" width="66.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1126.6" y="270.0">java/la..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (23,561 samples, 5.62%)</title><rect x="1123.6" y="243.0" width="66.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1126.6" y="254.0">java/la..</text>
</g>
<g>
<title>byte[] (22,551 samples, 5.38%)</title><rect x="1123.6" y="227.0" width="63.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1126.6" y="238.0">byte[]</text>
</g>
<g>
<title>byte[] (1,010 samples, 0.24%)</title><rect x="1187.0" y="227.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1190.0" y="238.0"></text>
</g>
</g>
</svg>
