<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="341"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="341"> </text>
<g id="frames">
<g>
<title>all (1,552,400 samples, 100.00%)</title><rect x="10.0" y="307.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="318.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (929,143 samples, 59.85%)</title><rect x="10.0" y="291.0" width="706.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (929,143 samples, 59.85%)</title><rect x="10.0" y="275.0" width="706.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (929,143 samples, 59.85%)</title><rect x="10.0" y="259.0" width="706.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (29,112 samples, 1.88%)</title><rect x="10.0" y="243.0" width="22.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (29,112 samples, 1.88%)</title><rect x="10.0" y="227.0" width="22.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (28,627 samples, 1.84%)</title><rect x="10.0" y="211.0" width="21.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="222.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (28,627 samples, 1.84%)</title><rect x="10.0" y="195.0" width="21.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="206.0">j..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (28,627 samples, 1.84%)</title><rect x="10.0" y="179.0" width="21.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="13.0" y="190.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (485 samples, 0.03%)</title><rect x="31.8" y="211.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="34.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (485 samples, 0.03%)</title><rect x="31.8" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (485 samples, 0.03%)</title><rect x="31.8" y="179.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (485 samples, 0.03%)</title><rect x="31.8" y="163.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.8" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (485 samples, 0.03%)</title><rect x="31.8" y="147.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="34.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$68/489816352.run (900,031 samples, 57.98%)</title><rect x="32.1" y="243.0" width="684.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.1" y="254.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$68/489816352.run</text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.lambda$entity$1 (900,031 samples, 57.98%)</title><rect x="32.1" y="227.0" width="684.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.1" y="238.0">ru/mail/polis/service/kate/moreva/MySimpleHttpServer.lambda$entity$1</text>
</g>
<g>
<title>java/lang/String.getBytes (29,442 samples, 1.90%)</title><rect x="32.1" y="211.0" width="22.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.1" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encode (29,442 samples, 1.90%)</title><rect x="32.1" y="195.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.1" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (29,442 samples, 1.90%)</title><rect x="32.1" y="179.0" width="22.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.1" y="190.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (29,442 samples, 1.90%)</title><rect x="32.1" y="163.0" width="22.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.1" y="174.0">j..</text>
</g>
<g>
<title>byte[] (29,442 samples, 1.90%)</title><rect x="32.1" y="147.0" width="22.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="35.1" y="158.0">b..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (40,511 samples, 2.61%)</title><rect x="54.5" y="211.0" width="30.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.5" y="222.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (40,511 samples, 2.61%)</title><rect x="54.5" y="195.0" width="30.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.5" y="206.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (40,511 samples, 2.61%)</title><rect x="54.5" y="179.0" width="30.8" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="57.5" y="190.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.proxy (429,051 samples, 27.64%)</title><rect x="85.3" y="211.0" width="326.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="88.3" y="222.0">ru/mail/polis/service/kate/moreva/MySimpleHt..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,206 samples, 0.14%)</title><rect x="85.3" y="195.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.3" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/373182087.invoke (2,206 samples, 0.14%)</title><rect x="85.3" y="179.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.3" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,206 samples, 0.14%)</title><rect x="85.3" y="163.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.3" y="174.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (626 samples, 0.04%)</title><rect x="85.3" y="147.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.3" y="158.0"></text>
</g>
<g>
<title>java.lang.String (626 samples, 0.04%)</title><rect x="85.3" y="131.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="88.3" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (1,580 samples, 0.10%)</title><rect x="85.8" y="147.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.8" y="158.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (1,580 samples, 0.10%)</title><rect x="85.8" y="131.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.8" y="142.0"></text>
</g>
<g>
<title>byte[] (1,523 samples, 0.10%)</title><rect x="85.8" y="115.0" width="1.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="88.8" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (426,845 samples, 27.50%)</title><rect x="87.0" y="195.0" width="324.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.0" y="206.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (426,845 samples, 27.50%)</title><rect x="87.0" y="179.0" width="324.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.0" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (1,596 samples, 0.10%)</title><rect x="87.0" y="163.0" width="1.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="90.0" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (400,810 samples, 25.82%)</title><rect x="88.2" y="163.0" width="304.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.2" y="174.0">one/nio/http/HttpClient$ResponseReader.&lt;i..</text>
</g>
<g>
<title>byte[] (160,321 samples, 10.33%)</title><rect x="88.2" y="147.0" width="121.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="91.2" y="158.0">byte[]</text>
</g>
<g>
<title>byte[] (240,489 samples, 15.49%)</title><rect x="210.1" y="147.0" width="182.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="213.1" y="158.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (17,976 samples, 1.16%)</title><rect x="392.9" y="163.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="395.9" y="174.0"></text>
</g>
<g>
<title>byte[] (336 samples, 0.02%)</title><rect x="392.9" y="147.0" width="0.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="395.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,015 samples, 0.07%)</title><rect x="393.1" y="147.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.1" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,015 samples, 0.07%)</title><rect x="393.1" y="131.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="396.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String (407 samples, 0.03%)</title><rect x="393.1" y="115.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="396.1" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (608 samples, 0.04%)</title><rect x="393.4" y="115.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.4" y="126.0"></text>
</g>
<g>
<title>byte[] (608 samples, 0.04%)</title><rect x="393.4" y="99.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="396.4" y="110.0"></text>
</g>
<g>
<title>one.nio.http.Response (468 samples, 0.03%)</title><rect x="393.9" y="147.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="396.9" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (14,523 samples, 0.94%)</title><rect x="394.2" y="147.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.2" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,523 samples, 0.94%)</title><rect x="394.2" y="131.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.2" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,523 samples, 0.94%)</title><rect x="394.2" y="115.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.2" y="126.0"></text>
</g>
<g>
<title>char[] (10,287 samples, 0.66%)</title><rect x="394.2" y="99.0" width="7.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="397.2" y="110.0"></text>
</g>
<g>
<title>java.lang.String (1,872 samples, 0.12%)</title><rect x="402.1" y="99.0" width="1.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="405.1" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,364 samples, 0.15%)</title><rect x="403.5" y="99.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.5" y="110.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,364 samples, 0.15%)</title><rect x="403.5" y="83.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.5" y="94.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,364 samples, 0.15%)</title><rect x="403.5" y="67.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.5" y="78.0"></text>
</g>
<g>
<title>byte[] (2,364 samples, 0.15%)</title><rect x="403.5" y="51.0" width="1.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="406.5" y="62.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (605 samples, 0.04%)</title><rect x="405.3" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.3" y="158.0"></text>
</g>
<g>
<title>java.lang.String[] (605 samples, 0.04%)</title><rect x="405.3" y="131.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="408.3" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1,029 samples, 0.07%)</title><rect x="405.7" y="147.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,029 samples, 0.07%)</title><rect x="405.7" y="131.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,029 samples, 0.07%)</title><rect x="405.7" y="115.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="408.7" y="126.0"></text>
</g>
<g>
<title>java.lang.String (522 samples, 0.03%)</title><rect x="405.7" y="99.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="408.7" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (507 samples, 0.03%)</title><rect x="406.1" y="99.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.1" y="110.0"></text>
</g>
<g>
<title>byte[] (507 samples, 0.03%)</title><rect x="406.1" y="83.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="409.1" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (4,779 samples, 0.31%)</title><rect x="406.5" y="163.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.5" y="174.0"></text>
</g>
<g>
<title>one.nio.util.ByteArrayBuilder (723 samples, 0.05%)</title><rect x="406.5" y="147.0" width="0.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="409.5" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4,056 samples, 0.26%)</title><rect x="407.1" y="147.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="410.1" y="158.0"></text>
</g>
<g>
<title>byte[] (4,056 samples, 0.26%)</title><rect x="407.1" y="131.0" width="3.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="410.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1,155 samples, 0.07%)</title><rect x="410.2" y="163.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.2" y="174.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,155 samples, 0.07%)</title><rect x="410.2" y="147.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.2" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,155 samples, 0.07%)</title><rect x="410.2" y="131.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="413.2" y="142.0"></text>
</g>
<g>
<title>java.lang.String (483 samples, 0.03%)</title><rect x="410.2" y="115.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="413.2" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (672 samples, 0.04%)</title><rect x="410.5" y="115.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.5" y="126.0"></text>
</g>
<g>
<title>byte[] (672 samples, 0.04%)</title><rect x="410.5" y="99.0" width="0.5" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="413.5" y="110.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (526 samples, 0.03%)</title><rect x="411.0" y="163.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="414.0" y="174.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (526 samples, 0.03%)</title><rect x="411.0" y="147.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="414.0" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (526 samples, 0.03%)</title><rect x="411.0" y="131.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="414.0" y="142.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (526 samples, 0.03%)</title><rect x="411.0" y="115.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="414.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.proxyRequest (3,281 samples, 0.21%)</title><rect x="411.4" y="211.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.4" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3,281 samples, 0.21%)</title><rect x="411.4" y="195.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="414.4" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (3,281 samples, 0.21%)</title><rect x="411.4" y="179.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.4" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2,449 samples, 0.16%)</title><rect x="411.4" y="163.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.4" y="174.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,445 samples, 0.16%)</title><rect x="411.4" y="147.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="414.4" y="158.0"></text>
</g>
<g>
<title>byte[] (2,445 samples, 0.16%)</title><rect x="411.4" y="131.0" width="1.9" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="414.4" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (832 samples, 0.05%)</title><rect x="413.3" y="163.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.3" y="174.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (832 samples, 0.05%)</title><rect x="413.3" y="147.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="416.3" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.putMethod (397,738 samples, 25.62%)</title><rect x="413.9" y="211.0" width="302.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.9" y="222.0">ru/mail/polis/service/kate/moreva/MySimpl..</text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.putEntity (397,738 samples, 25.62%)</title><rect x="413.9" y="195.0" width="302.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="416.9" y="206.0">ru/mail/polis/service/kate/moreva/MySimpl..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (36,888 samples, 2.38%)</title><rect x="413.9" y="179.0" width="28.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="416.9" y="190.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (36,888 samples, 2.38%)</title><rect x="413.9" y="163.0" width="28.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.9" y="174.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (36,888 samples, 2.38%)</title><rect x="413.9" y="147.0" width="28.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="416.9" y="158.0">ja..</text>
</g>
<g>
<title>one.nio.http.Response (18,490 samples, 1.19%)</title><rect x="442.0" y="179.0" width="14.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="445.0" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (102,143 samples, 6.58%)</title><rect x="456.0" y="179.0" width="77.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="459.0" y="190.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (102,143 samples, 6.58%)</title><rect x="456.0" y="163.0" width="77.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="459.0" y="174.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (70,242 samples, 4.52%)</title><rect x="456.0" y="147.0" width="53.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.0" y="158.0">one/n..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (70,237 samples, 4.52%)</title><rect x="456.0" y="131.0" width="53.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.0" y="142.0">one/n..</text>
</g>
<g>
<title>byte[] (63,249 samples, 4.07%)</title><rect x="456.0" y="115.0" width="48.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="459.0" y="126.0">byte[]</text>
</g>
<g>
<title>byte[] (6,988 samples, 0.45%)</title><rect x="504.1" y="115.0" width="5.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="507.1" y="126.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (31,901 samples, 2.05%)</title><rect x="509.4" y="147.0" width="24.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="512.4" y="158.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (31,901 samples, 2.05%)</title><rect x="509.4" y="131.0" width="24.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="512.4" y="142.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (75,577 samples, 4.87%)</title><rect x="533.7" y="179.0" width="57.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="536.7" y="190.0">one/ni..</text>
</g>
<g>
<title>byte[] (31,725 samples, 2.04%)</title><rect x="533.7" y="163.0" width="24.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="536.7" y="174.0">b..</text>
</g>
<g>
<title>java.lang.String[] (24,865 samples, 1.60%)</title><rect x="557.8" y="163.0" width="18.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="560.8" y="174.0"></text>
</g>
<g>
<title>java.lang.String (18,807 samples, 1.21%)</title><rect x="576.7" y="163.0" width="14.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="579.7" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.upsert (164,640 samples, 10.61%)</title><rect x="591.1" y="179.0" width="125.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="594.1" y="190.0">ru/mail/polis/d..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (35,927 samples, 2.31%)</title><rect x="591.1" y="163.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.1" y="174.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (35,927 samples, 2.31%)</title><rect x="591.1" y="147.0" width="27.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="594.1" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/TablesPool.upsert (128,713 samples, 8.29%)</title><rect x="618.4" y="163.0" width="97.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="621.4" y="174.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (36,534 samples, 2.35%)</title><rect x="618.4" y="147.0" width="27.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.4" y="158.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (36,534 samples, 2.35%)</title><rect x="618.4" y="131.0" width="27.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="621.4" y="142.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (36,060 samples, 2.32%)</title><rect x="646.2" y="147.0" width="27.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="649.2" y="158.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (36,060 samples, 2.32%)</title><rect x="646.2" y="131.0" width="27.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="649.2" y="142.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1,162 samples, 0.07%)</title><rect x="673.6" y="147.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="676.6" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1,162 samples, 0.07%)</title><rect x="673.6" y="131.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="676.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1,162 samples, 0.07%)</title><rect x="673.6" y="115.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="676.6" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1,061 samples, 0.07%)</title><rect x="673.6" y="99.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="676.6" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1,061 samples, 0.07%)</title><rect x="673.6" y="83.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="676.6" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (609 samples, 0.04%)</title><rect x="673.6" y="67.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="676.6" y="78.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (609 samples, 0.04%)</title><rect x="673.6" y="51.0" width="0.5" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="676.6" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (452 samples, 0.03%)</title><rect x="674.1" y="67.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.1" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (452 samples, 0.03%)</title><rect x="674.1" y="51.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.1" y="62.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (452 samples, 0.03%)</title><rect x="674.1" y="35.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="677.1" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.upsert (54,957 samples, 3.54%)</title><rect x="674.5" y="147.0" width="41.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.5" y="158.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (429 samples, 0.03%)</title><rect x="674.5" y="131.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="677.5" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (429 samples, 0.03%)</title><rect x="674.5" y="115.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.5" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.kate.moreva.Value (18,503 samples, 1.19%)</title><rect x="674.8" y="131.0" width="14.1" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="677.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.changeSize (36,025 samples, 2.32%)</title><rect x="688.9" y="131.0" width="27.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="691.9" y="142.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (36,025 samples, 2.32%)</title><rect x="688.9" y="115.0" width="27.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="691.9" y="126.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (36,025 samples, 2.32%)</title><rect x="688.9" y="99.0" width="27.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="691.9" y="110.0">j..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (623,250 samples, 40.15%)</title><rect x="716.3" y="291.0" width="473.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.3" y="302.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (16,591 samples, 1.07%)</title><rect x="716.3" y="275.0" width="12.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="719.3" y="286.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (16,585 samples, 1.07%)</title><rect x="716.3" y="259.0" width="12.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="719.3" y="270.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (606,659 samples, 39.08%)</title><rect x="728.9" y="275.0" width="461.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="731.9" y="286.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (606,659 samples, 39.08%)</title><rect x="728.9" y="259.0" width="461.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="731.9" y="270.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (606,656 samples, 39.08%)</title><rect x="728.9" y="243.0" width="461.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.9" y="254.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (100,942 samples, 6.50%)</title><rect x="728.9" y="227.0" width="76.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="731.9" y="238.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (100,942 samples, 6.50%)</title><rect x="728.9" y="211.0" width="76.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.9" y="222.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (58,764 samples, 3.79%)</title><rect x="728.9" y="195.0" width="44.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="731.9" y="206.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (34,564 samples, 2.23%)</title><rect x="728.9" y="179.0" width="26.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="731.9" y="190.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (34,564 samples, 2.23%)</title><rect x="728.9" y="163.0" width="26.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="731.9" y="174.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (34,564 samples, 2.23%)</title><rect x="728.9" y="147.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="731.9" y="158.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (34,564 samples, 2.23%)</title><rect x="728.9" y="131.0" width="26.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.9" y="142.0">j..</text>
</g>
<g>
<title>java.lang.String (17,372 samples, 1.12%)</title><rect x="728.9" y="115.0" width="13.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="731.9" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17,192 samples, 1.11%)</title><rect x="742.1" y="115.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.1" y="126.0"></text>
</g>
<g>
<title>byte[] (17,192 samples, 1.11%)</title><rect x="742.1" y="99.0" width="13.0" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="745.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.entity (24,200 samples, 1.56%)</title><rect x="755.1" y="179.0" width="18.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="758.1" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (23,699 samples, 1.53%)</title><rect x="755.1" y="163.0" width="18.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.1" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (23,699 samples, 1.53%)</title><rect x="755.1" y="147.0" width="18.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="758.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer$$Lambda$68/489816352.get$Lambda (23,699 samples, 1.53%)</title><rect x="755.1" y="131.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="758.1" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.kate.moreva.MySimpleHttpServer$$Lambda$68 (23,699 samples, 1.53%)</title><rect x="755.1" y="115.0" width="18.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="758.1" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (497 samples, 0.03%)</title><rect x="773.2" y="163.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (493 samples, 0.03%)</title><rect x="773.2" y="147.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="776.2" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (493 samples, 0.03%)</title><rect x="773.2" y="131.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.2" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (493 samples, 0.03%)</title><rect x="773.2" y="115.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="776.2" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (493 samples, 0.03%)</title><rect x="773.2" y="99.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="776.2" y="110.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (493 samples, 0.03%)</title><rect x="773.2" y="83.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="776.2" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (42,178 samples, 2.72%)</title><rect x="773.5" y="195.0" width="32.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.5" y="206.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (42,178 samples, 2.72%)</title><rect x="773.5" y="179.0" width="32.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="776.5" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (42,178 samples, 2.72%)</title><rect x="773.5" y="163.0" width="32.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.5" y="174.0">ja..</text>
</g>
<g>
<title>java.lang.String (17,583 samples, 1.13%)</title><rect x="773.5" y="147.0" width="13.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="776.5" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (24,595 samples, 1.58%)</title><rect x="786.9" y="147.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="789.9" y="158.0"></text>
</g>
<g>
<title>byte[] (24,595 samples, 1.58%)</title><rect x="786.9" y="131.0" width="18.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="789.9" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (195,348 samples, 12.58%)</title><rect x="805.6" y="227.0" width="148.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.6" y="238.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one.nio.http.Request (30,946 samples, 1.99%)</title><rect x="805.6" y="211.0" width="23.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="808.6" y="222.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (62,231 samples, 4.01%)</title><rect x="829.1" y="211.0" width="47.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="832.1" y="222.0">one/..</text>
</g>
<g>
<title>java.lang.String[] (62,022 samples, 4.00%)</title><rect x="829.1" y="195.0" width="47.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="832.1" y="206.0">java..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (102,171 samples, 6.58%)</title><rect x="876.4" y="211.0" width="77.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.4" y="222.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (102,171 samples, 6.58%)</title><rect x="876.4" y="195.0" width="77.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="879.4" y="206.0">one/nio/u..</text>
</g>
<g>
<title>char[] (60,246 samples, 3.88%)</title><rect x="876.4" y="179.0" width="45.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="879.4" y="190.0">char[]</text>
</g>
<g>
<title>java.lang.String (14,458 samples, 0.93%)</title><rect x="922.2" y="179.0" width="11.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="925.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (27,462 samples, 1.77%)</title><rect x="933.2" y="179.0" width="20.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="936.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (27,462 samples, 1.77%)</title><rect x="933.2" y="163.0" width="20.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="936.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (27,462 samples, 1.77%)</title><rect x="933.2" y="147.0" width="20.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="936.2" y="158.0"></text>
</g>
<g>
<title>byte[] (27,462 samples, 1.77%)</title><rect x="933.2" y="131.0" width="20.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="936.2" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (23,462 samples, 1.51%)</title><rect x="954.1" y="227.0" width="17.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="957.1" y="238.0"></text>
</g>
<g>
<title>byte[] (23,462 samples, 1.51%)</title><rect x="954.1" y="211.0" width="17.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="957.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (33,631 samples, 2.17%)</title><rect x="971.9" y="227.0" width="25.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="974.9" y="238.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (33,631 samples, 2.17%)</title><rect x="971.9" y="211.0" width="25.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="974.9" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (33,631 samples, 2.17%)</title><rect x="971.9" y="195.0" width="25.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="974.9" y="206.0">j..</text>
</g>
<g>
<title>java.lang.String (16,218 samples, 1.04%)</title><rect x="971.9" y="179.0" width="12.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="974.9" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (17,413 samples, 1.12%)</title><rect x="984.2" y="179.0" width="13.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="987.2" y="190.0"></text>
</g>
<g>
<title>byte[] (17,413 samples, 1.12%)</title><rect x="984.2" y="163.0" width="13.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="987.2" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (253,273 samples, 16.31%)</title><rect x="997.5" y="227.0" width="192.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1000.5" y="238.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (253,273 samples, 16.31%)</title><rect x="997.5" y="211.0" width="192.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1000.5" y="222.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (125,329 samples, 8.07%)</title><rect x="997.5" y="195.0" width="95.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1000.5" y="206.0">char[]</text>
</g>
<g>
<title>char[] (453 samples, 0.03%)</title><rect x="1092.7" y="195.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1095.7" y="206.0"></text>
</g>
<g>
<title>java.lang.String (44,062 samples, 2.84%)</title><rect x="1093.1" y="195.0" width="33.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1096.1" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (83,429 samples, 5.37%)</title><rect x="1126.6" y="195.0" width="63.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.6" y="206.0">java/la..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (83,429 samples, 5.37%)</title><rect x="1126.6" y="179.0" width="63.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1129.6" y="190.0">java/la..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (83,429 samples, 5.37%)</title><rect x="1126.6" y="163.0" width="63.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1129.6" y="174.0">java/la..</text>
</g>
<g>
<title>byte[] (83,429 samples, 5.37%)</title><rect x="1126.6" y="147.0" width="63.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1129.6" y="158.0">byte[]</text>
</g>
</g>
</svg>
