<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (1,633 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>[C1 CompilerThre tid=30053] (3 samples, 0.18%)</title><rect x="10.0" y="899.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.06%)</title><rect x="10.0" y="883.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.12%)</title><rect x="10.7" y="883.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="13.7" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.12%)</title><rect x="10.7" y="867.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="13.7" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (2 samples, 0.12%)</title><rect x="10.7" y="851.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.7" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2 samples, 0.12%)</title><rect x="10.7" y="835.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.7" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.12%)</title><rect x="10.7" y="819.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.7" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.12%)</title><rect x="10.7" y="803.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="814.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.12%)</title><rect x="10.7" y="787.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.7" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.12%)</title><rect x="10.7" y="771.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.12%)</title><rect x="10.7" y="755.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.12%)</title><rect x="10.7" y="739.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.7" y="750.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (1 samples, 0.06%)</title><rect x="10.7" y="723.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.06%)</title><rect x="10.7" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.7" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.06%)</title><rect x="10.7" y="691.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.06%)</title><rect x="10.7" y="675.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.06%)</title><rect x="10.7" y="659.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.7" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.06%)</title><rect x="10.7" y="643.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.7" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.06%)</title><rect x="10.7" y="627.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.7" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.06%)</title><rect x="10.7" y="611.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.7" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.06%)</title><rect x="10.7" y="595.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.06%)</title><rect x="10.7" y="579.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.7" y="590.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.06%)</title><rect x="10.7" y="563.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.7" y="574.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.06%)</title><rect x="11.4" y="723.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.4" y="734.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.06%)</title><rect x="11.4" y="707.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.4" y="718.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.06%)</title><rect x="11.4" y="691.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.4" y="702.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.232] (1 samples, 0.06%)</title><rect x="11.4" y="675.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.4" y="686.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.06%)</title><rect x="11.4" y="659.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.4" y="670.0"></text>
</g>
<g>
<title>IntervalWalker::append_to_unhandled(Interval**, Interval*) (1 samples, 0.06%)</title><rect x="11.4" y="643.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.4" y="654.0"></text>
</g>
<g>
<title>[C2 CompilerThre tid=30052] (22 samples, 1.35%)</title><rect x="12.2" y="899.0" width="15.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="15.2" y="910.0"></text>
</g>
<g>
<title>start_thread (22 samples, 1.35%)</title><rect x="12.2" y="883.0" width="15.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="15.2" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (22 samples, 1.35%)</title><rect x="12.2" y="867.0" width="15.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="15.2" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (22 samples, 1.35%)</title><rect x="12.2" y="851.0" width="15.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.2" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (22 samples, 1.35%)</title><rect x="12.2" y="835.0" width="15.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="15.2" y="846.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (22 samples, 1.35%)</title><rect x="12.2" y="819.0" width="15.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.2" y="830.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (22 samples, 1.35%)</title><rect x="12.2" y="803.0" width="15.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.2" y="814.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (22 samples, 1.35%)</title><rect x="12.2" y="787.0" width="15.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.2" y="798.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (22 samples, 1.35%)</title><rect x="12.2" y="771.0" width="15.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.2" y="782.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 0.86%)</title><rect x="12.2" y="755.0" width="10.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="15.2" y="766.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.06%)</title><rect x="12.2" y="739.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="15.2" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.06%)</title><rect x="12.2" y="723.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="15.2" y="734.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.06%)</title><rect x="12.2" y="707.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.2" y="718.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.06%)</title><rect x="12.2" y="691.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.2" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.12%)</title><rect x="12.9" y="739.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.9" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.12%)</title><rect x="12.9" y="723.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.06%)</title><rect x="12.9" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="15.9" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.06%)</title><rect x="12.9" y="691.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.9" y="702.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.06%)</title><rect x="12.9" y="675.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="15.9" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.06%)</title><rect x="12.9" y="659.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.9" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="12.9" y="643.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.9" y="654.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="12.9" y="627.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.9" y="638.0"></text>
</g>
<g>
<title>ciBaseObject::ident() (1 samples, 0.06%)</title><rect x="12.9" y="611.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.9" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.06%)</title><rect x="13.6" y="707.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.6" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 0.67%)</title><rect x="14.3" y="739.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.3" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.18%)</title><rect x="14.3" y="723.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.3" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.06%)</title><rect x="14.3" y="707.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.12%)</title><rect x="15.1" y="707.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.1" y="718.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.12%)</title><rect x="15.1" y="691.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.06%)</title><rect x="16.5" y="723.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.5" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.06%)</title><rect x="16.5" y="707.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="19.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (1 samples, 0.06%)</title><rect x="17.2" y="723.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.2" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.06%)</title><rect x="17.2" y="707.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.18%)</title><rect x="17.9" y="723.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="20.9" y="734.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.06%)</title><rect x="19.4" y="707.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="22.4" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.12%)</title><rect x="20.1" y="723.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="23.1" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.06%)</title><rect x="21.6" y="723.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="24.6" y="734.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.06%)</title><rect x="21.6" y="707.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.6" y="718.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.06%)</title><rect x="21.6" y="691.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="24.6" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (6 samples, 0.37%)</title><rect x="22.3" y="755.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="25.3" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.06%)</title><rect x="22.3" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="25.3" y="750.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.06%)</title><rect x="22.3" y="723.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="25.3" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.06%)</title><rect x="23.0" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="26.0" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.06%)</title><rect x="23.0" y="723.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="26.0" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (2 samples, 0.12%)</title><rect x="23.7" y="739.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="26.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.06%)</title><rect x="23.7" y="723.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.7" y="734.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.06%)</title><rect x="23.7" y="707.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.06%)</title><rect x="24.5" y="723.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="27.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="24.5" y="707.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="27.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.06%)</title><rect x="24.5" y="691.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.5" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.06%)</title><rect x="24.5" y="675.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="27.5" y="686.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.06%)</title><rect x="24.5" y="659.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.5" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.12%)</title><rect x="25.2" y="739.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="28.2" y="750.0"></text>
</g>
<g>
<title>CProjNode::hash() const (1 samples, 0.06%)</title><rect x="25.2" y="723.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="28.2" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.06%)</title><rect x="25.9" y="723.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="28.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.06%)</title><rect x="25.9" y="707.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="28.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.12%)</title><rect x="26.6" y="755.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="29.6" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.12%)</title><rect x="26.6" y="739.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.12%)</title><rect x="26.6" y="723.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="29.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.12%)</title><rect x="26.6" y="707.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.12%)</title><rect x="26.6" y="691.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="29.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.12%)</title><rect x="26.6" y="675.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.6" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="26.6" y="659.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.6" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="26.6" y="643.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="29.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="26.6" y="627.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="26.6" y="611.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="29.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="26.6" y="595.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="29.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="26.6" y="579.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="29.6" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="26.6" y="563.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="29.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="26.6" y="547.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="26.6" y="531.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="26.6" y="515.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="29.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="26.6" y="499.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="29.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="26.6" y="483.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="26.6" y="467.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="29.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="26.6" y="451.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="29.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="26.6" y="435.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="29.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="26.6" y="419.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="29.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="26.6" y="403.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="26.6" y="387.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.06%)</title><rect x="26.6" y="371.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.06%)</title><rect x="26.6" y="355.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.6" y="366.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.06%)</title><rect x="26.6" y="339.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.6" y="350.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.06%)</title><rect x="26.6" y="323.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.6" y="334.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.06%)</title><rect x="26.6" y="307.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.6" y="318.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.06%)</title><rect x="26.6" y="291.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="29.6" y="302.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.06%)</title><rect x="26.6" y="275.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="29.6" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="26.6" y="259.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.6" y="270.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="26.6" y="243.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="29.6" y="254.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.06%)</title><rect x="26.6" y="227.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="29.6" y="238.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.237] (1 samples, 0.06%)</title><rect x="26.6" y="211.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="29.6" y="222.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.06%)</title><rect x="26.6" y="195.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="29.6" y="206.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.06%)</title><rect x="26.6" y="179.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.6" y="190.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.06%)</title><rect x="26.6" y="163.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="29.6" y="174.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.06%)</title><rect x="26.6" y="147.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="29.6" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="27.3" y="659.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="27.3" y="643.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="30.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="27.3" y="627.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="30.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.06%)</title><rect x="27.3" y="611.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="30.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.06%)</title><rect x="27.3" y="595.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="30.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.06%)</title><rect x="27.3" y="579.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="30.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.06%)</title><rect x="27.3" y="563.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="30.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.06%)</title><rect x="27.3" y="547.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="30.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.06%)</title><rect x="27.3" y="531.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.3" y="542.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.06%)</title><rect x="27.3" y="515.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="30.3" y="526.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.06%)</title><rect x="27.3" y="499.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="30.3" y="510.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.06%)</title><rect x="27.3" y="483.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="30.3" y="494.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.06%)</title><rect x="27.3" y="467.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="30.3" y="478.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.06%)</title><rect x="27.3" y="451.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="30.3" y="462.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.06%)</title><rect x="27.3" y="435.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="30.3" y="446.0"></text>
</g>
<g>
<title>[G1 Conc#0 tid=30045] (48 samples, 2.94%)</title><rect x="28.1" y="899.0" width="34.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="31.1" y="910.0">[G..</text>
</g>
<g>
<title>start_thread (48 samples, 2.94%)</title><rect x="28.1" y="883.0" width="34.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="31.1" y="894.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (48 samples, 2.94%)</title><rect x="28.1" y="867.0" width="34.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="31.1" y="878.0">th..</text>
</g>
<g>
<title>GangWorker::loop() (48 samples, 2.94%)</title><rect x="28.1" y="851.0" width="34.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="31.1" y="862.0">Ga..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (31 samples, 1.90%)</title><rect x="28.1" y="835.0" width="22.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="31.1" y="846.0">G..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.97] (1 samples, 0.06%)</title><rect x="28.1" y="819.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="31.1" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (29 samples, 1.78%)</title><rect x="28.8" y="819.0" width="20.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="31.8" y="830.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (24 samples, 1.47%)</title><rect x="28.8" y="803.0" width="17.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="31.8" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (21 samples, 1.29%)</title><rect x="31.0" y="787.0" width="15.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="34.0" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (19 samples, 1.16%)</title><rect x="31.7" y="771.0" width="13.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="34.7" y="782.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.06%)</title><rect x="44.7" y="755.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="47.7" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="45.4" y="771.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="48.4" y="782.0"></text>
</g>
<g>
<title>G1ConcurrentMark::try_stealing(unsigned int, int*, G1TaskQueueEntry&amp;) (1 samples, 0.06%)</title><rect x="46.1" y="803.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="49.1" y="814.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.06%)</title><rect x="46.9" y="803.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="49.9" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (3 samples, 0.18%)</title><rect x="47.6" y="803.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="50.6" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="48.3" y="787.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="51.3" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (1 samples, 0.06%)</title><rect x="49.7" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="52.7" y="830.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="50.5" y="835.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="53.5" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="50.5" y="819.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="53.5" y="830.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (16 samples, 0.98%)</title><rect x="51.2" y="835.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="54.2" y="846.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (16 samples, 0.98%)</title><rect x="51.2" y="819.0" width="11.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="54.2" y="830.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (14 samples, 0.86%)</title><rect x="51.2" y="803.0" width="10.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="54.2" y="814.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.06%)</title><rect x="57.0" y="787.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="60.0" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBoundedDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate_bounded&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*, MemRegion) (1 samples, 0.06%)</title><rect x="57.7" y="787.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="60.7" y="798.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.06%)</title><rect x="57.7" y="771.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="60.7" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (3 samples, 0.18%)</title><rect x="58.4" y="787.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="61.4" y="798.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.06%)</title><rect x="59.9" y="771.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="62.9" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="60.6" y="787.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="63.6" y="798.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.06%)</title><rect x="60.6" y="771.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="63.6" y="782.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (1 samples, 0.06%)</title><rect x="60.6" y="755.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="63.6" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="61.3" y="803.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="64.3" y="814.0"></text>
</g>
<g>
<title>[G1 Conc#1 tid=27718] (48 samples, 2.94%)</title><rect x="62.7" y="899.0" width="34.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="65.7" y="910.0">[G..</text>
</g>
<g>
<title>start_thread (48 samples, 2.94%)</title><rect x="62.7" y="883.0" width="34.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="65.7" y="894.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (48 samples, 2.94%)</title><rect x="62.7" y="867.0" width="34.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="65.7" y="878.0">th..</text>
</g>
<g>
<title>GangWorker::loop() (48 samples, 2.94%)</title><rect x="62.7" y="851.0" width="34.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="65.7" y="862.0">Ga..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (31 samples, 1.90%)</title><rect x="62.7" y="835.0" width="22.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="65.7" y="846.0">G..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (31 samples, 1.90%)</title><rect x="62.7" y="819.0" width="22.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="65.7" y="830.0">G..</text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.153] (23 samples, 1.41%)</title><rect x="63.5" y="803.0" width="16.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="66.5" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (22 samples, 1.35%)</title><rect x="64.2" y="787.0" width="15.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="67.2" y="798.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.06%)</title><rect x="68.5" y="771.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="71.5" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (15 samples, 0.92%)</title><rect x="69.3" y="771.0" width="10.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="72.3" y="782.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.06%)</title><rect x="80.1" y="803.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="83.1" y="814.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (6 samples, 0.37%)</title><rect x="80.8" y="803.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="83.8" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (4 samples, 0.24%)</title><rect x="81.5" y="787.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="84.5" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="84.4" y="787.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="87.4" y="798.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="85.2" y="835.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="88.2" y="846.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="85.2" y="819.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="88.2" y="830.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (16 samples, 0.98%)</title><rect x="85.9" y="835.0" width="11.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="88.9" y="846.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (16 samples, 0.98%)</title><rect x="85.9" y="819.0" width="11.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="88.9" y="830.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (16 samples, 0.98%)</title><rect x="85.9" y="803.0" width="11.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="88.9" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.06%)</title><rect x="90.9" y="787.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="93.9" y="798.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.06%)</title><rect x="91.7" y="787.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="94.7" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (6 samples, 0.37%)</title><rect x="92.4" y="787.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="95.4" y="798.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.06%)</title><rect x="95.3" y="771.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="98.3" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.06%)</title><rect x="96.0" y="771.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="99.0" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="96.7" y="787.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="99.7" y="798.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.231] (1 samples, 0.06%)</title><rect x="96.7" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="99.7" y="782.0"></text>
</g>
<g>
<title>[G1 Refine#0 tid=30046] (5 samples, 0.31%)</title><rect x="97.4" y="899.0" width="3.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="100.4" y="910.0"></text>
</g>
<g>
<title>start_thread (5 samples, 0.31%)</title><rect x="97.4" y="883.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="100.4" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (5 samples, 0.31%)</title><rect x="97.4" y="867.0" width="3.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="100.4" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (5 samples, 0.31%)</title><rect x="97.4" y="851.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="100.4" y="862.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (5 samples, 0.31%)</title><rect x="97.4" y="835.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="100.4" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (5 samples, 0.31%)</title><rect x="97.4" y="819.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="100.4" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (5 samples, 0.31%)</title><rect x="97.4" y="803.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="100.4" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (5 samples, 0.31%)</title><rect x="97.4" y="787.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="100.4" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.18%)</title><rect x="97.4" y="771.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="100.4" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.06%)</title><rect x="99.6" y="771.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="102.6" y="782.0"></text>
</g>
<g>
<title>void G1ConcurrentRefineOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.229] (1 samples, 0.06%)</title><rect x="100.3" y="771.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="103.3" y="782.0"></text>
</g>
<g>
<title>[G1 Refine#1 tid=27638] (4 samples, 0.24%)</title><rect x="101.0" y="899.0" width="2.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="104.0" y="910.0"></text>
</g>
<g>
<title>start_thread (4 samples, 0.24%)</title><rect x="101.0" y="883.0" width="2.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="104.0" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.24%)</title><rect x="101.0" y="867.0" width="2.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="104.0" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.24%)</title><rect x="101.0" y="851.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="104.0" y="862.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (4 samples, 0.24%)</title><rect x="101.0" y="835.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="104.0" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (4 samples, 0.24%)</title><rect x="101.0" y="819.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="104.0" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (4 samples, 0.24%)</title><rect x="101.0" y="803.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="104.0" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (3 samples, 0.18%)</title><rect x="101.8" y="787.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="104.8" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="101.8" y="771.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="104.8" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.06%)</title><rect x="102.5" y="771.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="105.5" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="103.2" y="771.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="106.2" y="782.0"></text>
</g>
<g>
<title>void G1ConcurrentRefineOopClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.229] (1 samples, 0.06%)</title><rect x="103.2" y="755.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="106.2" y="766.0"></text>
</g>
<g>
<title>[G1 Refine#2 tid=27719] (4 samples, 0.24%)</title><rect x="103.9" y="899.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="106.9" y="910.0"></text>
</g>
<g>
<title>start_thread (4 samples, 0.24%)</title><rect x="103.9" y="883.0" width="2.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="106.9" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (4 samples, 0.24%)</title><rect x="103.9" y="867.0" width="2.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="106.9" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (4 samples, 0.24%)</title><rect x="103.9" y="851.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="106.9" y="862.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (4 samples, 0.24%)</title><rect x="103.9" y="835.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="106.9" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (4 samples, 0.24%)</title><rect x="103.9" y="819.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="106.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (4 samples, 0.24%)</title><rect x="103.9" y="803.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="106.9" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (4 samples, 0.24%)</title><rect x="103.9" y="787.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="106.9" y="798.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.06%)</title><rect x="104.7" y="771.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="107.7" y="782.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.06%)</title><rect x="105.4" y="771.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="108.4" y="782.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.06%)</title><rect x="106.1" y="771.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="109.1" y="782.0"></text>
</g>
<g>
<title>[G1 Refine#3 tid=27720] (3 samples, 0.18%)</title><rect x="106.8" y="899.0" width="2.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="109.8" y="910.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.18%)</title><rect x="106.8" y="883.0" width="2.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="109.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.18%)</title><rect x="106.8" y="867.0" width="2.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="109.8" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (3 samples, 0.18%)</title><rect x="106.8" y="851.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="109.8" y="862.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (3 samples, 0.18%)</title><rect x="106.8" y="835.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="109.8" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (3 samples, 0.18%)</title><rect x="106.8" y="819.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="109.8" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (3 samples, 0.18%)</title><rect x="106.8" y="803.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="109.8" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (3 samples, 0.18%)</title><rect x="106.8" y="787.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="109.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="108.3" y="771.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="111.3" y="782.0"></text>
</g>
<g>
<title>[G1 Refine#4 tid=27721] (2 samples, 0.12%)</title><rect x="109.0" y="899.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="112.0" y="910.0"></text>
</g>
<g>
<title>start_thread (2 samples, 0.12%)</title><rect x="109.0" y="883.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="112.0" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (2 samples, 0.12%)</title><rect x="109.0" y="867.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="112.0" y="878.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (2 samples, 0.12%)</title><rect x="109.0" y="851.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="112.0" y="862.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (2 samples, 0.12%)</title><rect x="109.0" y="835.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="112.0" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long) (2 samples, 0.12%)</title><rect x="109.0" y="819.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="112.0" y="830.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(signed char*, unsigned int) (2 samples, 0.12%)</title><rect x="109.0" y="803.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="112.0" y="814.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;false, G1ConcurrentRefineOopClosure&gt;(MemRegion, G1ConcurrentRefineOopClosure*) (2 samples, 0.12%)</title><rect x="109.0" y="787.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="112.0" y="798.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="109.0" y="771.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="112.0" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (1 samples, 0.06%)</title><rect x="109.7" y="771.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="112.7" y="782.0"></text>
</g>
<g>
<title>[GC Thread#0 tid=30043] (24 samples, 1.47%)</title><rect x="110.4" y="899.0" width="17.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="113.4" y="910.0"></text>
</g>
<g>
<title>start_thread (24 samples, 1.47%)</title><rect x="110.4" y="883.0" width="17.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="113.4" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 1.47%)</title><rect x="110.4" y="867.0" width="17.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="113.4" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 1.47%)</title><rect x="110.4" y="851.0" width="17.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="113.4" y="862.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (2 samples, 0.12%)</title><rect x="110.4" y="835.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="113.4" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.12%)</title><rect x="110.4" y="819.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="113.4" y="830.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.12%)</title><rect x="110.4" y="803.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="113.4" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 1.35%)</title><rect x="111.9" y="835.0" width="15.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="114.9" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.49%)</title><rect x="111.9" y="819.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="114.9" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="111.9" y="803.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="114.9" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 0.37%)</title><rect x="112.6" y="803.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="115.6" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.18%)</title><rect x="114.8" y="787.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="117.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="116.2" y="771.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="119.2" y="782.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="116.9" y="803.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="119.9" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (7 samples, 0.43%)</title><rect x="117.7" y="819.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="120.7" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.43%)</title><rect x="117.7" y="803.0" width="5.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="120.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (7 samples, 0.43%)</title><rect x="117.7" y="787.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="120.7" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (7 samples, 0.43%)</title><rect x="117.7" y="771.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="120.7" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.43%)</title><rect x="117.7" y="755.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="120.7" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 0.31%)</title><rect x="117.7" y="739.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="120.7" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.12%)</title><rect x="119.8" y="723.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="122.8" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="120.6" y="707.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="123.6" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (2 samples, 0.12%)</title><rect x="121.3" y="739.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="124.3" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.12%)</title><rect x="121.3" y="723.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="124.3" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.12%)</title><rect x="121.3" y="707.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="124.3" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.43%)</title><rect x="122.7" y="819.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="125.7" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (7 samples, 0.43%)</title><rect x="122.7" y="803.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="125.7" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (7 samples, 0.43%)</title><rect x="122.7" y="787.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="125.7" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (7 samples, 0.43%)</title><rect x="122.7" y="771.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="125.7" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.06%)</title><rect x="122.7" y="755.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="125.7" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="122.7" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="125.7" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (6 samples, 0.37%)</title><rect x="123.4" y="755.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="126.4" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.18%)</title><rect x="124.2" y="739.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="127.2" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.06%)</title><rect x="126.3" y="739.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="129.3" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="127.1" y="739.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="130.1" y="750.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringScanRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.06%)</title><rect x="127.1" y="723.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="130.1" y="734.0"></text>
</g>
<g>
<title>[GC Thread#1 tid=31238] (24 samples, 1.47%)</title><rect x="127.8" y="899.0" width="17.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="130.8" y="910.0"></text>
</g>
<g>
<title>start_thread (24 samples, 1.47%)</title><rect x="127.8" y="883.0" width="17.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="130.8" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 1.47%)</title><rect x="127.8" y="867.0" width="17.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="130.8" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 1.47%)</title><rect x="127.8" y="851.0" width="17.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="130.8" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (23 samples, 1.41%)</title><rect x="127.8" y="835.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="130.8" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.49%)</title><rect x="127.8" y="819.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="130.8" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 0.49%)</title><rect x="127.8" y="803.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="130.8" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="132.8" y="787.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="135.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="132.8" y="771.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="135.8" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (9 samples, 0.55%)</title><rect x="133.6" y="819.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="136.6" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (9 samples, 0.55%)</title><rect x="133.6" y="803.0" width="6.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="136.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (9 samples, 0.55%)</title><rect x="133.6" y="787.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="136.6" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (9 samples, 0.55%)</title><rect x="133.6" y="771.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="136.6" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.55%)</title><rect x="133.6" y="755.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="136.6" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 0.37%)</title><rect x="133.6" y="739.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="136.6" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.24%)</title><rect x="135.0" y="723.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="138.0" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="137.2" y="707.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="140.2" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (3 samples, 0.18%)</title><rect x="137.9" y="739.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="140.9" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.18%)</title><rect x="137.9" y="723.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="140.9" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.12%)</title><rect x="137.9" y="707.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="140.9" y="718.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.517] (1 samples, 0.06%)</title><rect x="139.3" y="707.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="142.3" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="140.1" y="819.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="143.1" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (6 samples, 0.37%)</title><rect x="140.1" y="803.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="143.1" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (6 samples, 0.37%)</title><rect x="140.1" y="787.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="143.1" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (6 samples, 0.37%)</title><rect x="140.1" y="771.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="143.1" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.12%)</title><rect x="140.8" y="755.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="143.8" y="766.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.06%)</title><rect x="142.2" y="755.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="145.2" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.06%)</title><rect x="143.0" y="755.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="146.0" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="143.0" y="739.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="146.0" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.06%)</title><rect x="143.7" y="755.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="146.7" y="766.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="144.4" y="835.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="147.4" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.06%)</title><rect x="144.4" y="819.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="147.4" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.06%)</title><rect x="144.4" y="803.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="147.4" y="814.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.06%)</title><rect x="144.4" y="787.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="147.4" y="798.0"></text>
</g>
<g>
<title>[GC Thread#2 tid=31239] (23 samples, 1.41%)</title><rect x="145.1" y="899.0" width="16.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="148.1" y="910.0"></text>
</g>
<g>
<title>start_thread (23 samples, 1.41%)</title><rect x="145.1" y="883.0" width="16.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="148.1" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (23 samples, 1.41%)</title><rect x="145.1" y="867.0" width="16.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="148.1" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.41%)</title><rect x="145.1" y="851.0" width="16.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="148.1" y="862.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (2 samples, 0.12%)</title><rect x="145.1" y="835.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="148.1" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (2 samples, 0.12%)</title><rect x="145.1" y="819.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="148.1" y="830.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.12%)</title><rect x="145.1" y="803.0" width="1.5" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="148.1" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 1.29%)</title><rect x="146.6" y="835.0" width="15.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="149.6" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.43%)</title><rect x="146.6" y="819.0" width="5.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="149.6" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.31%)</title><rect x="148.0" y="803.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="151.0" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="150.9" y="787.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="153.9" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (7 samples, 0.43%)</title><rect x="151.6" y="819.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="154.6" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.43%)</title><rect x="151.6" y="803.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="154.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (7 samples, 0.43%)</title><rect x="151.6" y="787.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="154.6" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (7 samples, 0.43%)</title><rect x="151.6" y="771.0" width="5.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="154.6" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.43%)</title><rect x="151.6" y="755.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="154.6" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (6 samples, 0.37%)</title><rect x="151.6" y="739.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="154.6" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.24%)</title><rect x="153.1" y="723.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="156.1" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.06%)</title><rect x="156.0" y="739.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="159.0" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="156.0" y="723.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="159.0" y="734.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (7 samples, 0.43%)</title><rect x="156.7" y="819.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="159.7" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (7 samples, 0.43%)</title><rect x="156.7" y="803.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="159.7" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (7 samples, 0.43%)</title><rect x="156.7" y="787.0" width="5.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="159.7" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (7 samples, 0.43%)</title><rect x="156.7" y="771.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="159.7" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.12%)</title><rect x="156.7" y="755.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="159.7" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="157.4" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="160.4" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (5 samples, 0.31%)</title><rect x="158.1" y="755.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="161.1" y="766.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.12%)</title><rect x="158.9" y="739.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="161.9" y="750.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.517] (1 samples, 0.06%)</title><rect x="160.3" y="739.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="163.3" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="161.0" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="164.0" y="750.0"></text>
</g>
<g>
<title>[GC Thread#3 tid=31240] (24 samples, 1.47%)</title><rect x="161.7" y="899.0" width="17.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="164.7" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="161.7" y="883.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="164.7" y="894.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.3 (1 samples, 0.06%)</title><rect x="161.7" y="867.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="164.7" y="878.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="161.7" y="851.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="164.7" y="862.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.06%)</title><rect x="161.7" y="835.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="164.7" y="846.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.06%)</title><rect x="161.7" y="819.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="164.7" y="830.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.06%)</title><rect x="161.7" y="803.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="164.7" y="814.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.06%)</title><rect x="161.7" y="787.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="164.7" y="798.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.06%)</title><rect x="161.7" y="771.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="164.7" y="782.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.06%)</title><rect x="161.7" y="755.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="164.7" y="766.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.06%)</title><rect x="161.7" y="739.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="164.7" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.06%)</title><rect x="161.7" y="723.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="164.7" y="734.0"></text>
</g>
<g>
<title>start_thread (23 samples, 1.41%)</title><rect x="162.5" y="883.0" width="16.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="165.5" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (23 samples, 1.41%)</title><rect x="162.5" y="867.0" width="16.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="165.5" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.41%)</title><rect x="162.5" y="851.0" width="16.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="165.5" y="862.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="162.5" y="835.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="165.5" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.06%)</title><rect x="162.5" y="819.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="165.5" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="162.5" y="803.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="165.5" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 1.29%)</title><rect x="163.2" y="835.0" width="15.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="166.2" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.49%)</title><rect x="163.2" y="819.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="166.2" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (6 samples, 0.37%)</title><rect x="164.6" y="803.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="167.6" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.24%)</title><rect x="166.1" y="787.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="169.1" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="168.2" y="771.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="171.2" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.24%)</title><rect x="169.0" y="819.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="172.0" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.24%)</title><rect x="169.0" y="803.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="172.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 0.24%)</title><rect x="169.0" y="787.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="172.0" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 0.24%)</title><rect x="169.0" y="771.0" width="2.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="172.0" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.24%)</title><rect x="169.0" y="755.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="172.0" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.18%)</title><rect x="169.0" y="739.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="172.0" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.18%)</title><rect x="169.0" y="723.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="172.0" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="170.4" y="707.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="173.4" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.06%)</title><rect x="171.1" y="739.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="174.1" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.06%)</title><rect x="171.1" y="723.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="174.1" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="171.1" y="707.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="174.1" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (9 samples, 0.55%)</title><rect x="171.9" y="819.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="174.9" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (9 samples, 0.55%)</title><rect x="171.9" y="803.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="174.9" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (9 samples, 0.55%)</title><rect x="171.9" y="787.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="174.9" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (9 samples, 0.55%)</title><rect x="171.9" y="771.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="174.9" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.12%)</title><rect x="172.6" y="755.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="175.6" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="173.3" y="739.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="176.3" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="173.3" y="723.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="176.3" y="734.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.06%)</title><rect x="174.0" y="755.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="177.0" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (5 samples, 0.31%)</title><rect x="174.8" y="755.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="177.8" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.12%)</title><rect x="174.8" y="739.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="177.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::heap() (1 samples, 0.06%)</title><rect x="176.2" y="739.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="179.2" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="176.9" y="739.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="179.9" y="750.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringScanRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.06%)</title><rect x="177.6" y="723.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="180.6" y="734.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="178.4" y="835.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="181.4" y="846.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (1 samples, 0.06%)</title><rect x="178.4" y="819.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="181.4" y="830.0"></text>
</g>
<g>
<title>[GC Thread#4 tid=31241] (24 samples, 1.47%)</title><rect x="179.1" y="899.0" width="17.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="182.1" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="179.1" y="883.0" width="0.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="182.1" y="894.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.3 (1 samples, 0.06%)</title><rect x="179.1" y="867.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="182.1" y="878.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.06%)</title><rect x="179.8" y="883.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="182.8" y="894.0"></text>
</g>
<g>
<title>start_thread (22 samples, 1.35%)</title><rect x="180.5" y="883.0" width="15.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="183.5" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (22 samples, 1.35%)</title><rect x="180.5" y="867.0" width="15.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="183.5" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.35%)</title><rect x="180.5" y="851.0" width="15.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="183.5" y="862.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="180.5" y="835.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="183.5" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.06%)</title><rect x="180.5" y="819.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="183.5" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="180.5" y="803.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="183.5" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 1.29%)</title><rect x="181.3" y="835.0" width="15.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="184.3" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.31%)</title><rect x="181.3" y="819.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="184.3" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.31%)</title><rect x="181.3" y="803.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="184.3" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.24%)</title><rect x="182.0" y="787.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="185.0" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="183.4" y="771.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="186.4" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="184.9" y="819.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="187.9" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="184.9" y="803.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="187.9" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.37%)</title><rect x="184.9" y="787.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="187.9" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.37%)</title><rect x="184.9" y="771.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="187.9" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.37%)</title><rect x="184.9" y="755.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="187.9" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.24%)</title><rect x="184.9" y="739.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="187.9" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.12%)</title><rect x="186.3" y="723.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="189.3" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (2 samples, 0.12%)</title><rect x="187.8" y="739.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="190.8" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.12%)</title><rect x="187.8" y="723.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="190.8" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="187.8" y="707.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="190.8" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="188.5" y="707.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="191.5" y="718.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.06%)</title><rect x="188.5" y="691.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="191.5" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (10 samples, 0.61%)</title><rect x="189.2" y="819.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="192.2" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (10 samples, 0.61%)</title><rect x="189.2" y="803.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="192.2" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (10 samples, 0.61%)</title><rect x="189.2" y="787.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="192.2" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (10 samples, 0.61%)</title><rect x="189.2" y="771.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="192.2" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 0.31%)</title><rect x="189.2" y="755.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="192.2" y="766.0"></text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (1 samples, 0.06%)</title><rect x="191.4" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="194.4" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="192.1" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="195.1" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (5 samples, 0.31%)</title><rect x="192.8" y="755.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="195.8" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.12%)</title><rect x="192.8" y="739.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="195.8" y="750.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.06%)</title><rect x="194.3" y="739.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="197.3" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="195.0" y="739.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="198.0" y="750.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringScanRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.12%)</title><rect x="195.0" y="723.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="198.0" y="734.0"></text>
</g>
<g>
<title>[GC Thread#5 tid=31242] (24 samples, 1.47%)</title><rect x="196.4" y="899.0" width="17.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="199.4" y="910.0"></text>
</g>
<g>
<title>start_thread (24 samples, 1.47%)</title><rect x="196.4" y="883.0" width="17.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="199.4" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 1.47%)</title><rect x="196.4" y="867.0" width="17.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="199.4" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (24 samples, 1.47%)</title><rect x="196.4" y="851.0" width="17.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="199.4" y="862.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="196.4" y="835.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="199.4" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.06%)</title><rect x="196.4" y="819.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="199.4" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="196.4" y="803.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="199.4" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 1.35%)</title><rect x="197.2" y="835.0" width="15.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="200.2" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.55%)</title><rect x="197.2" y="819.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="200.2" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.18%)</title><rect x="197.9" y="803.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="200.9" y="814.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="198.6" y="787.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="201.6" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 0.31%)</title><rect x="200.0" y="803.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="203.0" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="202.9" y="787.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="205.9" y="798.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.06%)</title><rect x="202.9" y="771.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="205.9" y="782.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.06%)</title><rect x="202.9" y="755.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="205.9" y="766.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="203.7" y="819.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="206.7" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="203.7" y="803.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="206.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (6 samples, 0.37%)</title><rect x="203.7" y="787.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="206.7" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (6 samples, 0.37%)</title><rect x="203.7" y="771.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="206.7" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.37%)</title><rect x="203.7" y="755.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="206.7" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.24%)</title><rect x="203.7" y="739.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="206.7" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="205.8" y="723.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="208.8" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="205.8" y="707.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="208.8" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (2 samples, 0.12%)</title><rect x="206.5" y="739.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="209.5" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.12%)</title><rect x="206.5" y="723.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="209.5" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="206.5" y="707.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="209.5" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.06%)</title><rect x="207.3" y="707.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="210.3" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (6 samples, 0.37%)</title><rect x="208.0" y="819.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="211.0" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (6 samples, 0.37%)</title><rect x="208.0" y="803.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="211.0" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (6 samples, 0.37%)</title><rect x="208.0" y="787.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="211.0" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (6 samples, 0.37%)</title><rect x="208.0" y="771.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="211.0" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.12%)</title><rect x="208.7" y="755.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="211.7" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="209.4" y="739.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="212.4" y="750.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.06%)</title><rect x="210.2" y="755.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="213.2" y="766.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (2 samples, 0.12%)</title><rect x="210.9" y="755.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="213.9" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="211.6" y="739.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="214.6" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.06%)</title><rect x="212.3" y="819.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="215.3" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.06%)</title><rect x="212.3" y="803.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="215.3" y="814.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.06%)</title><rect x="212.3" y="787.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="215.3" y="798.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.06%)</title><rect x="212.3" y="771.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="215.3" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.06%)</title><rect x="212.3" y="755.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="215.3" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.06%)</title><rect x="212.3" y="739.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="215.3" y="750.0"></text>
</g>
<g>
<title>nmethod::is_alive() const (1 samples, 0.06%)</title><rect x="213.0" y="835.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="216.0" y="846.0"></text>
</g>
<g>
<title>[GC Thread#6 tid=31243] (23 samples, 1.41%)</title><rect x="213.8" y="899.0" width="16.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="216.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="213.8" y="883.0" width="0.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="216.8" y="894.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.06%)</title><rect x="213.8" y="867.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="216.8" y="878.0"></text>
</g>
<g>
<title>start_thread (22 samples, 1.35%)</title><rect x="214.5" y="883.0" width="15.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="217.5" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (22 samples, 1.35%)</title><rect x="214.5" y="867.0" width="15.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="217.5" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 1.35%)</title><rect x="214.5" y="851.0" width="15.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="217.5" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 1.29%)</title><rect x="214.5" y="835.0" width="15.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="217.5" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 0.49%)</title><rect x="214.5" y="819.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="217.5" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 0.43%)</title><rect x="215.2" y="803.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="218.2" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.12%)</title><rect x="218.8" y="787.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="221.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="219.6" y="771.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="222.6" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (8 samples, 0.49%)</title><rect x="220.3" y="819.0" width="5.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="223.3" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 0.49%)</title><rect x="220.3" y="803.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="223.3" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (8 samples, 0.49%)</title><rect x="220.3" y="787.0" width="5.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="223.3" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (8 samples, 0.49%)</title><rect x="220.3" y="771.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="223.3" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.49%)</title><rect x="220.3" y="755.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="223.3" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (7 samples, 0.43%)</title><rect x="220.3" y="739.0" width="5.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="223.3" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.24%)</title><rect x="222.4" y="723.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="225.4" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.06%)</title><rect x="225.3" y="739.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="228.3" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.06%)</title><rect x="225.3" y="723.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="228.3" y="734.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.06%)</title><rect x="225.3" y="707.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="228.3" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 0.31%)</title><rect x="226.1" y="819.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="229.1" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (5 samples, 0.31%)</title><rect x="226.1" y="803.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="229.1" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (5 samples, 0.31%)</title><rect x="226.1" y="787.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="229.1" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (5 samples, 0.31%)</title><rect x="226.1" y="771.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="229.1" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.18%)</title><rect x="226.1" y="755.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="229.1" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="227.5" y="739.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="230.5" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (2 samples, 0.12%)</title><rect x="228.2" y="755.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="231.2" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="228.2" y="739.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="231.2" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.06%)</title><rect x="228.9" y="739.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="231.9" y="750.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="229.7" y="835.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="232.7" y="846.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (1 samples, 0.06%)</title><rect x="229.7" y="819.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="232.7" y="830.0"></text>
</g>
<g>
<title>[GC Thread#7 tid=31244] (23 samples, 1.41%)</title><rect x="230.4" y="899.0" width="16.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="233.4" y="910.0"></text>
</g>
<g>
<title>start_thread (23 samples, 1.41%)</title><rect x="230.4" y="883.0" width="16.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="233.4" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (23 samples, 1.41%)</title><rect x="230.4" y="867.0" width="16.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="233.4" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (23 samples, 1.41%)</title><rect x="230.4" y="851.0" width="16.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="233.4" y="862.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (1 samples, 0.06%)</title><rect x="230.4" y="835.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.4" y="846.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1 samples, 0.06%)</title><rect x="230.4" y="819.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="233.4" y="830.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.06%)</title><rect x="230.4" y="803.0" width="0.7" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="233.4" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (22 samples, 1.35%)</title><rect x="231.1" y="835.0" width="15.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="234.1" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.24%)</title><rect x="231.1" y="819.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="234.1" y="830.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 0.24%)</title><rect x="231.1" y="803.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="234.1" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.18%)</title><rect x="231.8" y="787.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="234.8" y="798.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="233.3" y="771.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="236.3" y="782.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (9 samples, 0.55%)</title><rect x="234.0" y="819.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="237.0" y="830.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (9 samples, 0.55%)</title><rect x="234.0" y="803.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="237.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (9 samples, 0.55%)</title><rect x="234.0" y="787.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="237.0" y="798.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (9 samples, 0.55%)</title><rect x="234.0" y="771.0" width="6.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="237.0" y="782.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.55%)</title><rect x="234.0" y="755.0" width="6.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="237.0" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 0.18%)</title><rect x="234.0" y="739.0" width="2.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="237.0" y="750.0"></text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (1 samples, 0.06%)</title><rect x="234.7" y="723.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="237.7" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.06%)</title><rect x="235.5" y="723.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="238.5" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (6 samples, 0.37%)</title><rect x="236.2" y="739.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="239.2" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (6 samples, 0.37%)</title><rect x="236.2" y="723.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="239.2" y="734.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (3 samples, 0.18%)</title><rect x="236.9" y="707.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="239.9" y="718.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples, 0.12%)</title><rect x="239.1" y="707.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="242.1" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 0.49%)</title><rect x="240.5" y="819.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="243.5" y="830.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (8 samples, 0.49%)</title><rect x="240.5" y="803.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="243.5" y="814.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (8 samples, 0.49%)</title><rect x="240.5" y="787.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="243.5" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (8 samples, 0.49%)</title><rect x="240.5" y="771.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="243.5" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.24%)</title><rect x="240.5" y="755.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="243.5" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.12%)</title><rect x="241.2" y="739.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="244.2" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.12%)</title><rect x="241.2" y="723.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="244.2" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="242.7" y="739.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="245.7" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (3 samples, 0.18%)</title><rect x="243.4" y="755.0" width="2.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="246.4" y="766.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.06%)</title><rect x="244.1" y="739.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="247.1" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.06%)</title><rect x="244.8" y="739.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="247.8" y="750.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringScanRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.06%)</title><rect x="244.8" y="723.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="247.8" y="734.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.06%)</title><rect x="245.6" y="755.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="248.6" y="766.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (1 samples, 0.06%)</title><rect x="246.3" y="819.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="249.3" y="830.0"></text>
</g>
<g>
<title>[NIO Selector #1 tid=30145] (1,303 samples, 79.79%)</title><rect x="247.0" y="899.0" width="941.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="250.0" y="910.0">[NIO Selector #1 tid=30145]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,303 samples, 79.79%)</title><rect x="247.0" y="883.0" width="941.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.0" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (125 samples, 7.65%)</title><rect x="247.7" y="867.0" width="90.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.7" y="878.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (4 samples, 0.24%)</title><rect x="247.7" y="851.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.7" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.12%)</title><rect x="249.2" y="835.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.2" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (121 samples, 7.41%)</title><rect x="250.6" y="851.0" width="87.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.6" y="862.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.12%)</title><rect x="252.8" y="835.0" width="1.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="255.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="254.2" y="835.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="257.2" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.06%)</title><rect x="254.2" y="819.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="257.2" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.06%)</title><rect x="254.2" y="803.0" width="0.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="257.2" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.06%)</title><rect x="255.0" y="835.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="258.0" y="846.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.24%)</title><rect x="255.7" y="835.0" width="2.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="258.7" y="846.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.06%)</title><rect x="258.6" y="835.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="261.6" y="846.0"></text>
</g>
<g>
<title>epoll_wait (105 samples, 6.43%)</title><rect x="259.3" y="835.0" width="75.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="262.3" y="846.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (70 samples, 4.29%)</title><rect x="284.6" y="819.0" width="50.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="287.6" y="830.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (67 samples, 4.10%)</title><rect x="284.6" y="803.0" width="48.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="287.6" y="814.0">do_s..</text>
</g>
<g>
<title>fput (2 samples, 0.12%)</title><rect x="292.5" y="787.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="295.5" y="798.0"></text>
</g>
<g>
<title>sys_epoll_wait (54 samples, 3.31%)</title><rect x="294.0" y="787.0" width="39.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="297.0" y="798.0">sys..</text>
</g>
<g>
<title>__fget_light (1 samples, 0.06%)</title><rect x="294.0" y="771.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="297.0" y="782.0"></text>
</g>
<g>
<title>ep_poll (53 samples, 3.25%)</title><rect x="294.7" y="771.0" width="38.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="297.7" y="782.0">ep_..</text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.55%)</title><rect x="295.4" y="755.0" width="6.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="298.4" y="766.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rbx (1 samples, 0.06%)</title><rect x="301.9" y="755.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="304.9" y="766.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="302.7" y="755.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="305.7" y="766.0"></text>
</g>
<g>
<title>ep_scan_ready_list (30 samples, 1.84%)</title><rect x="303.4" y="755.0" width="21.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="306.4" y="766.0">e..</text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.31%)</title><rect x="305.5" y="739.0" width="3.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="308.5" y="750.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.12%)</title><rect x="309.2" y="739.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="312.2" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (17 samples, 1.04%)</title><rect x="310.6" y="739.0" width="12.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="313.6" y="750.0"></text>
</g>
<g>
<title>ep_item_poll.isra.12 (11 samples, 0.67%)</title><rect x="314.2" y="723.0" width="8.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="317.2" y="734.0"></text>
</g>
<g>
<title>sock_poll (11 samples, 0.67%)</title><rect x="314.2" y="707.0" width="8.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="317.2" y="718.0"></text>
</g>
<g>
<title>tcp_poll (6 samples, 0.37%)</title><rect x="317.1" y="691.0" width="4.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="320.1" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.06%)</title><rect x="320.7" y="675.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="323.7" y="686.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.06%)</title><rect x="321.4" y="691.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="324.4" y="702.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.06%)</title><rect x="322.2" y="723.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="325.2" y="734.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.18%)</title><rect x="322.9" y="739.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="325.9" y="750.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.12%)</title><rect x="325.1" y="755.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="328.1" y="766.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.06%)</title><rect x="326.5" y="755.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="329.5" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (8 samples, 0.49%)</title><rect x="327.2" y="755.0" width="5.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="330.2" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (8 samples, 0.49%)</title><rect x="327.2" y="739.0" width="5.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="330.2" y="750.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.49%)</title><rect x="327.2" y="723.0" width="5.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="330.2" y="734.0"></text>
</g>
<g>
<title>__schedule (8 samples, 0.49%)</title><rect x="327.2" y="707.0" width="5.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="330.2" y="718.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.31%)</title><rect x="329.4" y="691.0" width="3.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="332.4" y="702.0"></text>
</g>
<g>
<title>sys_epoll_wait (3 samples, 0.18%)</title><rect x="333.0" y="803.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="336.0" y="814.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.24%)</title><rect x="335.2" y="835.0" width="2.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="338.2" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.24%)</title><rect x="335.2" y="819.0" width="2.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="338.2" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="335.2" y="803.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="338.2" y="814.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 0.18%)</title><rect x="335.9" y="803.0" width="2.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="338.9" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.18%)</title><rect x="335.9" y="787.0" width="2.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="338.9" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,177 samples, 72.08%)</title><rect x="338.1" y="867.0" width="850.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.1" y="878.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,172 samples, 71.77%)</title><rect x="340.9" y="851.0" width="846.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="343.9" y="862.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,015 samples, 62.16%)</title><rect x="341.7" y="835.0" width="733.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="344.7" y="846.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.06%)</title><rect x="345.3" y="819.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="348.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (976 samples, 59.77%)</title><rect x="346.0" y="819.0" width="705.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="349.0" y="830.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (976 samples, 59.77%)</title><rect x="346.0" y="803.0" width="705.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.0" y="814.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (964 samples, 59.03%)</title><rect x="346.0" y="787.0" width="696.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.0" y="798.0">RequestHandler0_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (509 samples, 31.17%)</title><rect x="346.0" y="771.0" width="367.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.0" y="782.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (502 samples, 30.74%)</title><rect x="347.5" y="755.0" width="362.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.5" y="766.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (13 samples, 0.80%)</title><rect x="347.5" y="739.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.5" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="348.9" y="723.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="351.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.61%)</title><rect x="349.6" y="723.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.18%)</title><rect x="349.6" y="707.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="352.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.18%)</title><rect x="349.6" y="691.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="352.6" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.06%)</title><rect x="351.8" y="707.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.24%)</title><rect x="352.5" y="707.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.06%)</title><rect x="354.0" y="691.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.0" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.06%)</title><rect x="354.0" y="675.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.06%)</title><rect x="354.7" y="691.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="357.7" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.12%)</title><rect x="355.4" y="707.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="358.4" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.12%)</title><rect x="355.4" y="691.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.4" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.12%)</title><rect x="355.4" y="675.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.4" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (489 samples, 29.94%)</title><rect x="356.8" y="739.0" width="353.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.8" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (489 samples, 29.94%)</title><rect x="356.8" y="723.0" width="353.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="359.8" y="734.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.remaining (1 samples, 0.06%)</title><rect x="356.8" y="707.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="359.8" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (487 samples, 29.82%)</title><rect x="357.6" y="707.0" width="351.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="360.6" y="718.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (487 samples, 29.82%)</title><rect x="357.6" y="691.0" width="351.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="360.6" y="702.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.12%)</title><rect x="360.5" y="675.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="363.5" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.12%)</title><rect x="360.5" y="659.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="363.5" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.06%)</title><rect x="361.2" y="643.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="364.2" y="654.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.06%)</title><rect x="361.9" y="675.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="364.9" y="686.0"></text>
</g>
<g>
<title>send (479 samples, 29.33%)</title><rect x="362.6" y="675.0" width="346.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="365.6" y="686.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (453 samples, 27.74%)</title><rect x="381.4" y="659.0" width="327.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="384.4" y="670.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (451 samples, 27.62%)</title><rect x="381.4" y="643.0" width="325.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="384.4" y="654.0">do_syscall_64</text>
</g>
<g>
<title>sys_sendto (440 samples, 26.94%)</title><rect x="389.4" y="627.0" width="317.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="392.4" y="638.0">sys_sendto</text>
</g>
<g>
<title>SYSC_sendto (439 samples, 26.88%)</title><rect x="389.4" y="611.0" width="317.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="392.4" y="622.0">SYSC_sendto</text>
</g>
<g>
<title>sock_sendmsg (435 samples, 26.64%)</title><rect x="390.8" y="595.0" width="314.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="393.8" y="606.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (432 samples, 26.45%)</title><rect x="390.8" y="579.0" width="312.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="393.8" y="590.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (431 samples, 26.39%)</title><rect x="390.8" y="563.0" width="311.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="393.8" y="574.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.12%)</title><rect x="391.5" y="547.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="394.5" y="558.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.18%)</title><rect x="393.0" y="547.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="396.0" y="558.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.06%)</title><rect x="394.4" y="531.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="397.4" y="542.0"></text>
</g>
<g>
<title>skb_put (2 samples, 0.12%)</title><rect x="395.1" y="547.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="398.1" y="558.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.12%)</title><rect x="396.6" y="547.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="399.6" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (420 samples, 25.72%)</title><rect x="398.0" y="547.0" width="303.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="401.0" y="558.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.06%)</title><rect x="400.2" y="531.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="403.2" y="542.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.12%)</title><rect x="400.9" y="531.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="403.9" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.12%)</title><rect x="400.9" y="515.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="403.9" y="526.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.06%)</title><rect x="402.4" y="531.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="405.4" y="542.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.06%)</title><rect x="403.1" y="531.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="406.1" y="542.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.06%)</title><rect x="403.8" y="531.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="406.8" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.06%)</title><rect x="403.8" y="515.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="406.8" y="526.0"></text>
</g>
<g>
<title>copyin (3 samples, 0.18%)</title><rect x="404.5" y="531.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="407.5" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (19 samples, 1.16%)</title><rect x="406.7" y="531.0" width="13.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="409.7" y="542.0"></text>
</g>
<g>
<title>__alloc_skb (15 samples, 0.92%)</title><rect x="409.6" y="515.0" width="10.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="412.6" y="526.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.43 (3 samples, 0.18%)</title><rect x="414.7" y="499.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="417.7" y="510.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.12%)</title><rect x="414.7" y="483.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="417.7" y="494.0"></text>
</g>
<g>
<title>kmalloc_slab (1 samples, 0.06%)</title><rect x="416.1" y="483.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="419.1" y="494.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.24%)</title><rect x="416.8" y="499.0" width="2.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="419.8" y="510.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.06%)</title><rect x="419.7" y="499.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="422.7" y="510.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.06%)</title><rect x="420.4" y="531.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="423.4" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.06%)</title><rect x="421.2" y="531.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="424.2" y="542.0"></text>
</g>
<g>
<title>tcp_push (378 samples, 23.15%)</title><rect x="421.9" y="531.0" width="273.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="424.9" y="542.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (376 samples, 23.03%)</title><rect x="423.3" y="515.0" width="271.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="426.3" y="526.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.12%)</title><rect x="424.0" y="499.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="427.0" y="510.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.06%)</title><rect x="425.5" y="499.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="428.5" y="510.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.29 (1 samples, 0.06%)</title><rect x="426.2" y="499.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="429.2" y="510.0"></text>
</g>
<g>
<title>tcp_write_xmit (371 samples, 22.72%)</title><rect x="426.9" y="499.0" width="268.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="429.9" y="510.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.12%)</title><rect x="429.8" y="483.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="432.8" y="494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (356 samples, 21.80%)</title><rect x="431.3" y="483.0" width="257.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="434.3" y="494.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.06%)</title><rect x="435.6" y="467.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="438.6" y="478.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.06%)</title><rect x="436.3" y="467.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="439.3" y="478.0"></text>
</g>
<g>
<title>ip_queue_xmit (342 samples, 20.94%)</title><rect x="437.1" y="467.0" width="247.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="440.1" y="478.0">ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.06%)</title><rect x="439.2" y="451.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="442.2" y="462.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.06%)</title><rect x="439.2" y="435.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="442.2" y="446.0"></text>
</g>
<g>
<title>ip_local_out (337 samples, 20.64%)</title><rect x="439.9" y="451.0" width="243.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="442.9" y="462.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (89 samples, 5.45%)</title><rect x="439.9" y="435.0" width="64.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="442.9" y="446.0">__ip_lo..</text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.06%)</title><rect x="441.4" y="419.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="444.4" y="430.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.06%)</title><rect x="442.1" y="419.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="445.1" y="430.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (3 samples, 0.18%)</title><rect x="442.8" y="419.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="445.8" y="430.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (1 samples, 0.06%)</title><rect x="445.0" y="419.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="448.0" y="430.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn?[iptable_nat] (1 samples, 0.06%)</title><rect x="445.7" y="419.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="448.7" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (1 samples, 0.06%)</title><rect x="446.4" y="419.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="449.4" y="430.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack_ipv4] (3 samples, 0.18%)</title><rect x="447.2" y="419.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="450.2" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (76 samples, 4.65%)</title><rect x="449.3" y="419.0" width="55.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="452.3" y="430.0">nf_ho..</text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (9 samples, 0.55%)</title><rect x="449.3" y="403.0" width="6.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="452.3" y="414.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (9 samples, 0.55%)</title><rect x="449.3" y="387.0" width="6.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="452.3" y="398.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (8 samples, 0.49%)</title><rect x="455.8" y="403.0" width="5.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="458.8" y="414.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (8 samples, 0.49%)</title><rect x="455.8" y="387.0" width="5.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="458.8" y="398.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_local_fn?[iptable_nat] (5 samples, 0.31%)</title><rect x="461.6" y="403.0" width="3.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="464.6" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat_ipv4] (5 samples, 0.31%)</title><rect x="461.6" y="387.0" width="3.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="464.6" y="398.0"></text>
</g>
<g>
<title>nf_nat_ipv4_fn?[nf_nat_ipv4] (1 samples, 0.06%)</title><rect x="463.1" y="371.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="466.1" y="382.0"></text>
</g>
<g>
<title>nf_nat_packet?[nf_nat] (2 samples, 0.12%)</title><rect x="463.8" y="371.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="466.8" y="382.0"></text>
</g>
<g>
<title>ipv4_conntrack_local?[nf_conntrack_ipv4] (52 samples, 3.18%)</title><rect x="465.2" y="403.0" width="37.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="468.2" y="414.0">ipv..</text>
</g>
<g>
<title>__nf_ct_l4proto_find?[nf_conntrack] (1 samples, 0.06%)</title><rect x="466.0" y="387.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="469.0" y="398.0"></text>
</g>
<g>
<title>ipv4_get_l4proto?[nf_conntrack_ipv4] (4 samples, 0.24%)</title><rect x="466.7" y="387.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="469.7" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (39 samples, 2.39%)</title><rect x="469.6" y="387.0" width="28.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="472.6" y="398.0">nf..</text>
</g>
<g>
<title>__nf_conntrack_find_get?[nf_conntrack] (9 samples, 0.55%)</title><rect x="472.5" y="371.0" width="6.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="475.5" y="382.0"></text>
</g>
<g>
<title>__nf_ct_l4proto_find?[nf_conntrack] (1 samples, 0.06%)</title><rect x="479.0" y="371.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="482.0" y="382.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.06%)</title><rect x="479.7" y="371.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="482.7" y="382.0"></text>
</g>
<g>
<title>hash_conntrack_raw?[nf_conntrack] (3 samples, 0.18%)</title><rect x="480.4" y="371.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="483.4" y="382.0"></text>
</g>
<g>
<title>ipv4_get_l4proto?[nf_conntrack_ipv4] (3 samples, 0.18%)</title><rect x="482.6" y="371.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="485.6" y="382.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (2 samples, 0.12%)</title><rect x="484.7" y="371.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="487.7" y="382.0"></text>
</g>
<g>
<title>ipv4_pkt_to_tuple?[nf_conntrack_ipv4] (1 samples, 0.06%)</title><rect x="485.5" y="355.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="488.5" y="366.0"></text>
</g>
<g>
<title>tcp_error?[nf_conntrack] (4 samples, 0.24%)</title><rect x="486.2" y="371.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="489.2" y="382.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (8 samples, 0.49%)</title><rect x="489.1" y="371.0" width="5.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="492.1" y="382.0"></text>
</g>
<g>
<title>tcp_in_window?[nf_conntrack] (6 samples, 0.37%)</title><rect x="490.5" y="355.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="493.5" y="366.0"></text>
</g>
<g>
<title>tcp_pkt_to_tuple?[nf_conntrack] (4 samples, 0.24%)</title><rect x="494.9" y="371.0" width="2.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="497.9" y="382.0"></text>
</g>
<g>
<title>nf_ct_get_tuple?[nf_conntrack] (2 samples, 0.12%)</title><rect x="497.8" y="387.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="500.8" y="398.0"></text>
</g>
<g>
<title>tcp_error?[nf_conntrack] (1 samples, 0.06%)</title><rect x="499.2" y="387.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="502.2" y="398.0"></text>
</g>
<g>
<title>tcp_get_timeouts?[nf_conntrack] (2 samples, 0.12%)</title><rect x="499.9" y="387.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="502.9" y="398.0"></text>
</g>
<g>
<title>tcp_packet?[nf_conntrack] (2 samples, 0.12%)</title><rect x="501.4" y="387.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="504.4" y="398.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (1 samples, 0.06%)</title><rect x="502.8" y="403.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="505.8" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_local_fn?[nf_nat_ipv4] (1 samples, 0.06%)</title><rect x="503.5" y="403.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="506.5" y="414.0"></text>
</g>
<g>
<title>ip_output (247 samples, 15.13%)</title><rect x="504.3" y="435.0" width="178.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="507.3" y="446.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (233 samples, 14.27%)</title><rect x="505.0" y="419.0" width="168.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="508.0" y="430.0">ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (231 samples, 14.15%)</title><rect x="506.4" y="403.0" width="166.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="509.4" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (202 samples, 12.37%)</title><rect x="513.6" y="387.0" width="146.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="516.6" y="398.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.17 (202 samples, 12.37%)</title><rect x="513.6" y="371.0" width="146.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="516.6" y="382.0">do_softirq.part.17</text>
</g>
<g>
<title>do_softirq_own_stack (200 samples, 12.25%)</title><rect x="515.1" y="355.0" width="144.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="518.1" y="366.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (200 samples, 12.25%)</title><rect x="515.1" y="339.0" width="144.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="518.1" y="350.0">__softirqentry_tex..</text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.06%)</title><rect x="516.5" y="323.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="519.5" y="334.0"></text>
</g>
<g>
<title>net_rx_action (195 samples, 11.94%)</title><rect x="517.3" y="323.0" width="140.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="520.3" y="334.0">net_rx_action</text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.06%)</title><rect x="519.4" y="307.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="522.4" y="318.0"></text>
</g>
<g>
<title>process_backlog (191 samples, 11.70%)</title><rect x="520.2" y="307.0" width="138.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="523.2" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (187 samples, 11.45%)</title><rect x="523.0" y="291.0" width="135.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="526.0" y="302.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (186 samples, 11.39%)</title><rect x="523.8" y="275.0" width="134.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="526.8" y="286.0">__netif_receive_s..</text>
</g>
<g>
<title>ip_rcv (182 samples, 11.15%)</title><rect x="526.7" y="259.0" width="131.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="529.7" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (168 samples, 10.29%)</title><rect x="528.1" y="243.0" width="121.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="531.1" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (165 samples, 10.10%)</title><rect x="530.3" y="227.0" width="119.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="533.3" y="238.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (142 samples, 8.70%)</title><rect x="530.3" y="211.0" width="102.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="533.3" y="222.0">ip_local_del..</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.06%)</title><rect x="530.3" y="195.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="533.3" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (141 samples, 8.63%)</title><rect x="531.0" y="195.0" width="101.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="534.0" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.18%)</title><rect x="536.8" y="179.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="539.8" y="190.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.33 (2 samples, 0.12%)</title><rect x="538.9" y="179.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="541.9" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (4 samples, 0.24%)</title><rect x="540.4" y="179.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="543.4" y="190.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.06%)</title><rect x="541.8" y="163.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="544.8" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.06%)</title><rect x="542.6" y="163.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="545.6" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (123 samples, 7.53%)</title><rect x="543.3" y="179.0" width="88.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="546.3" y="190.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_rcv_established (122 samples, 7.47%)</title><rect x="543.3" y="163.0" width="88.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="546.3" y="174.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.06%)</title><rect x="544.0" y="147.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="547.0" y="158.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.06%)</title><rect x="544.7" y="147.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="547.7" y="158.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.06%)</title><rect x="545.4" y="147.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="548.4" y="158.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.06%)</title><rect x="545.4" y="131.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="548.4" y="142.0"></text>
</g>
<g>
<title>native_sched_clock (1 samples, 0.06%)</title><rect x="545.4" y="115.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="548.4" y="126.0"></text>
</g>
<g>
<title>tcp_ack (35 samples, 2.14%)</title><rect x="546.2" y="147.0" width="25.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="549.2" y="158.0">t..</text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.18%)</title><rect x="552.7" y="131.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="555.7" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.06%)</title><rect x="554.8" y="131.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="557.8" y="142.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.06%)</title><rect x="555.6" y="131.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="558.6" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (16 samples, 0.98%)</title><rect x="556.3" y="131.0" width="11.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="559.3" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.37%)</title><rect x="559.9" y="115.0" width="4.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="562.9" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.12%)</title><rect x="559.9" y="99.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="562.9" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.12%)</title><rect x="559.9" y="83.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="562.9" y="94.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.12%)</title><rect x="559.9" y="67.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="562.9" y="78.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.24%)</title><rect x="561.3" y="99.0" width="2.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="564.3" y="110.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.24%)</title><rect x="561.3" y="83.0" width="2.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="564.3" y="94.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.06%)</title><rect x="562.1" y="67.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="565.1" y="78.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.12%)</title><rect x="562.8" y="67.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="565.8" y="78.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.12%)</title><rect x="562.8" y="51.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="565.8" y="62.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.12%)</title><rect x="562.8" y="35.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="565.8" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.06%)</title><rect x="564.2" y="115.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="567.2" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.41 (3 samples, 0.18%)</title><rect x="565.0" y="115.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="568.0" y="126.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.06%)</title><rect x="567.1" y="115.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="570.1" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (5 samples, 0.31%)</title><rect x="567.8" y="131.0" width="3.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="570.8" y="142.0"></text>
</g>
<g>
<title>tcp_data_queue (77 samples, 4.72%)</title><rect x="571.5" y="147.0" width="55.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="574.5" y="158.0">tcp_d..</text>
</g>
<g>
<title>dst_release (2 samples, 0.12%)</title><rect x="572.2" y="131.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="575.2" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (68 samples, 4.16%)</title><rect x="573.6" y="131.0" width="49.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="576.6" y="142.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (66 samples, 4.04%)</title><rect x="575.1" y="115.0" width="47.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="578.1" y="126.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (66 samples, 4.04%)</title><rect x="575.1" y="99.0" width="47.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="578.1" y="110.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (65 samples, 3.98%)</title><rect x="575.8" y="83.0" width="47.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="578.8" y="94.0">__lo..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.12%)</title><rect x="622.8" y="131.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="625.8" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (4 samples, 0.24%)</title><rect x="624.2" y="131.0" width="2.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="627.2" y="142.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.06%)</title><rect x="627.1" y="147.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="630.1" y="158.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.06%)</title><rect x="627.8" y="147.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="630.8" y="158.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.12%)</title><rect x="628.5" y="147.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="631.5" y="158.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.06%)</title><rect x="630.0" y="147.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="633.0" y="158.0"></text>
</g>
<g>
<title>tcp_urg (1 samples, 0.06%)</title><rect x="630.7" y="147.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="633.7" y="158.0"></text>
</g>
<g>
<title>tcp_urg (1 samples, 0.06%)</title><rect x="631.4" y="163.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="634.4" y="174.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.06%)</title><rect x="632.2" y="179.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="635.2" y="190.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (1 samples, 0.06%)</title><rect x="632.9" y="211.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="635.9" y="222.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (3 samples, 0.18%)</title><rect x="633.6" y="211.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="636.6" y="222.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_fn?[iptable_nat] (2 samples, 0.12%)</title><rect x="635.8" y="211.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="638.8" y="222.0"></text>
</g>
<g>
<title>ipv4_helper?[nf_conntrack_ipv4] (4 samples, 0.24%)</title><rect x="637.2" y="211.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="640.2" y="222.0"></text>
</g>
<g>
<title>nf_hook_slow (12 samples, 0.73%)</title><rect x="640.1" y="211.0" width="8.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="643.1" y="222.0"></text>
</g>
<g>
<title>iptable_filter_hook?[iptable_filter] (5 samples, 0.31%)</title><rect x="641.5" y="195.0" width="3.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="644.5" y="206.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (5 samples, 0.31%)</title><rect x="641.5" y="179.0" width="3.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="644.5" y="190.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (3 samples, 0.18%)</title><rect x="645.2" y="195.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="648.2" y="206.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (2 samples, 0.12%)</title><rect x="645.9" y="179.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="648.9" y="190.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (2 samples, 0.12%)</title><rect x="647.3" y="195.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="650.3" y="206.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (1 samples, 0.06%)</title><rect x="648.1" y="179.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="651.1" y="190.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.06%)</title><rect x="648.8" y="211.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="651.8" y="222.0"></text>
</g>
<g>
<title>ip_sabotage_in?[br_netfilter] (2 samples, 0.12%)</title><rect x="649.5" y="243.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="652.5" y="254.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_in?[iptable_nat] (1 samples, 0.06%)</title><rect x="650.9" y="243.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="653.9" y="254.0"></text>
</g>
<g>
<title>ipv4_conntrack_defrag?[nf_defrag_ipv4] (2 samples, 0.12%)</title><rect x="651.7" y="243.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="654.7" y="254.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack_ipv4] (1 samples, 0.06%)</title><rect x="653.1" y="243.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="656.1" y="254.0"></text>
</g>
<g>
<title>nf_hook_slow (6 samples, 0.37%)</title><rect x="653.8" y="243.0" width="4.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="656.8" y="254.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (1 samples, 0.06%)</title><rect x="654.6" y="227.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="657.6" y="238.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_in?[iptable_nat] (1 samples, 0.06%)</title><rect x="655.3" y="227.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="658.3" y="238.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in?[nf_nat_ipv4] (1 samples, 0.06%)</title><rect x="655.3" y="211.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="658.3" y="222.0"></text>
</g>
<g>
<title>ipv4_conntrack_in?[nf_conntrack_ipv4] (2 samples, 0.12%)</title><rect x="656.0" y="227.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="659.0" y="238.0"></text>
</g>
<g>
<title>nf_conntrack_in?[nf_conntrack] (2 samples, 0.12%)</title><rect x="656.0" y="211.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="659.0" y="222.0"></text>
</g>
<g>
<title>nf_nat_ipv4_in?[nf_nat_ipv4] (1 samples, 0.06%)</title><rect x="657.4" y="227.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="660.4" y="238.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.06%)</title><rect x="658.2" y="323.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="661.2" y="334.0"></text>
</g>
<g>
<title>rcu_bh_qs (1 samples, 0.06%)</title><rect x="658.9" y="323.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="661.9" y="334.0"></text>
</g>
<g>
<title>dev_queue_xmit (18 samples, 1.10%)</title><rect x="659.6" y="387.0" width="13.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="662.6" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (18 samples, 1.10%)</title><rect x="659.6" y="371.0" width="13.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="662.6" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (10 samples, 0.61%)</title><rect x="663.2" y="355.0" width="7.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="666.2" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.49%)</title><rect x="663.9" y="339.0" width="5.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="666.9" y="350.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.18%)</title><rect x="666.1" y="323.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="669.1" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.18%)</title><rect x="666.1" y="307.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="669.1" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.18%)</title><rect x="666.1" y="291.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="669.1" y="302.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.12%)</title><rect x="668.3" y="323.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="671.3" y="334.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.06%)</title><rect x="669.7" y="339.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="672.7" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.06%)</title><rect x="670.5" y="355.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="673.5" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.06%)</title><rect x="671.2" y="355.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="674.2" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.06%)</title><rect x="671.9" y="355.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="674.9" y="366.0"></text>
</g>
<g>
<title>do_softirq.part.17 (1 samples, 0.06%)</title><rect x="672.6" y="387.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="675.6" y="398.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (3 samples, 0.18%)</title><rect x="673.3" y="419.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="676.3" y="430.0"></text>
</g>
<g>
<title>ipv4_helper?[nf_conntrack_ipv4] (2 samples, 0.12%)</title><rect x="675.5" y="419.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="678.5" y="430.0"></text>
</g>
<g>
<title>nf_hook_slow (8 samples, 0.49%)</title><rect x="677.0" y="419.0" width="5.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="680.0" y="430.0"></text>
</g>
<g>
<title>iptable_mangle_hook?[iptable_mangle] (2 samples, 0.12%)</title><rect x="677.0" y="403.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="680.0" y="414.0"></text>
</g>
<g>
<title>ipt_do_table?[ip_tables] (2 samples, 0.12%)</title><rect x="677.0" y="387.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="680.0" y="398.0"></text>
</g>
<g>
<title>iptable_nat_ipv4_out?[iptable_nat] (3 samples, 0.18%)</title><rect x="678.4" y="403.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="681.4" y="414.0"></text>
</g>
<g>
<title>nf_nat_ipv4_out?[nf_nat_ipv4] (2 samples, 0.12%)</title><rect x="679.1" y="387.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="682.1" y="398.0"></text>
</g>
<g>
<title>ipv4_confirm?[nf_conntrack_ipv4] (3 samples, 0.18%)</title><rect x="680.6" y="403.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="683.6" y="414.0"></text>
</g>
<g>
<title>nf_ct_deliver_cached_events?[nf_conntrack] (3 samples, 0.18%)</title><rect x="680.6" y="387.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="683.6" y="398.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.06%)</title><rect x="682.7" y="435.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="685.7" y="446.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.06%)</title><rect x="683.5" y="451.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="686.5" y="462.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.24%)</title><rect x="684.2" y="467.0" width="2.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="687.2" y="478.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.12%)</title><rect x="685.6" y="451.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="688.6" y="462.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.06%)</title><rect x="686.4" y="435.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="689.4" y="446.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.06%)</title><rect x="687.1" y="467.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="690.1" y="478.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.06%)</title><rect x="687.8" y="467.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="690.8" y="478.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.06%)</title><rect x="687.8" y="451.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="690.8" y="462.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.06%)</title><rect x="688.5" y="483.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="691.5" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.06%)</title><rect x="689.2" y="483.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="692.2" y="494.0"></text>
</g>
<g>
<title>skb_push (3 samples, 0.18%)</title><rect x="690.0" y="483.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="693.0" y="494.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.12%)</title><rect x="692.1" y="483.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="695.1" y="494.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (1 samples, 0.06%)</title><rect x="692.9" y="467.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="695.9" y="478.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.06%)</title><rect x="692.9" y="451.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="695.9" y="462.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.12%)</title><rect x="693.6" y="483.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="696.6" y="494.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.06%)</title><rect x="694.3" y="467.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="697.3" y="478.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.49%)</title><rect x="695.0" y="531.0" width="5.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="698.0" y="542.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.12%)</title><rect x="695.0" y="515.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="698.0" y="526.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.37%)</title><rect x="696.5" y="515.0" width="4.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="699.5" y="526.0"></text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.06%)</title><rect x="700.1" y="499.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="703.1" y="510.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.06%)</title><rect x="700.8" y="531.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="703.8" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.06%)</title><rect x="701.5" y="547.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="704.5" y="558.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.06%)</title><rect x="702.2" y="563.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="705.2" y="574.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.12%)</title><rect x="703.0" y="579.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="706.0" y="590.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.12%)</title><rect x="703.0" y="563.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="706.0" y="574.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (2 samples, 0.12%)</title><rect x="703.0" y="547.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="706.0" y="558.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.12%)</title><rect x="703.0" y="531.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="706.0" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.06%)</title><rect x="704.4" y="579.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="707.4" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.12%)</title><rect x="705.1" y="595.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="708.1" y="606.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.12%)</title><rect x="705.1" y="579.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="708.1" y="590.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.12%)</title><rect x="705.1" y="563.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="708.1" y="574.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.12%)</title><rect x="705.1" y="547.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="708.1" y="558.0"></text>
</g>
<g>
<title>fput (1 samples, 0.06%)</title><rect x="706.6" y="611.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="709.6" y="622.0"></text>
</g>
<g>
<title>sys_sendto (2 samples, 0.12%)</title><rect x="707.3" y="643.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="710.3" y="654.0"></text>
</g>
<g>
<title>send@plt (1 samples, 0.06%)</title><rect x="708.8" y="675.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="711.8" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="709.5" y="707.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="712.5" y="718.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="709.5" y="691.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="712.5" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.31%)</title><rect x="710.2" y="755.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.24%)</title><rect x="710.9" y="739.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.24%)</title><rect x="710.9" y="723.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="713.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.06%)</title><rect x="712.4" y="707.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.06%)</title><rect x="713.1" y="707.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="716.1" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.06%)</title><rect x="713.1" y="691.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="716.1" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.06%)</title><rect x="713.1" y="675.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="716.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (14 samples, 0.86%)</title><rect x="713.8" y="771.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="716.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (14 samples, 0.86%)</title><rect x="713.8" y="755.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="716.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="716.7" y="739.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="716.7" y="723.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="719.7" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="716.7" y="707.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="719.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.18%)</title><rect x="717.4" y="739.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="720.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.06%)</title><rect x="718.9" y="723.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.18%)</title><rect x="719.6" y="739.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.06%)</title><rect x="720.3" y="723.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="723.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.06%)</title><rect x="721.0" y="723.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="721.0" y="707.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.0" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="721.0" y="691.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="724.0" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.12%)</title><rect x="721.8" y="739.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="724.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.06%)</title><rect x="723.2" y="739.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="723.2" y="723.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="726.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.06%)</title><rect x="723.2" y="707.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="726.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.06%)</title><rect x="723.2" y="691.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="726.2" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.06%)</title><rect x="723.9" y="771.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="726.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.entity (440 samples, 26.94%)</title><rect x="724.6" y="771.0" width="318.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="727.6" y="782.0">ru/mail/polis/service/kate/moreva/MySimpleH..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="725.4" y="755.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.06%)</title><rect x="725.4" y="739.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="728.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="725.4" y="723.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="728.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="725.4" y="707.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="728.4" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="725.4" y="691.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.4" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.06%)</title><rect x="725.4" y="675.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.putEntity (438 samples, 26.82%)</title><rect x="726.1" y="755.0" width="316.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="729.1" y="766.0">ru/mail/polis/service/kate/moreva/MySimpleH..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.upsert (438 samples, 26.82%)</title><rect x="726.1" y="739.0" width="316.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.1" y="750.0">ru/mail/polis/dao/kate/moreva/MyDAO.upsert</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.24%)</title><rect x="726.1" y="723.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="729.1" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (4 samples, 0.24%)</title><rect x="726.1" y="707.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="729.1" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.18%)</title><rect x="726.8" y="691.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.8" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.18%)</title><rect x="726.8" y="675.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.8" y="686.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.12%)</title><rect x="727.5" y="659.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="730.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.06%)</title><rect x="727.5" y="643.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.5" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.06%)</title><rect x="727.5" y="627.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="730.5" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.06%)</title><rect x="727.5" y="611.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="730.5" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.06%)</title><rect x="728.3" y="643.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="731.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.upsert (74 samples, 4.53%)</title><rect x="729.0" y="723.0" width="53.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="732.0" y="734.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (74 samples, 4.53%)</title><rect x="729.0" y="707.0" width="53.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="732.0" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (73 samples, 4.47%)</title><rect x="729.7" y="691.0" width="52.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.7" y="702.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.18%)</title><rect x="751.4" y="675.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="754.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (7 samples, 0.43%)</title><rect x="753.6" y="675.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="756.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.06%)</title><rect x="755.7" y="659.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="758.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.06%)</title><rect x="755.7" y="643.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.06%)</title><rect x="755.7" y="627.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="758.7" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.06%)</title><rect x="755.7" y="611.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="758.7" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.06%)</title><rect x="755.7" y="595.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="758.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.18%)</title><rect x="756.4" y="659.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="759.4" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.12%)</title><rect x="757.2" y="643.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="760.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.12%)</title><rect x="757.2" y="627.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="760.2" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.06%)</title><rect x="757.2" y="611.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.2" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.06%)</title><rect x="757.2" y="595.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="760.2" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.06%)</title><rect x="757.2" y="579.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="760.2" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.06%)</title><rect x="757.9" y="611.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="760.9" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.06%)</title><rect x="757.9" y="595.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="760.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (29 samples, 1.78%)</title><rect x="758.6" y="675.0" width="21.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="761.6" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (28 samples, 1.71%)</title><rect x="759.3" y="659.0" width="20.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="762.3" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (20 samples, 1.22%)</title><rect x="765.1" y="643.0" width="14.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="768.1" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.12%)</title><rect x="765.1" y="627.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.1" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (6 samples, 0.37%)</title><rect x="766.6" y="627.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.6" y="638.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 0.55%)</title><rect x="770.9" y="627.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="773.9" y="638.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.18%)</title><rect x="775.2" y="611.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="778.2" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.06%)</title><rect x="776.7" y="595.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.7" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.18%)</title><rect x="777.4" y="627.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="780.4" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.12%)</title><rect x="778.1" y="611.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="781.1" y="622.0"></text>
</g>
<g>
<title>vectorizedMismatch (2 samples, 0.12%)</title><rect x="778.1" y="595.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="781.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (4 samples, 0.24%)</title><rect x="779.6" y="675.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="782.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MyDAO.flush (360 samples, 22.05%)</title><rect x="782.5" y="723.0" width="260.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="785.5" y="734.0">ru/mail/polis/dao/kate/moreva/MyDAO..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/MemTable.close (4 samples, 0.24%)</title><rect x="782.5" y="707.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="785.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.clear (4 samples, 0.24%)</title><rect x="782.5" y="691.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="785.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.unlinkNode (3 samples, 0.18%)</title><rect x="783.2" y="675.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="786.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.06%)</title><rect x="783.9" y="659.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.06%)</title><rect x="783.9" y="643.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="786.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (1 samples, 0.06%)</title><rect x="784.6" y="659.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.serialize (356 samples, 21.80%)</title><rect x="785.3" y="707.0" width="257.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="788.3" y="718.0">ru/mail/polis/dao/kate/moreva/SSTa..</text>
</g>
<g>
<title>java/util/ArrayList.forEach (69 samples, 4.23%)</title><rect x="785.3" y="691.0" width="49.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.3" y="702.0">java/..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable$$Lambda$61/1117514116.accept (69 samples, 4.23%)</title><rect x="785.3" y="675.0" width="49.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="788.3" y="686.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/SSTable.lambda$serialize$0 (69 samples, 4.23%)</title><rect x="785.3" y="659.0" width="49.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="788.3" y="670.0">ru/ma..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (69 samples, 4.23%)</title><rect x="785.3" y="643.0" width="49.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="788.3" y="654.0">sun/n..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.06%)</title><rect x="785.3" y="627.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.3" y="638.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.06%)</title><rect x="785.3" y="611.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (66 samples, 4.04%)</title><rect x="786.1" y="627.0" width="47.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.1" y="638.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (62 samples, 3.80%)</title><rect x="786.1" y="611.0" width="44.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="789.1" y="622.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (62 samples, 3.80%)</title><rect x="786.1" y="595.0" width="44.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="789.1" y="606.0">sun/..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (62 samples, 3.80%)</title><rect x="786.1" y="579.0" width="44.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="789.1" y="590.0">sun/..</text>
</g>
<g>
<title>__GI___write (59 samples, 3.61%)</title><rect x="786.8" y="563.0" width="42.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="789.8" y="574.0">__GI..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (38 samples, 2.33%)</title><rect x="802.0" y="547.0" width="27.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="805.0" y="558.0">e..</text>
</g>
<g>
<title>do_syscall_64 (38 samples, 2.33%)</title><rect x="802.0" y="531.0" width="27.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="805.0" y="542.0">d..</text>
</g>
<g>
<title>sys_write (34 samples, 2.08%)</title><rect x="804.9" y="515.0" width="24.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="807.9" y="526.0">s..</text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.06%)</title><rect x="804.9" y="499.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="807.9" y="510.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.06%)</title><rect x="804.9" y="483.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="807.9" y="494.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.06%)</title><rect x="804.9" y="467.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="807.9" y="478.0"></text>
</g>
<g>
<title>vfs_write (33 samples, 2.02%)</title><rect x="805.6" y="499.0" width="23.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="808.6" y="510.0">v..</text>
</g>
<g>
<title>__vfs_write (32 samples, 1.96%)</title><rect x="806.3" y="483.0" width="23.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="809.3" y="494.0">_..</text>
</g>
<g>
<title>new_sync_write (32 samples, 1.96%)</title><rect x="806.3" y="467.0" width="23.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="809.3" y="478.0">n..</text>
</g>
<g>
<title>ext4_file_write_iter (31 samples, 1.90%)</title><rect x="806.3" y="451.0" width="22.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="809.3" y="462.0">e..</text>
</g>
<g>
<title>__generic_file_write_iter (30 samples, 1.84%)</title><rect x="806.3" y="435.0" width="21.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="809.3" y="446.0">_..</text>
</g>
<g>
<title>file_update_time (1 samples, 0.06%)</title><rect x="806.3" y="419.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="809.3" y="430.0"></text>
</g>
<g>
<title>generic_perform_write (29 samples, 1.78%)</title><rect x="807.0" y="419.0" width="21.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="810.0" y="430.0"></text>
</g>
<g>
<title>ext4_da_write_begin (5 samples, 0.31%)</title><rect x="807.7" y="403.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="810.7" y="414.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (3 samples, 0.18%)</title><rect x="808.5" y="387.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="811.5" y="398.0"></text>
</g>
<g>
<title>pagecache_get_page (3 samples, 0.18%)</title><rect x="808.5" y="371.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="811.5" y="382.0"></text>
</g>
<g>
<title>find_get_entry (3 samples, 0.18%)</title><rect x="808.5" y="355.0" width="2.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="811.5" y="366.0"></text>
</g>
<g>
<title>radix_tree_lookup_slot (2 samples, 0.12%)</title><rect x="809.2" y="339.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="812.2" y="350.0"></text>
</g>
<g>
<title>__radix_tree_lookup (2 samples, 0.12%)</title><rect x="809.2" y="323.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="812.2" y="334.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.06%)</title><rect x="810.6" y="387.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="813.6" y="398.0"></text>
</g>
<g>
<title>ext4_da_write_end (17 samples, 1.04%)</title><rect x="811.4" y="403.0" width="12.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="814.4" y="414.0"></text>
</g>
<g>
<title>__ext4_journal_stop (4 samples, 0.24%)</title><rect x="812.1" y="387.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="815.1" y="398.0"></text>
</g>
<g>
<title>jbd2_journal_stop (4 samples, 0.24%)</title><rect x="812.1" y="371.0" width="2.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="815.1" y="382.0"></text>
</g>
<g>
<title>__wake_up (3 samples, 0.18%)</title><rect x="812.1" y="355.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="815.1" y="366.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.06%)</title><rect x="812.1" y="339.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="815.1" y="350.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.12%)</title><rect x="812.8" y="339.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="815.8" y="350.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.06%)</title><rect x="813.5" y="323.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="816.5" y="334.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.06%)</title><rect x="814.2" y="355.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="817.2" y="366.0"></text>
</g>
<g>
<title>generic_write_end (12 samples, 0.73%)</title><rect x="815.0" y="387.0" width="8.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="818.0" y="398.0"></text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.06%)</title><rect x="815.0" y="371.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="818.0" y="382.0"></text>
</g>
<g>
<title>__mark_inode_dirty (7 samples, 0.43%)</title><rect x="815.7" y="371.0" width="5.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="818.7" y="382.0"></text>
</g>
<g>
<title>ext4_dirty_inode (7 samples, 0.43%)</title><rect x="815.7" y="355.0" width="5.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="818.7" y="366.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (1 samples, 0.06%)</title><rect x="815.7" y="339.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="818.7" y="350.0"></text>
</g>
<g>
<title>ext4_journal_check_start (1 samples, 0.06%)</title><rect x="815.7" y="323.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="818.7" y="334.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.06%)</title><rect x="815.7" y="307.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="818.7" y="318.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (6 samples, 0.37%)</title><rect x="816.4" y="339.0" width="4.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="819.4" y="350.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (3 samples, 0.18%)</title><rect x="816.4" y="323.0" width="2.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="819.4" y="334.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.06%)</title><rect x="817.1" y="307.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="820.1" y="318.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.06%)</title><rect x="817.9" y="307.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="820.9" y="318.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (3 samples, 0.18%)</title><rect x="818.6" y="323.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="821.6" y="334.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.06%)</title><rect x="820.0" y="307.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="823.0" y="318.0"></text>
</g>
<g>
<title>block_write_end (4 samples, 0.24%)</title><rect x="820.8" y="371.0" width="2.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="823.8" y="382.0"></text>
</g>
<g>
<title>__block_commit_write.isra.34 (4 samples, 0.24%)</title><rect x="820.8" y="355.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="823.8" y="366.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (2 samples, 0.12%)</title><rect x="823.6" y="403.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="826.6" y="414.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (1 samples, 0.06%)</title><rect x="824.4" y="387.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="827.4" y="398.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (3 samples, 0.18%)</title><rect x="825.1" y="403.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="828.1" y="414.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.06%)</title><rect x="827.3" y="403.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="830.3" y="414.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.06%)</title><rect x="828.0" y="435.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="831.0" y="446.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.06%)</title><rect x="828.7" y="451.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="831.7" y="462.0"></text>
</g>
<g>
<title>fdval (2 samples, 0.12%)</title><rect x="829.4" y="563.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="832.4" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.18%)</title><rect x="830.9" y="611.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="833.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.18%)</title><rect x="830.9" y="595.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="833.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.18%)</title><rect x="830.9" y="579.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="833.9" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.06%)</title><rect x="832.3" y="563.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="835.3" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.06%)</title><rect x="833.0" y="611.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.12%)</title><rect x="833.8" y="627.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.8" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.12%)</title><rect x="833.8" y="611.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="836.8" y="622.0"></text>
</g>
<g>
<title>java/util/Spliterators$1Adapter.hasNext (5 samples, 0.31%)</title><rect x="835.2" y="691.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="838.2" y="702.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.tryAdvance (5 samples, 0.31%)</title><rect x="835.2" y="675.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="838.2" y="686.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.doAdvance (5 samples, 0.31%)</title><rect x="835.2" y="659.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.2" y="670.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$AbstractWrappingSpliterator.fillBuffer (5 samples, 0.31%)</title><rect x="835.2" y="643.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.2" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator$$Lambda$60/427347478.getAsBoolean (5 samples, 0.31%)</title><rect x="835.2" y="627.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="838.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0 (5 samples, 0.31%)</title><rect x="835.2" y="611.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="838.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.tryAdvance (5 samples, 0.31%)</title><rect x="835.2" y="595.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.24%)</title><rect x="835.2" y="579.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="838.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (4 samples, 0.24%)</title><rect x="835.2" y="563.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (4 samples, 0.24%)</title><rect x="835.2" y="547.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="838.2" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.12%)</title><rect x="836.7" y="531.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="839.7" y="542.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.12%)</title><rect x="836.7" y="515.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="839.7" y="526.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.12%)</title><rect x="836.7" y="499.0" width="1.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="839.7" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.06%)</title><rect x="838.1" y="579.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="841.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kate/moreva/Cell.getKey (1 samples, 0.06%)</title><rect x="838.8" y="691.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.8" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.06%)</title><rect x="838.8" y="675.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="841.8" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.06%)</title><rect x="838.8" y="659.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="841.8" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="838.8" y="643.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="841.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="838.8" y="627.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="841.8" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.06%)</title><rect x="838.8" y="611.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="841.8" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (281 samples, 17.21%)</title><rect x="839.5" y="691.0" width="203.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="842.5" y="702.0">sun/nio/ch/FileChannelImpl...</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 0.18%)</title><rect x="840.3" y="675.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.3" y="686.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.18%)</title><rect x="840.3" y="659.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.3" y="670.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.18%)</title><rect x="840.3" y="643.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="843.3" y="654.0"></text>
</g>
<g>
<title>java/lang/System$2.blockedOn (3 samples, 0.18%)</title><rect x="840.3" y="627.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="843.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.blockedOn (2 samples, 0.12%)</title><rect x="841.0" y="611.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.0" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (271 samples, 16.60%)</title><rect x="842.4" y="675.0" width="195.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="845.4" y="686.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.12%)</title><rect x="843.2" y="659.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="846.2" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.06%)</title><rect x="843.9" y="643.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="846.9" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.18%)</title><rect x="844.6" y="659.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="847.6" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.12%)</title><rect x="845.3" y="643.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="848.3" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.06%)</title><rect x="845.3" y="627.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="848.3" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.06%)</title><rect x="846.0" y="627.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="849.0" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (261 samples, 15.98%)</title><rect x="846.8" y="659.0" width="188.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="849.8" y="670.0">sun/nio/ch/IOUtil.writeF..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (260 samples, 15.92%)</title><rect x="847.5" y="643.0" width="187.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="850.5" y="654.0">sun/nio/ch/FileDispatche..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (260 samples, 15.92%)</title><rect x="847.5" y="627.0" width="187.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="850.5" y="638.0">sun/nio/ch/FileDispatche..</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.12%)</title><rect x="849.7" y="611.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="852.7" y="622.0"></text>
</g>
<g>
<title>__GI___write (250 samples, 15.31%)</title><rect x="851.1" y="611.0" width="180.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="854.1" y="622.0">__GI___write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (184 samples, 11.27%)</title><rect x="898.8" y="595.0" width="133.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="901.8" y="606.0">entry_SYSCALL_64..</text>
</g>
<g>
<title>do_syscall_64 (183 samples, 11.21%)</title><rect x="898.8" y="579.0" width="132.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="901.8" y="590.0">do_syscall_64</text>
</g>
<g>
<title>sys_write (159 samples, 9.74%)</title><rect x="916.1" y="563.0" width="114.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="919.1" y="574.0">sys_write</text>
</g>
<g>
<title>__fdget_pos (9 samples, 0.55%)</title><rect x="916.9" y="547.0" width="6.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="919.9" y="558.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.49%)</title><rect x="916.9" y="531.0" width="5.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="919.9" y="542.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.43%)</title><rect x="917.6" y="515.0" width="5.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="920.6" y="526.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.06%)</title><rect x="922.6" y="531.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="925.6" y="542.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.06%)</title><rect x="923.4" y="547.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="926.4" y="558.0"></text>
</g>
<g>
<title>__sb_end_write (3 samples, 0.18%)</title><rect x="924.1" y="547.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="927.1" y="558.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.06%)</title><rect x="926.3" y="547.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="929.3" y="558.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.06%)</title><rect x="927.0" y="547.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="930.0" y="558.0"></text>
</g>
<g>
<title>vfs_write (143 samples, 8.76%)</title><rect x="927.7" y="547.0" width="103.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="930.7" y="558.0">vfs_write</text>
</g>
<g>
<title>__sb_start_write (1 samples, 0.06%)</title><rect x="927.7" y="531.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="930.7" y="542.0"></text>
</g>
<g>
<title>__vfs_write (139 samples, 8.51%)</title><rect x="928.4" y="531.0" width="100.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="931.4" y="542.0">__vfs_write</text>
</g>
<g>
<title>ext4_file_write_iter (1 samples, 0.06%)</title><rect x="928.4" y="515.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="931.4" y="526.0"></text>
</g>
<g>
<title>new_sync_write (138 samples, 8.45%)</title><rect x="929.1" y="515.0" width="99.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="932.1" y="526.0">new_sync_write</text>
</g>
<g>
<title>ext4_file_write_iter (137 samples, 8.39%)</title><rect x="929.9" y="499.0" width="99.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="932.9" y="510.0">ext4_file_wr..</text>
</g>
<g>
<title>__generic_file_write_iter (131 samples, 8.02%)</title><rect x="932.0" y="483.0" width="94.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="935.0" y="494.0">__generic_f..</text>
</g>
<g>
<title>ext4_da_write_begin (3 samples, 0.18%)</title><rect x="932.8" y="467.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="935.8" y="478.0"></text>
</g>
<g>
<title>ext4_da_write_end (1 samples, 0.06%)</title><rect x="934.9" y="467.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="937.9" y="478.0"></text>
</g>
<g>
<title>file_update_time (3 samples, 0.18%)</title><rect x="935.6" y="467.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="938.6" y="478.0"></text>
</g>
<g>
<title>current_time (1 samples, 0.06%)</title><rect x="937.1" y="451.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="940.1" y="462.0"></text>
</g>
<g>
<title>current_kernel_time64 (1 samples, 0.06%)</title><rect x="937.1" y="435.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="940.1" y="446.0"></text>
</g>
<g>
<title>generic_perform_write (123 samples, 7.53%)</title><rect x="937.8" y="467.0" width="88.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="940.8" y="478.0">generic_pe..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (2 samples, 0.12%)</title><rect x="940.0" y="451.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="943.0" y="462.0"></text>
</g>
<g>
<title>ext4_da_write_begin (42 samples, 2.57%)</title><rect x="941.4" y="451.0" width="30.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="944.4" y="462.0">ex..</text>
</g>
<g>
<title>__ext4_journal_start_sb (21 samples, 1.29%)</title><rect x="945.0" y="435.0" width="15.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="948.0" y="446.0"></text>
</g>
<g>
<title>jbd2__journal_start (20 samples, 1.22%)</title><rect x="945.8" y="419.0" width="14.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="948.8" y="430.0"></text>
</g>
<g>
<title>_raw_read_lock (2 samples, 0.12%)</title><rect x="950.8" y="403.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="953.8" y="414.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.06%)</title><rect x="952.3" y="403.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="955.3" y="414.0"></text>
</g>
<g>
<title>memset_erms (3 samples, 0.18%)</title><rect x="953.0" y="403.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="956.0" y="414.0"></text>
</g>
<g>
<title>start_this_handle (7 samples, 0.43%)</title><rect x="955.2" y="403.0" width="5.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="958.2" y="414.0"></text>
</g>
<g>
<title>add_transaction_credits (3 samples, 0.18%)</title><rect x="958.0" y="387.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="961.0" y="398.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.12%)</title><rect x="960.2" y="435.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="963.2" y="446.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (14 samples, 0.86%)</title><rect x="961.7" y="435.0" width="10.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="964.7" y="446.0"></text>
</g>
<g>
<title>pagecache_get_page (14 samples, 0.86%)</title><rect x="961.7" y="419.0" width="10.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="964.7" y="430.0"></text>
</g>
<g>
<title>find_get_entry (7 samples, 0.43%)</title><rect x="966.0" y="403.0" width="5.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="969.0" y="414.0"></text>
</g>
<g>
<title>radix_tree_lookup_slot (5 samples, 0.31%)</title><rect x="967.4" y="387.0" width="3.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="970.4" y="398.0"></text>
</g>
<g>
<title>__radix_tree_lookup (5 samples, 0.31%)</title><rect x="967.4" y="371.0" width="3.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="970.4" y="382.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.06%)</title><rect x="971.1" y="403.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="974.1" y="414.0"></text>
</g>
<g>
<title>ext4_da_write_end (63 samples, 3.86%)</title><rect x="971.8" y="451.0" width="45.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="974.8" y="462.0">ext4..</text>
</g>
<g>
<title>__ext4_journal_stop (12 samples, 0.73%)</title><rect x="975.4" y="435.0" width="8.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="978.4" y="446.0"></text>
</g>
<g>
<title>jbd2_journal_stop (10 samples, 0.61%)</title><rect x="975.4" y="419.0" width="7.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="978.4" y="430.0"></text>
</g>
<g>
<title>__wake_up (3 samples, 0.18%)</title><rect x="979.7" y="403.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="982.7" y="414.0"></text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.18%)</title><rect x="979.7" y="387.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="982.7" y="398.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.18%)</title><rect x="979.7" y="371.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="982.7" y="382.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.06%)</title><rect x="981.9" y="403.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="984.9" y="414.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.12%)</title><rect x="982.6" y="419.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="985.6" y="430.0"></text>
</g>
<g>
<title>generic_write_end (45 samples, 2.76%)</title><rect x="984.1" y="435.0" width="32.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="987.1" y="446.0">ge..</text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.06%)</title><rect x="984.1" y="419.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="987.1" y="430.0"></text>
</g>
<g>
<title>__mark_inode_dirty (38 samples, 2.33%)</title><rect x="984.8" y="419.0" width="27.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="987.8" y="430.0">_..</text>
</g>
<g>
<title>ext4_dirty_inode (36 samples, 2.20%)</title><rect x="986.2" y="403.0" width="26.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="989.2" y="414.0">e..</text>
</g>
<g>
<title>ext4_mark_inode_dirty (34 samples, 2.08%)</title><rect x="987.0" y="387.0" width="24.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="990.0" y="398.0">e..</text>
</g>
<g>
<title>ext4_mark_iloc_dirty (17 samples, 1.04%)</title><rect x="987.0" y="371.0" width="12.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="990.0" y="382.0"></text>
</g>
<g>
<title>ext4_do_update_inode (11 samples, 0.67%)</title><rect x="991.3" y="355.0" width="7.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="994.3" y="366.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (3 samples, 0.18%)</title><rect x="995.6" y="339.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="998.6" y="350.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.06%)</title><rect x="997.1" y="323.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1000.1" y="334.0"></text>
</g>
<g>
<title>from_kgid (1 samples, 0.06%)</title><rect x="997.8" y="339.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1000.8" y="350.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.06%)</title><rect x="997.8" y="323.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1000.8" y="334.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.06%)</title><rect x="998.5" y="339.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1001.5" y="350.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (17 samples, 1.04%)</title><rect x="999.2" y="371.0" width="12.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1002.2" y="382.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (16 samples, 0.98%)</title><rect x="999.2" y="355.0" width="11.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1002.2" y="366.0"></text>
</g>
<g>
<title>__getblk_gfp (3 samples, 0.18%)</title><rect x="1005.0" y="339.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1008.0" y="350.0"></text>
</g>
<g>
<title>__find_get_block (3 samples, 0.18%)</title><rect x="1005.0" y="323.0" width="2.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1008.0" y="334.0"></text>
</g>
<g>
<title>mark_page_accessed (1 samples, 0.06%)</title><rect x="1006.5" y="307.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1009.5" y="318.0"></text>
</g>
<g>
<title>ext4_get_group_desc (5 samples, 0.31%)</title><rect x="1007.2" y="339.0" width="3.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1010.2" y="350.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (1 samples, 0.06%)</title><rect x="1010.8" y="355.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1013.8" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (1 samples, 0.06%)</title><rect x="1010.8" y="339.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1013.8" y="350.0"></text>
</g>
<g>
<title>jbd2_write_access_granted.part.9 (1 samples, 0.06%)</title><rect x="1010.8" y="323.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1013.8" y="334.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.06%)</title><rect x="1011.5" y="387.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1014.5" y="398.0"></text>
</g>
<g>
<title>block_write_end (6 samples, 0.37%)</title><rect x="1012.2" y="419.0" width="4.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1015.2" y="430.0"></text>
</g>
<g>
<title>__block_commit_write.isra.34 (6 samples, 0.37%)</title><rect x="1012.2" y="403.0" width="4.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1015.2" y="414.0"></text>
</g>
<g>
<title>mark_buffer_dirty (2 samples, 0.12%)</title><rect x="1015.1" y="387.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1018.1" y="398.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.06%)</title><rect x="1016.6" y="435.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1019.6" y="446.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.18%)</title><rect x="1017.3" y="451.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1020.3" y="462.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (8 samples, 0.49%)</title><rect x="1019.5" y="451.0" width="5.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1022.5" y="462.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.06%)</title><rect x="1020.2" y="435.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1023.2" y="446.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (5 samples, 0.31%)</title><rect x="1020.9" y="435.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1023.9" y="446.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.06%)</title><rect x="1024.5" y="435.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1027.5" y="446.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (1 samples, 0.06%)</title><rect x="1025.2" y="451.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1028.2" y="462.0"></text>
</g>
<g>
<title>unlock_page (1 samples, 0.06%)</title><rect x="1026.0" y="451.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1029.0" y="462.0"></text>
</g>
<g>
<title>down_write_trylock (2 samples, 0.12%)</title><rect x="1026.7" y="483.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1029.7" y="494.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.06%)</title><rect x="1028.1" y="483.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1031.1" y="494.0"></text>
</g>
<g>
<title>fsnotify (1 samples, 0.06%)</title><rect x="1028.9" y="531.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1031.9" y="542.0"></text>
</g>
<g>
<title>rw_verify_area (2 samples, 0.12%)</title><rect x="1029.6" y="531.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1032.6" y="542.0"></text>
</g>
<g>
<title>security_file_permission (2 samples, 0.12%)</title><rect x="1029.6" y="515.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1032.6" y="526.0"></text>
</g>
<g>
<title>apparmor_file_permission (2 samples, 0.12%)</title><rect x="1029.6" y="499.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1032.6" y="510.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.12%)</title><rect x="1029.6" y="483.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1032.6" y="494.0"></text>
</g>
<g>
<title>sys_write (1 samples, 0.06%)</title><rect x="1031.0" y="579.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1034.0" y="590.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.18%)</title><rect x="1031.8" y="611.0" width="2.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1034.8" y="622.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.12%)</title><rect x="1033.9" y="611.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1036.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.18%)</title><rect x="1035.4" y="659.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1038.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.12%)</title><rect x="1035.4" y="643.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1038.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.12%)</title><rect x="1035.4" y="627.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1038.4" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.06%)</title><rect x="1036.8" y="643.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1039.8" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.06%)</title><rect x="1037.5" y="659.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.06%)</title><rect x="1037.5" y="643.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1040.5" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (6 samples, 0.37%)</title><rect x="1038.3" y="675.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1041.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.06%)</title><rect x="1040.4" y="659.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1043.4" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThread.current (2 samples, 0.12%)</title><rect x="1041.1" y="659.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1044.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (2 samples, 0.12%)</title><rect x="1042.6" y="787.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1045.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.isEmpty (1 samples, 0.06%)</title><rect x="1043.3" y="771.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1046.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 0.24%)</title><rect x="1044.0" y="787.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.24%)</title><rect x="1044.0" y="771.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1047.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.12%)</title><rect x="1044.0" y="755.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1047.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.12%)</title><rect x="1045.5" y="755.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1048.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.12%)</title><rect x="1045.5" y="739.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1048.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.06%)</title><rect x="1046.2" y="723.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1049.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.37%)</title><rect x="1046.9" y="787.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1049.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.37%)</title><rect x="1046.9" y="771.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1049.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.12%)</title><rect x="1046.9" y="755.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1049.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.24%)</title><rect x="1048.4" y="755.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1051.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.24%)</title><rect x="1048.4" y="739.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1051.4" y="750.0"></text>
</g>
<g>
<title>RequestHandler0_entity.handleRequest (3 samples, 0.18%)</title><rect x="1049.1" y="723.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 1.35%)</title><rect x="1051.3" y="819.0" width="15.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1054.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10 samples, 0.61%)</title><rect x="1052.0" y="803.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1055.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.12%)</title><rect x="1052.7" y="787.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1055.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.43%)</title><rect x="1054.2" y="787.0" width="5.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1057.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.43%)</title><rect x="1054.2" y="771.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1057.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.12%)</title><rect x="1057.8" y="755.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1060.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.31%)</title><rect x="1059.2" y="803.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1062.2" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.31%)</title><rect x="1059.2" y="787.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1062.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.24%)</title><rect x="1059.9" y="771.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1062.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1062.1" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1065.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (6 samples, 0.37%)</title><rect x="1062.8" y="803.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1065.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.12%)</title><rect x="1067.2" y="819.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1070.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.06%)</title><rect x="1067.9" y="803.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1070.9" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.12%)</title><rect x="1068.6" y="819.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1071.6" y="830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.12%)</title><rect x="1068.6" y="803.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1071.6" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.37%)</title><rect x="1070.0" y="819.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1073.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.12%)</title><rect x="1070.0" y="803.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1073.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.12%)</title><rect x="1070.0" y="787.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1073.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.24%)</title><rect x="1071.5" y="803.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1074.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.18%)</title><rect x="1071.5" y="787.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1074.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1071.5" y="771.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1074.5" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.12%)</title><rect x="1072.2" y="771.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1075.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (1 samples, 0.06%)</title><rect x="1073.7" y="787.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1076.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1073.7" y="771.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1076.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.06%)</title><rect x="1074.4" y="819.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1077.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.06%)</title><rect x="1074.4" y="803.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1077.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1074.4" y="787.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1077.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.06%)</title><rect x="1074.4" y="771.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1077.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.06%)</title><rect x="1074.4" y="755.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1077.4" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (156 samples, 9.55%)</title><rect x="1075.1" y="835.0" width="112.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1078.1" y="846.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (156 samples, 9.55%)</title><rect x="1075.1" y="819.0" width="112.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1078.1" y="830.0">one/nio/net/Na..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (9 samples, 0.55%)</title><rect x="1088.1" y="803.0" width="6.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1091.1" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.37%)</title><rect x="1089.6" y="787.0" width="4.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1092.6" y="798.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.12%)</title><rect x="1090.3" y="771.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1093.3" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.12%)</title><rect x="1091.7" y="771.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1094.7" y="782.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.06%)</title><rect x="1093.2" y="771.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.2" y="782.0"></text>
</g>
<g>
<title>memmove@plt (1 samples, 0.06%)</title><rect x="1093.9" y="787.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1096.9" y="798.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.06%)</title><rect x="1094.6" y="803.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1097.6" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.12%)</title><rect x="1095.3" y="803.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1098.3" y="814.0"></text>
</g>
<g>
<title>recv (126 samples, 7.72%)</title><rect x="1096.8" y="803.0" width="91.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1099.8" y="814.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (74 samples, 4.53%)</title><rect x="1134.4" y="787.0" width="53.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1137.4" y="798.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (73 samples, 4.47%)</title><rect x="1134.4" y="771.0" width="52.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1137.4" y="782.0">do_sy..</text>
</g>
<g>
<title>sys_recvfrom (57 samples, 3.49%)</title><rect x="1145.9" y="755.0" width="41.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1148.9" y="766.0">sys..</text>
</g>
<g>
<title>SYSC_recvfrom (55 samples, 3.37%)</title><rect x="1145.9" y="739.0" width="39.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1148.9" y="750.0">SYS..</text>
</g>
<g>
<title>import_single_range (1 samples, 0.06%)</title><rect x="1146.6" y="723.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1149.6" y="734.0"></text>
</g>
<g>
<title>sock_recvmsg (45 samples, 2.76%)</title><rect x="1147.4" y="723.0" width="32.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1150.4" y="734.0">so..</text>
</g>
<g>
<title>inet_recvmsg (40 samples, 2.45%)</title><rect x="1147.4" y="707.0" width="28.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1150.4" y="718.0">in..</text>
</g>
<g>
<title>tcp_recvmsg (40 samples, 2.45%)</title><rect x="1147.4" y="691.0" width="28.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1150.4" y="702.0">tc..</text>
</g>
<g>
<title>__kfree_skb (9 samples, 0.55%)</title><rect x="1153.9" y="675.0" width="6.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1156.9" y="686.0"></text>
</g>
<g>
<title>skb_release_all (9 samples, 0.55%)</title><rect x="1153.9" y="659.0" width="6.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1156.9" y="670.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.12%)</title><rect x="1153.9" y="643.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1156.9" y="654.0"></text>
</g>
<g>
<title>sock_rfree (7 samples, 0.43%)</title><rect x="1155.3" y="643.0" width="5.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1158.3" y="654.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.24%)</title><rect x="1160.4" y="675.0" width="2.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1163.4" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (14 samples, 0.86%)</title><rect x="1163.3" y="675.0" width="10.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1166.3" y="686.0"></text>
</g>
<g>
<title>__check_object_size (5 samples, 0.31%)</title><rect x="1163.3" y="659.0" width="3.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1166.3" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.18%)</title><rect x="1164.7" y="643.0" width="2.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1167.7" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (8 samples, 0.49%)</title><rect x="1166.9" y="659.0" width="5.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1169.9" y="670.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.31%)</title><rect x="1168.3" y="643.0" width="3.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1171.3" y="654.0"></text>
</g>
<g>
<title>copyout (1 samples, 0.06%)</title><rect x="1171.9" y="643.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1174.9" y="654.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.06%)</title><rect x="1172.7" y="659.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1175.7" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.18%)</title><rect x="1173.4" y="675.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.12%)</title><rect x="1174.1" y="659.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1177.1" y="670.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.06%)</title><rect x="1175.5" y="675.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.06%)</title><rect x="1175.5" y="659.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.06%)</title><rect x="1175.5" y="643.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>native_sched_clock (1 samples, 0.06%)</title><rect x="1175.5" y="627.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.31%)</title><rect x="1176.3" y="707.0" width="3.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (5 samples, 0.31%)</title><rect x="1176.3" y="691.0" width="3.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1179.3" y="702.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (5 samples, 0.31%)</title><rect x="1176.3" y="675.0" width="3.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1179.3" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (5 samples, 0.31%)</title><rect x="1176.3" y="659.0" width="3.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1179.3" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.49%)</title><rect x="1179.9" y="723.0" width="5.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>__fdget (4 samples, 0.24%)</title><rect x="1179.9" y="707.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.24%)</title><rect x="1179.9" y="691.0" width="2.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.24%)</title><rect x="1179.9" y="675.0" width="2.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.24%)</title><rect x="1182.8" y="707.0" width="2.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.12%)</title><rect x="1185.7" y="739.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1188.7" y="750.0"></text>
</g>
<g>
<title>sys_recvfrom (1 samples, 0.06%)</title><rect x="1187.1" y="771.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1190.1" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.06%)</title><rect x="1187.8" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.8" y="862.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.06%)</title><rect x="1187.8" y="835.0" width="0.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1190.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.06%)</title><rect x="1187.8" y="819.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1190.8" y="830.0"></text>
</g>
<g>
<title>[VM Periodic Tas tid=30056] (1 samples, 0.06%)</title><rect x="1188.6" y="899.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.6" y="910.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.06%)</title><rect x="1188.6" y="883.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1191.6" y="894.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.06%)</title><rect x="1188.6" y="867.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1191.6" y="878.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.06%)</title><rect x="1188.6" y="851.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="862.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.06%)</title><rect x="1188.6" y="835.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.06%)</title><rect x="1188.6" y="819.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.06%)</title><rect x="1188.6" y="803.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.06%)</title><rect x="1188.6" y="787.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1191.6" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.06%)</title><rect x="1188.6" y="771.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1191.6" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.06%)</title><rect x="1188.6" y="755.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1191.6" y="766.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.06%)</title><rect x="1188.6" y="739.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1191.6" y="750.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.06%)</title><rect x="1188.6" y="723.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1191.6" y="734.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.06%)</title><rect x="1188.6" y="707.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1191.6" y="718.0"></text>
</g>
<g>
<title>[VM Thread tid=30048] (1 samples, 0.06%)</title><rect x="1189.3" y="899.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1192.3" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.06%)</title><rect x="1189.3" y="883.0" width="0.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1192.3" y="894.0"></text>
</g>
<g>
<title>_IO_vsnprintf (1 samples, 0.06%)</title><rect x="1189.3" y="867.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1192.3" y="878.0"></text>
</g>
<g>
<title>__GI_vfprintf (1 samples, 0.06%)</title><rect x="1189.3" y="851.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1192.3" y="862.0"></text>
</g>
<g>
<title>__GI___printf_fp_l (1 samples, 0.06%)</title><rect x="1189.3" y="835.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1192.3" y="846.0"></text>
</g>
</g>
</svg>
