<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="341"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="341"> </text>
<g id="frames">
<g>
<title>all (627 samples, 100.00%)</title><rect x="10.0" y="307.0" width="1180.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="13.0" y="318.0">all</text>
</g>
<g>
<title>[GC Thread#0 tid=30346] (3 samples, 0.48%)</title><rect x="10.0" y="291.0" width="5.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="10.0" y="275.0" width="5.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="10.0" y="259.0" width="5.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="10.0" y="243.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.32%)</title><rect x="10.0" y="227.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.32%)</title><rect x="10.0" y="211.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.32%)</title><rect x="10.0" y="195.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.32%)</title><rect x="10.0" y="179.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 0.32%)</title><rect x="10.0" y="163.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.32%)</title><rect x="10.0" y="147.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.32%)</title><rect x="10.0" y="131.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (1 samples, 0.16%)</title><rect x="11.9" y="115.0" width="1.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="14.9" y="126.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (1 samples, 0.16%)</title><rect x="13.8" y="227.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="16.8" y="238.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.16%)</title><rect x="13.8" y="211.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.8" y="222.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.16%)</title><rect x="13.8" y="195.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.8" y="206.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="13.8" y="179.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.8" y="190.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.16%)</title><rect x="13.8" y="163.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="16.8" y="174.0"></text>
</g>
<g>
<title>[GC Thread#1 tid=30869] (3 samples, 0.48%)</title><rect x="15.6" y="291.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="18.6" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="15.6" y="275.0" width="5.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.6" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="15.6" y="259.0" width="5.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.6" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="15.6" y="243.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.6" y="254.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.16%)</title><rect x="15.6" y="227.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.6" y="238.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.16%)</title><rect x="15.6" y="211.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="18.6" y="222.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.32%)</title><rect x="17.5" y="227.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="20.5" y="238.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="17.5" y="211.0" width="1.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="20.5" y="222.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="19.4" y="211.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.4" y="222.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.16%)</title><rect x="19.4" y="195.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="22.4" y="206.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.16%)</title><rect x="19.4" y="179.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="22.4" y="190.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.16%)</title><rect x="19.4" y="163.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="22.4" y="174.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.16%)</title><rect x="19.4" y="147.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="22.4" y="158.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.16%)</title><rect x="19.4" y="131.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="22.4" y="142.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.16%)</title><rect x="19.4" y="115.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.4" y="126.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.16%)</title><rect x="19.4" y="99.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="22.4" y="110.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.16%)</title><rect x="19.4" y="83.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="22.4" y="94.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;ObjArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.16%)</title><rect x="19.4" y="67.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="22.4" y="78.0"></text>
</g>
<g>
<title>[GC Thread#2 tid=30870] (3 samples, 0.48%)</title><rect x="21.3" y="291.0" width="5.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="24.3" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="21.3" y="275.0" width="5.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="24.3" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="21.3" y="259.0" width="5.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="24.3" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="21.3" y="243.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="24.3" y="254.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.32%)</title><rect x="21.3" y="227.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="24.3" y="238.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="21.3" y="211.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="24.3" y="222.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.16%)</title><rect x="21.3" y="195.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="24.3" y="206.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="23.2" y="211.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="26.2" y="222.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.16%)</title><rect x="23.2" y="195.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="26.2" y="206.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.16%)</title><rect x="23.2" y="179.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="26.2" y="190.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.16%)</title><rect x="23.2" y="163.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.2" y="174.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.16%)</title><rect x="23.2" y="147.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="26.2" y="158.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.16%)</title><rect x="23.2" y="131.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="26.2" y="142.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.16%)</title><rect x="23.2" y="115.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="26.2" y="126.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.16%)</title><rect x="23.2" y="99.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="26.2" y="110.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.16%)</title><rect x="23.2" y="83.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="26.2" y="94.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.16%)</title><rect x="23.2" y="67.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.2" y="78.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.16%)</title><rect x="25.1" y="227.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="28.1" y="238.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.16%)</title><rect x="25.1" y="211.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.1" y="222.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.63] (1 samples, 0.16%)</title><rect x="25.1" y="195.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="28.1" y="206.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.16%)</title><rect x="25.1" y="179.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="28.1" y="190.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.16%)</title><rect x="25.1" y="163.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="28.1" y="174.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.16%)</title><rect x="25.1" y="147.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="28.1" y="158.0"></text>
</g>
<g>
<title>[GC Thread#3 tid=30871] (3 samples, 0.48%)</title><rect x="26.9" y="291.0" width="5.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="29.9" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="26.9" y="275.0" width="5.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="29.9" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="26.9" y="259.0" width="5.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="29.9" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="26.9" y="243.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="29.9" y="254.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.32%)</title><rect x="26.9" y="227.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="29.9" y="238.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="26.9" y="211.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.9" y="222.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="26.9" y="195.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="29.9" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.16%)</title><rect x="26.9" y="179.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="29.9" y="190.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.16%)</title><rect x="26.9" y="163.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.9" y="174.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.16%)</title><rect x="26.9" y="147.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="29.9" y="158.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.16%)</title><rect x="26.9" y="131.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="29.9" y="142.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.16%)</title><rect x="26.9" y="115.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.9" y="126.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="28.8" y="211.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.8" y="222.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.16%)</title><rect x="28.8" y="195.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="31.8" y="206.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.16%)</title><rect x="28.8" y="179.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="31.8" y="190.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.16%)</title><rect x="28.8" y="163.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="31.8" y="174.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.16%)</title><rect x="28.8" y="147.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="31.8" y="158.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.16%)</title><rect x="28.8" y="131.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="31.8" y="142.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.16%)</title><rect x="28.8" y="115.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="31.8" y="126.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.16%)</title><rect x="28.8" y="99.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="31.8" y="110.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (1 samples, 0.16%)</title><rect x="30.7" y="227.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="33.7" y="238.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.16%)</title><rect x="30.7" y="211.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="33.7" y="222.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.16%)</title><rect x="30.7" y="195.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="33.7" y="206.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="30.7" y="179.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="33.7" y="190.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.16%)</title><rect x="30.7" y="163.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="33.7" y="174.0"></text>
</g>
<g>
<title>[GC Thread#4 tid=30872] (3 samples, 0.48%)</title><rect x="32.6" y="291.0" width="5.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="35.6" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="32.6" y="275.0" width="5.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="35.6" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="32.6" y="259.0" width="5.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="35.6" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="32.6" y="243.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="35.6" y="254.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.32%)</title><rect x="32.6" y="227.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="35.6" y="238.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="32.6" y="211.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="35.6" y="222.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.16%)</title><rect x="32.6" y="195.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="35.6" y="206.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.16%)</title><rect x="32.6" y="179.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="35.6" y="190.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="34.5" y="211.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="37.5" y="222.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.16%)</title><rect x="34.5" y="195.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="37.5" y="206.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.16%)</title><rect x="34.5" y="179.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="37.5" y="190.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.16%)</title><rect x="34.5" y="163.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="37.5" y="174.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (1 samples, 0.16%)</title><rect x="34.5" y="147.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="37.5" y="158.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringScanRSClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1ScanObjsDuringScanRSClosure*, oopDesc*, Klass*) (1 samples, 0.16%)</title><rect x="34.5" y="131.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="37.5" y="142.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (1 samples, 0.16%)</title><rect x="36.3" y="227.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="39.3" y="238.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.16%)</title><rect x="36.3" y="211.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="39.3" y="222.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.16%)</title><rect x="36.3" y="195.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="39.3" y="206.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="36.3" y="179.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="39.3" y="190.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.16%)</title><rect x="36.3" y="163.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="39.3" y="174.0"></text>
</g>
<g>
<title>[GC Thread#5 tid=30873] (3 samples, 0.48%)</title><rect x="38.2" y="291.0" width="5.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="41.2" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="38.2" y="275.0" width="5.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="41.2" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="38.2" y="259.0" width="5.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="41.2" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="38.2" y="243.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="41.2" y="254.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.32%)</title><rect x="38.2" y="227.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="41.2" y="238.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.32%)</title><rect x="38.2" y="211.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="41.2" y="222.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.16%)</title><rect x="38.2" y="195.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="41.2" y="206.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.16%)</title><rect x="38.2" y="179.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="41.2" y="190.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.16%)</title><rect x="38.2" y="163.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="41.2" y="174.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.16%)</title><rect x="38.2" y="147.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="41.2" y="158.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.16%)</title><rect x="38.2" y="131.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.2" y="142.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.16%)</title><rect x="38.2" y="115.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="41.2" y="126.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.16%)</title><rect x="38.2" y="99.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="41.2" y="110.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.16%)</title><rect x="40.1" y="195.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="43.1" y="206.0"></text>
</g>
<g>
<title>SymbolPropertyTable::oops_do(OopClosure*) (1 samples, 0.16%)</title><rect x="40.1" y="179.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="43.1" y="190.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.16%)</title><rect x="40.1" y="163.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="43.1" y="174.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (1 samples, 0.16%)</title><rect x="42.0" y="227.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="45.0" y="238.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.16%)</title><rect x="42.0" y="211.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="45.0" y="222.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.16%)</title><rect x="42.0" y="195.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="45.0" y="206.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="42.0" y="179.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="45.0" y="190.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.16%)</title><rect x="42.0" y="163.0" width="1.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="45.0" y="174.0"></text>
</g>
<g>
<title>[GC Thread#6 tid=30874] (3 samples, 0.48%)</title><rect x="43.9" y="291.0" width="5.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="46.9" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="43.9" y="275.0" width="5.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="46.9" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="43.9" y="259.0" width="5.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="46.9" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="43.9" y="243.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="46.9" y="254.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.48%)</title><rect x="43.9" y="227.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="46.9" y="238.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="43.9" y="211.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="46.9" y="222.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="43.9" y="195.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="46.9" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.16%)</title><rect x="43.9" y="179.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="46.9" y="190.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.16%)</title><rect x="43.9" y="163.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="46.9" y="174.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.16%)</title><rect x="43.9" y="147.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="46.9" y="158.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.16%)</title><rect x="43.9" y="131.0" width="1.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="46.9" y="142.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.16%)</title><rect x="43.9" y="115.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="46.9" y="126.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.16%)</title><rect x="43.9" y="99.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="46.9" y="110.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.32%)</title><rect x="45.8" y="211.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="48.8" y="222.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.32%)</title><rect x="45.8" y="195.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="48.8" y="206.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.32%)</title><rect x="45.8" y="179.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="48.8" y="190.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (2 samples, 0.32%)</title><rect x="45.8" y="163.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="48.8" y="174.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (2 samples, 0.32%)</title><rect x="45.8" y="147.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="48.8" y="158.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.32%)</title><rect x="45.8" y="131.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="48.8" y="142.0"></text>
</g>
<g>
<title>[GC Thread#7 tid=30875] (3 samples, 0.48%)</title><rect x="49.5" y="291.0" width="5.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="52.5" y="302.0"></text>
</g>
<g>
<title>start_thread (3 samples, 0.48%)</title><rect x="49.5" y="275.0" width="5.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="52.5" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (3 samples, 0.48%)</title><rect x="49.5" y="259.0" width="5.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="52.5" y="270.0"></text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.48%)</title><rect x="49.5" y="243.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="52.5" y="254.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.32%)</title><rect x="49.5" y="227.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="52.5" y="238.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="49.5" y="211.0" width="1.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="52.5" y="222.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="51.4" y="211.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="54.4" y="222.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.16%)</title><rect x="51.4" y="195.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="54.4" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.16%)</title><rect x="51.4" y="179.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="54.4" y="190.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.16%)</title><rect x="51.4" y="163.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="54.4" y="174.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.16%)</title><rect x="51.4" y="147.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="54.4" y="158.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.121] (1 samples, 0.16%)</title><rect x="51.4" y="131.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="54.4" y="142.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.16%)</title><rect x="51.4" y="115.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="54.4" y="126.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.16%)</title><rect x="51.4" y="99.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="54.4" y="110.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (1 samples, 0.16%)</title><rect x="53.3" y="227.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="56.3" y="238.0"></text>
</g>
<g>
<title>RefProcPhase1Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.16%)</title><rect x="53.3" y="211.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="56.3" y="222.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_ref_reconsider_work(DiscoveredList&amp;, ReferencePolicy*, BoolObjectClosure*, OopClosure*, VoidClosure*) (1 samples, 0.16%)</title><rect x="53.3" y="195.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="56.3" y="206.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.16%)</title><rect x="53.3" y="179.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="56.3" y="190.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.16%)</title><rect x="53.3" y="163.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="56.3" y="174.0"></text>
</g>
<g>
<title>[NIO Selector #2 tid=30365] (601 samples, 95.85%)</title><rect x="55.2" y="291.0" width="1131.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="58.2" y="302.0">[NIO Selector #2 tid=30365]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (601 samples, 95.85%)</title><rect x="55.2" y="275.0" width="1131.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.2" y="286.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (142 samples, 22.65%)</title><rect x="60.8" y="259.0" width="267.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.8" y="270.0">one/nio/net/NativeSelector.select</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (10 samples, 1.59%)</title><rect x="74.0" y="243.0" width="18.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="77.0" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.48%)</title><rect x="87.2" y="227.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.2" y="238.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (125 samples, 19.94%)</title><rect x="92.8" y="243.0" width="235.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.8" y="254.0">one/nio/net/NativeSelector.epol..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.80%)</title><rect x="113.5" y="227.0" width="9.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="116.5" y="238.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.16%)</title><rect x="122.9" y="227.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="125.9" y="238.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.16%)</title><rect x="122.9" y="211.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="125.9" y="222.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.16%)</title><rect x="122.9" y="195.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="125.9" y="206.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.32%)</title><rect x="124.8" y="227.0" width="3.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="127.8" y="238.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.32%)</title><rect x="128.6" y="227.0" width="3.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="131.6" y="238.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.32%)</title><rect x="132.3" y="227.0" width="3.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="135.3" y="238.0"></text>
</g>
<g>
<title>epoll_wait (79 samples, 12.60%)</title><rect x="136.1" y="227.0" width="148.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="139.1" y="238.0">epoll_wait</text>
</g>
<g>
<title>gettimeofday (10 samples, 1.59%)</title><rect x="284.8" y="227.0" width="18.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="287.8" y="238.0"></text>
</g>
<g>
<title>__clock_gettime (10 samples, 1.59%)</title><rect x="284.8" y="211.0" width="18.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="287.8" y="222.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.32%)</title><rect x="284.8" y="195.0" width="3.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="287.8" y="206.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (8 samples, 1.28%)</title><rect x="288.5" y="195.0" width="15.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="291.5" y="206.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 1.28%)</title><rect x="288.5" y="179.0" width="15.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="291.5" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 2.07%)</title><rect x="303.6" y="227.0" width="24.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="306.6" y="238.0">o..</text>
</g>
<g>
<title>gettimeofday (13 samples, 2.07%)</title><rect x="303.6" y="211.0" width="24.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="306.6" y="222.0">g..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.96%)</title><rect x="303.6" y="195.0" width="11.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="306.6" y="206.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (5 samples, 0.80%)</title><rect x="305.5" y="179.0" width="9.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="308.5" y="190.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (7 samples, 1.12%)</title><rect x="314.9" y="195.0" width="13.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="317.9" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (456 samples, 72.73%)</title><rect x="328.1" y="259.0" width="858.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.1" y="270.0">one/nio/net/Session.process</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.16%)</title><rect x="333.7" y="243.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="336.7" y="254.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (449 samples, 71.61%)</title><rect x="335.6" y="243.0" width="845.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="338.6" y="254.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (306 samples, 48.80%)</title><rect x="335.6" y="227.0" width="575.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="338.6" y="238.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (185 samples, 29.51%)</title><rect x="345.0" y="211.0" width="348.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="348.0" y="222.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (184 samples, 29.35%)</title><rect x="346.9" y="195.0" width="346.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="349.9" y="206.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (1 samples, 0.16%)</title><rect x="350.6" y="179.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.6" y="190.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (17 samples, 2.71%)</title><rect x="352.5" y="179.0" width="32.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="355.5" y="190.0">on..</text>
</g>
<g>
<title>java/util/HashMap.get (15 samples, 2.39%)</title><rect x="356.3" y="163.0" width="28.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.3" y="174.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 1.91%)</title><rect x="356.3" y="147.0" width="22.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="359.3" y="158.0">j..</text>
</g>
<g>
<title>java/lang/String.equals (9 samples, 1.44%)</title><rect x="361.9" y="131.0" width="17.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.9" y="142.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.32%)</title><rect x="365.7" y="115.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.7" y="126.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (5 samples, 0.80%)</title><rect x="369.5" y="115.0" width="9.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="372.5" y="126.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.32%)</title><rect x="375.1" y="99.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="378.1" y="110.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.48%)</title><rect x="378.9" y="147.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="381.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.48%)</title><rect x="378.9" y="131.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.9" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.48%)</title><rect x="378.9" y="115.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="381.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.handleDefault (164 samples, 26.16%)</title><rect x="384.5" y="179.0" width="308.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="387.5" y="190.0">ru/mail/polis/service/kate/moreva/MySimple..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (154 samples, 24.56%)</title><rect x="384.5" y="163.0" width="289.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.5" y="174.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (145 samples, 23.13%)</title><rect x="384.5" y="147.0" width="272.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.5" y="158.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (38 samples, 6.06%)</title><rect x="386.4" y="131.0" width="71.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="389.4" y="142.0">one/nio/..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.16%)</title><rect x="407.1" y="115.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="410.1" y="126.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.32%)</title><rect x="409.0" y="115.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.0" y="126.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (24 samples, 3.83%)</title><rect x="412.7" y="115.0" width="45.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="415.7" y="126.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.48%)</title><rect x="416.5" y="99.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.5" y="110.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.48%)</title><rect x="416.5" y="83.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.5" y="94.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 0.48%)</title><rect x="422.2" y="99.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.2" y="110.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.80%)</title><rect x="427.8" y="99.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="430.8" y="110.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.48%)</title><rect x="431.6" y="83.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.6" y="94.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.32%)</title><rect x="431.6" y="67.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.6" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (1 samples, 0.16%)</title><rect x="435.3" y="67.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="438.3" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (1 samples, 0.16%)</title><rect x="435.3" y="51.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.3" y="62.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.length (1 samples, 0.16%)</title><rect x="435.3" y="35.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="438.3" y="46.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 1.75%)</title><rect x="437.2" y="99.0" width="20.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="440.2" y="110.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 1.75%)</title><rect x="437.2" y="83.0" width="20.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="440.2" y="94.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 1.75%)</title><rect x="437.2" y="67.0" width="20.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.2" y="78.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.32%)</title><rect x="454.1" y="51.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.1" y="62.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (106 samples, 16.91%)</title><rect x="457.9" y="131.0" width="199.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="460.9" y="142.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.&lt;init&gt; (2 samples, 0.32%)</title><rect x="457.9" y="115.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="460.9" y="126.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (104 samples, 16.59%)</title><rect x="461.7" y="115.0" width="195.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.7" y="126.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (103 samples, 16.43%)</title><rect x="463.6" y="99.0" width="193.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.6" y="110.0">one/nio/net/Session$Array..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (103 samples, 16.43%)</title><rect x="463.6" y="83.0" width="193.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.6" y="94.0">one/nio/net/NativeSocket...</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (14 samples, 2.23%)</title><rect x="469.2" y="67.0" width="26.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="472.2" y="78.0">J..</text>
</g>
<g>
<title>__memmove_avx_unaligned (1 samples, 0.16%)</title><rect x="471.1" y="51.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="474.1" y="62.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (12 samples, 1.91%)</title><rect x="473.0" y="51.0" width="22.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="476.0" y="62.0">j..</text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.48%)</title><rect x="476.7" y="35.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="479.7" y="46.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (7 samples, 1.12%)</title><rect x="482.4" y="35.0" width="13.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="485.4" y="46.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.32%)</title><rect x="495.6" y="67.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="498.6" y="78.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.80%)</title><rect x="499.3" y="67.0" width="9.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="502.3" y="78.0"></text>
</g>
<g>
<title>send (79 samples, 12.60%)</title><rect x="508.7" y="67.0" width="148.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="511.7" y="78.0">send</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 1.12%)</title><rect x="657.4" y="147.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.4" y="158.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 1.12%)</title><rect x="657.4" y="131.0" width="13.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="660.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.16%)</title><rect x="659.3" y="115.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="662.3" y="126.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.16%)</title><rect x="659.3" y="99.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="662.3" y="110.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.80%)</title><rect x="661.2" y="115.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.2" y="126.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.16%)</title><rect x="663.0" y="99.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.0" y="110.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.16%)</title><rect x="663.0" y="83.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.0" y="94.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.16%)</title><rect x="663.0" y="67.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.0" y="78.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.48%)</title><rect x="664.9" y="99.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="667.9" y="110.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.32%)</title><rect x="666.8" y="83.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="669.8" y="94.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.16%)</title><rect x="668.7" y="67.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.7" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.32%)</title><rect x="670.6" y="147.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="673.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (10 samples, 1.59%)</title><rect x="674.3" y="163.0" width="18.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.3" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.48%)</title><rect x="687.5" y="147.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="690.5" y="158.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.48%)</title><rect x="687.5" y="131.0" width="5.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="690.5" y="142.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.32%)</title><rect x="689.4" y="115.0" width="3.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="692.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (48 samples, 7.66%)</title><rect x="693.2" y="211.0" width="90.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="696.2" y="222.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (11 samples, 1.75%)</title><rect x="732.7" y="195.0" width="20.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="735.7" y="206.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 1.28%)</title><rect x="738.3" y="179.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="741.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 1.28%)</title><rect x="738.3" y="163.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="741.3" y="174.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.16%)</title><rect x="738.3" y="147.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.3" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 1.12%)</title><rect x="740.2" y="147.0" width="13.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="743.2" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.32%)</title><rect x="749.6" y="131.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="752.6" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 2.23%)</title><rect x="753.4" y="195.0" width="26.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="756.4" y="206.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 2.23%)</title><rect x="753.4" y="179.0" width="26.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="756.4" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.16%)</title><rect x="776.0" y="163.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="779.0" y="174.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.16%)</title><rect x="776.0" y="147.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.0" y="158.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.16%)</title><rect x="776.0" y="131.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="779.0" y="142.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.16%)</title><rect x="777.8" y="163.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.8" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.32%)</title><rect x="779.7" y="195.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="782.7" y="206.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.64%)</title><rect x="783.5" y="211.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="786.5" y="222.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.48%)</title><rect x="785.4" y="195.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.4" y="206.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (2 samples, 0.32%)</title><rect x="787.3" y="179.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.3" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (2 samples, 0.32%)</title><rect x="791.0" y="211.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="794.0" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (33 samples, 5.26%)</title><rect x="794.8" y="211.0" width="62.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="797.8" y="222.0">one/ni..</text>
</g>
<g>
<title>java/lang/String.regionMatches (15 samples, 2.39%)</title><rect x="813.6" y="195.0" width="28.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.6" y="206.0">ja..</text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.48%)</title><rect x="813.6" y="179.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.6" y="190.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.48%)</title><rect x="813.6" y="163.0" width="5.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="816.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.16%)</title><rect x="819.3" y="179.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="822.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.16%)</title><rect x="819.3" y="163.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="822.3" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 1.75%)</title><rect x="821.1" y="179.0" width="20.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.1" y="190.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (9 samples, 1.44%)</title><rect x="821.1" y="163.0" width="17.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.1" y="174.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (9 samples, 1.44%)</title><rect x="821.1" y="147.0" width="17.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.1" y="158.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.16%)</title><rect x="821.1" y="131.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="824.1" y="142.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (8 samples, 1.28%)</title><rect x="823.0" y="131.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="826.0" y="142.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (4 samples, 0.64%)</title><rect x="830.5" y="115.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="833.5" y="126.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.32%)</title><rect x="838.1" y="163.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="841.1" y="174.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.32%)</title><rect x="838.1" y="147.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="841.1" y="158.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.16%)</title><rect x="838.1" y="131.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="841.1" y="142.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.16%)</title><rect x="840.0" y="131.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="843.0" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 1.28%)</title><rect x="841.8" y="195.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="844.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.48%)</title><rect x="841.8" y="179.0" width="5.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.8" y="190.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (5 samples, 0.80%)</title><rect x="847.5" y="179.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="850.5" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.16%)</title><rect x="847.5" y="163.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.5" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.64%)</title><rect x="849.4" y="163.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.4" y="174.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.64%)</title><rect x="849.4" y="147.0" width="7.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="852.4" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 4.63%)</title><rect x="856.9" y="211.0" width="54.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.9" y="222.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 4.31%)</title><rect x="860.7" y="195.0" width="50.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.7" y="206.0">one/n..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.32%)</title><rect x="900.2" y="179.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.32%)</title><rect x="900.2" y="163.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="903.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.32%)</title><rect x="900.2" y="147.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="903.2" y="158.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (4 samples, 0.64%)</title><rect x="903.9" y="179.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="906.9" y="190.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (143 samples, 22.81%)</title><rect x="911.5" y="227.0" width="269.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="914.5" y="238.0">one/nio/net/Session.read</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (143 samples, 22.81%)</title><rect x="911.5" y="211.0" width="269.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="914.5" y="222.0">one/nio/net/NativeSocket.read</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (27 samples, 4.31%)</title><rect x="945.3" y="195.0" width="50.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="948.3" y="206.0">Java_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.16%)</title><rect x="956.6" y="179.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="959.6" y="190.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.16%)</title><rect x="958.5" y="179.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.5" y="190.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.16%)</title><rect x="960.4" y="179.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="963.4" y="190.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (5 samples, 0.80%)</title><rect x="962.3" y="179.0" width="9.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="965.3" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (13 samples, 2.07%)</title><rect x="971.7" y="179.0" width="24.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="974.7" y="190.0">j..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.16%)</title><rect x="981.1" y="163.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.1" y="174.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.48%)</title><rect x="983.0" y="163.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.0" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (4 samples, 0.64%)</title><rect x="988.6" y="163.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="991.6" y="174.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.32%)</title><rect x="996.2" y="195.0" width="3.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="999.2" y="206.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (4 samples, 0.64%)</title><rect x="999.9" y="195.0" width="7.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1002.9" y="206.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.96%)</title><rect x="1007.4" y="195.0" width="11.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1010.4" y="206.0"></text>
</g>
<g>
<title>recv (85 samples, 13.56%)</title><rect x="1018.7" y="195.0" width="160.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1021.7" y="206.0">recv</text>
</g>
<g>
<title>recv@plt (1 samples, 0.16%)</title><rect x="1178.7" y="195.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1181.7" y="206.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.48%)</title><rect x="1180.6" y="243.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="254.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.48%)</title><rect x="1180.6" y="227.0" width="5.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1183.6" y="238.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.16%)</title><rect x="1184.4" y="211.0" width="1.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1187.4" y="222.0"></text>
</g>
<g>
<title>[VM Periodic Tas tid=30359] (1 samples, 0.16%)</title><rect x="1186.2" y="291.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1189.2" y="302.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.16%)</title><rect x="1186.2" y="275.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1189.2" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.16%)</title><rect x="1186.2" y="259.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1189.2" y="270.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.16%)</title><rect x="1186.2" y="243.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="254.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.16%)</title><rect x="1186.2" y="227.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="238.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.16%)</title><rect x="1186.2" y="211.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="222.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.16%)</title><rect x="1186.2" y="195.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="206.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.16%)</title><rect x="1186.2" y="179.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1189.2" y="190.0"></text>
</g>
<g>
<title>[VM Thread tid=30351] (1 samples, 0.16%)</title><rect x="1188.1" y="291.0" width="1.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1191.1" y="302.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.16%)</title><rect x="1188.1" y="275.0" width="1.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1191.1" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.16%)</title><rect x="1188.1" y="259.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1191.1" y="270.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.16%)</title><rect x="1188.1" y="243.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.1" y="254.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.16%)</title><rect x="1188.1" y="227.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="238.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.16%)</title><rect x="1188.1" y="211.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="222.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.16%)</title><rect x="1188.1" y="195.0" width="1.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.1" y="206.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (1 samples, 0.16%)</title><rect x="1188.1" y="179.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.1" y="190.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1 samples, 0.16%)</title><rect x="1188.1" y="163.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.1" y="174.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.16%)</title><rect x="1188.1" y="147.0" width="1.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1191.1" y="158.0"></text>
</g>
</g>
</svg>
