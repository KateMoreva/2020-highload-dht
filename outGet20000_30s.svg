<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="341"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="341"> </text>
<g id="frames">
<g>
<title>all (283 samples, 100.00%)</title><rect x="10.0" y="307.0" width="1180.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="318.0">all</text>
</g>
<g>
<title>[NIO Selector #5 tid=30368] (282 samples, 99.65%)</title><rect x="10.0" y="291.0" width="1175.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="13.0" y="302.0">[NIO Selector #5 tid=30368]</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (282 samples, 99.65%)</title><rect x="10.0" y="275.0" width="1175.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="286.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 2.47%)</title><rect x="22.5" y="259.0" width="29.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.5" y="270.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 2.47%)</title><rect x="22.5" y="243.0" width="29.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="25.5" y="254.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (62 samples, 21.91%)</title><rect x="51.7" y="259.0" width="258.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.7" y="270.0">one/nio/net/NativeSelector.select</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (2 samples, 0.71%)</title><rect x="55.9" y="243.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="58.9" y="254.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.71%)</title><rect x="55.9" y="227.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.9" y="238.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (59 samples, 20.85%)</title><rect x="64.2" y="243.0" width="246.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.2" y="254.0">one/nio/net/NativeSelector.epollW..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.35%)</title><rect x="85.1" y="227.0" width="4.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="88.1" y="238.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.35%)</title><rect x="89.2" y="227.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="92.2" y="238.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.35%)</title><rect x="89.2" y="211.0" width="4.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="92.2" y="222.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.35%)</title><rect x="93.4" y="227.0" width="4.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="96.4" y="238.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 1.06%)</title><rect x="97.6" y="227.0" width="12.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="100.6" y="238.0"></text>
</g>
<g>
<title>epoll_wait (40 samples, 14.13%)</title><rect x="110.1" y="227.0" width="166.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="113.1" y="238.0">epoll_wait</text>
</g>
<g>
<title>gettimeofday (4 samples, 1.41%)</title><rect x="276.9" y="227.0" width="16.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="279.9" y="238.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.41%)</title><rect x="276.9" y="211.0" width="16.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="279.9" y="222.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.35%)</title><rect x="276.9" y="195.0" width="4.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="279.9" y="206.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (3 samples, 1.06%)</title><rect x="281.0" y="195.0" width="12.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="284.0" y="206.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.71%)</title><rect x="285.2" y="179.0" width="8.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="288.2" y="190.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 1.41%)</title><rect x="293.5" y="227.0" width="16.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="296.5" y="238.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 1.41%)</title><rect x="293.5" y="211.0" width="16.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="296.5" y="222.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (4 samples, 1.41%)</title><rect x="293.5" y="195.0" width="16.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="296.5" y="206.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (210 samples, 74.20%)</title><rect x="310.2" y="259.0" width="875.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.2" y="270.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (205 samples, 72.44%)</title><rect x="318.6" y="243.0" width="854.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.6" y="254.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (135 samples, 47.70%)</title><rect x="322.7" y="227.0" width="562.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.7" y="238.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.35%)</title><rect x="331.1" y="211.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (98 samples, 34.63%)</title><rect x="335.2" y="211.0" width="408.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="338.2" y="222.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (98 samples, 34.63%)</title><rect x="335.2" y="195.0" width="408.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="338.2" y="206.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (10 samples, 3.53%)</title><rect x="339.4" y="179.0" width="41.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.4" y="190.0">one..</text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 3.53%)</title><rect x="339.4" y="163.0" width="41.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.4" y="174.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 3.18%)</title><rect x="339.4" y="147.0" width="37.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.4" y="158.0">jav..</text>
</g>
<g>
<title>java/lang/String.equals (8 samples, 2.83%)</title><rect x="343.6" y="131.0" width="33.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.6" y="142.0">ja..</text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.71%)</title><rect x="364.4" y="115.0" width="8.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="367.4" y="126.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.35%)</title><rect x="372.8" y="115.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="375.8" y="126.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.35%)</title><rect x="376.9" y="147.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="379.9" y="158.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.35%)</title><rect x="376.9" y="131.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="379.9" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.35%)</title><rect x="376.9" y="115.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kate/moreva/MySimpleHttpServer.handleDefault (87 samples, 30.74%)</title><rect x="381.1" y="179.0" width="362.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.1" y="190.0">ru/mail/polis/service/kate/moreva/MySimpleHttpSer..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (82 samples, 28.98%)</title><rect x="381.1" y="163.0" width="341.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.1" y="174.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 2.12%)</title><rect x="381.1" y="147.0" width="25.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.1" y="158.0">j..</text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 2.12%)</title><rect x="381.1" y="131.0" width="25.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.1" y="142.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 2.12%)</title><rect x="381.1" y="115.0" width="25.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.1" y="126.0">j..</text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.35%)</title><rect x="393.6" y="99.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.6" y="110.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.35%)</title><rect x="393.6" y="83.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="396.6" y="94.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.35%)</title><rect x="393.6" y="67.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.6" y="78.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.35%)</title><rect x="397.8" y="99.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="400.8" y="110.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.35%)</title><rect x="397.8" y="83.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.8" y="94.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.35%)</title><rect x="401.9" y="99.0" width="4.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="404.9" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (74 samples, 26.15%)</title><rect x="406.1" y="147.0" width="308.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.1" y="158.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (27 samples, 9.54%)</title><rect x="406.1" y="131.0" width="112.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.1" y="142.0">one/nio/http/R..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 1.06%)</title><rect x="422.8" y="115.0" width="12.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="425.8" y="126.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.35%)</title><rect x="435.3" y="115.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.3" y="126.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (19 samples, 6.71%)</title><rect x="439.5" y="115.0" width="79.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.5" y="126.0">one/nio/u..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.71%)</title><rect x="439.5" y="99.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="442.5" y="110.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.71%)</title><rect x="439.5" y="83.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="442.5" y="94.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (3 samples, 1.06%)</title><rect x="447.8" y="99.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="450.8" y="110.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (6 samples, 2.12%)</title><rect x="460.3" y="99.0" width="25.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="463.3" y="110.0">o..</text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.71%)</title><rect x="477.0" y="83.0" width="8.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="480.0" y="94.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.charAt (2 samples, 0.71%)</title><rect x="477.0" y="67.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.0" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.checkIndex (1 samples, 0.35%)</title><rect x="481.2" y="51.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="484.2" y="62.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.length (1 samples, 0.35%)</title><rect x="481.2" y="35.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.2" y="46.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 2.83%)</title><rect x="485.3" y="99.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.3" y="110.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 2.47%)</title><rect x="489.5" y="83.0" width="29.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.5" y="94.0">on..</text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 2.47%)</title><rect x="489.5" y="67.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="492.5" y="78.0">on..</text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 1.41%)</title><rect x="502.0" y="51.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.0" y="62.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (4 samples, 1.41%)</title><rect x="502.0" y="35.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.0" y="46.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (47 samples, 16.61%)</title><rect x="518.7" y="131.0" width="196.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="521.7" y="142.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (47 samples, 16.61%)</title><rect x="518.7" y="115.0" width="196.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="521.7" y="126.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (47 samples, 16.61%)</title><rect x="518.7" y="99.0" width="196.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="521.7" y="110.0">one/nio/net/Session$Array..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (47 samples, 16.61%)</title><rect x="518.7" y="83.0" width="196.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="521.7" y="94.0">one/nio/net/NativeSocket...</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 1.77%)</title><rect x="522.9" y="67.0" width="20.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="525.9" y="78.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (1 samples, 0.35%)</title><rect x="535.4" y="51.0" width="4.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="538.4" y="62.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.35%)</title><rect x="539.5" y="51.0" width="4.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="542.5" y="62.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (1 samples, 0.35%)</title><rect x="539.5" y="35.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="542.5" y="46.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.06%)</title><rect x="543.7" y="67.0" width="12.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="546.7" y="78.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.71%)</title><rect x="556.2" y="67.0" width="8.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="559.2" y="78.0"></text>
</g>
<g>
<title>send (36 samples, 12.72%)</title><rect x="564.6" y="67.0" width="150.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="567.6" y="78.0">send</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.71%)</title><rect x="714.7" y="147.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.71%)</title><rect x="714.7" y="131.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="717.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.newString (1 samples, 0.35%)</title><rect x="718.8" y="115.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="721.8" y="126.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.35%)</title><rect x="718.8" y="99.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="721.8" y="110.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 1.77%)</title><rect x="723.0" y="163.0" width="20.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="726.0" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.71%)</title><rect x="735.5" y="147.0" width="8.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="738.5" y="158.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.71%)</title><rect x="735.5" y="131.0" width="8.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="738.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (22 samples, 7.77%)</title><rect x="743.9" y="211.0" width="91.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.9" y="222.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 2.47%)</title><rect x="760.5" y="195.0" width="29.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="763.5" y="206.0">on..</text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 1.06%)</title><rect x="777.2" y="179.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="780.2" y="190.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 1.06%)</title><rect x="777.2" y="163.0" width="12.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.2" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 1.06%)</title><rect x="777.2" y="147.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="780.2" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 3.18%)</title><rect x="789.7" y="195.0" width="37.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="792.7" y="206.0">one..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (9 samples, 3.18%)</title><rect x="789.7" y="179.0" width="37.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="792.7" y="190.0">one..</text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (1 samples, 0.35%)</title><rect x="823.1" y="163.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="826.1" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.71%)</title><rect x="827.2" y="195.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="830.2" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 2.12%)</title><rect x="835.6" y="211.0" width="25.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="838.6" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.71%)</title><rect x="848.1" y="195.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="851.1" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.71%)</title><rect x="848.1" y="179.0" width="8.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.1" y="190.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.71%)</title><rect x="848.1" y="163.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.1" y="174.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (2 samples, 0.71%)</title><rect x="848.1" y="147.0" width="8.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.1" y="158.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (2 samples, 0.71%)</title><rect x="848.1" y="131.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.1" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.35%)</title><rect x="856.4" y="195.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="859.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.35%)</title><rect x="856.4" y="179.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="859.4" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.35%)</title><rect x="856.4" y="163.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="859.4" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 2.12%)</title><rect x="860.6" y="211.0" width="25.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.6" y="222.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 2.12%)</title><rect x="860.6" y="195.0" width="25.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="863.6" y="206.0">o..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.35%)</title><rect x="881.4" y="179.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="884.4" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.35%)</title><rect x="881.4" y="163.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="884.4" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.35%)</title><rect x="881.4" y="147.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="884.4" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (69 samples, 24.38%)</title><rect x="885.6" y="227.0" width="287.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="888.6" y="238.0">one/nio/net/Session.read</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (69 samples, 24.38%)</title><rect x="885.6" y="211.0" width="287.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="888.6" y="222.0">one/nio/net/NativeSocket.read</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (12 samples, 4.24%)</title><rect x="919.0" y="195.0" width="50.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="922.0" y="206.0">Java_..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.35%)</title><rect x="931.5" y="179.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="934.5" y="190.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.35%)</title><rect x="935.7" y="179.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="938.7" y="190.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned (1 samples, 0.35%)</title><rect x="939.8" y="179.0" width="4.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="942.8" y="190.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 1.41%)</title><rect x="944.0" y="179.0" width="16.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="947.0" y="190.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.71%)</title><rect x="944.0" y="163.0" width="8.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="947.0" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.195] (2 samples, 0.71%)</title><rect x="952.3" y="163.0" width="8.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="955.3" y="174.0"></text>
</g>
<g>
<title>memmove@plt (2 samples, 0.71%)</title><rect x="960.7" y="179.0" width="8.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="963.7" y="190.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (6 samples, 2.12%)</title><rect x="969.0" y="195.0" width="25.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="972.0" y="206.0">_..</text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 2.12%)</title><rect x="994.0" y="195.0" width="25.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="997.0" y="206.0">j..</text>
</g>
<g>
<title>recv (37 samples, 13.07%)</title><rect x="1019.0" y="195.0" width="154.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1022.0" y="206.0">recv</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.06%)</title><rect x="1173.3" y="243.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.3" y="254.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 1.06%)</title><rect x="1173.3" y="227.0" width="12.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1176.3" y="238.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.71%)</title><rect x="1177.5" y="211.0" width="8.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1180.5" y="222.0"></text>
</g>
<g>
<title>[VM Periodic Tas tid=30359] (1 samples, 0.35%)</title><rect x="1185.8" y="291.0" width="4.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1188.8" y="302.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.35%)</title><rect x="1185.8" y="275.0" width="4.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1188.8" y="286.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.35%)</title><rect x="1185.8" y="259.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1188.8" y="270.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.35%)</title><rect x="1185.8" y="243.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.8" y="254.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.35%)</title><rect x="1185.8" y="227.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.8" y="238.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.35%)</title><rect x="1185.8" y="211.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="222.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.35%)</title><rect x="1185.8" y="195.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.8" y="206.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.35%)</title><rect x="1185.8" y="179.0" width="4.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1188.8" y="190.0"></text>
</g>
</g>
</svg>
